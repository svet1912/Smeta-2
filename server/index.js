import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import pino from 'pino-http';
import { query } from './database.js';
import { config } from './config.js';
import { authMiddleware } from './middleware/auth.js';
import { observeRequestDuration, metricsEndpoint, activeConnections as activeConnectionsGauge } from './metrics.js';
import { cacheGetOrSet, cacheInvalidateByPrefix, getCacheStats } from './cache/cache.js';
import { isRedisAvailable, getRedisStats } from './cache/redisClient.js';
import { createLead, getLeadsStats, leadRateLimit, initializeLeadsTable } from './controllers/leadController.js';

dotenv.config();

console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');

const app = express();
const PORT = config.port;

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const activeConnections = new Set();
const MAX_CONNECTIONS = 10;

// Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
app.use((req, res, next) => {
  if (activeConnections.size >= MAX_CONNECTIONS) {
    console.log(`‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç (${activeConnections.size}/${MAX_CONNECTIONS})`);
    return res.status(503).json({ error: '–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' });
  }

  const connectionId = Math.random().toString(36).substr(2, 9);
  activeConnections.add(connectionId);

  req.connectionId = connectionId;
  console.log(`üì® ${req.method} ${req.path} [${connectionId}] (${activeConnections.size}/${MAX_CONNECTIONS})`);

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  activeConnectionsGauge.set(activeConnections.size);

  res.on('finish', () => {
    activeConnections.delete(connectionId);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    activeConnectionsGauge.set(activeConnections.size);
  });

  res.on('close', () => {
    activeConnections.delete(connectionId);
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    activeConnectionsGauge.set(activeConnections.size);
  });

  next();
});

// –ë—ã—Å—Ç—Ä—ã–π –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –ª–æ–≥–≥–µ—Ä
app.use(
  pino({
    level: process.env.LOG_LEVEL || 'info',
    // –∫–æ—Ä–µ–ª–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã ‚Äî –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    genReqId: (req, res) => `${Date.now()}-${Math.random().toString(16).slice(2)}`
  })
);

// –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ (gzip/br) ‚Äî —ç–∫–æ–Ω–æ–º–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ TTFB
app.use(compression());

// –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ ETag (—Å–∏–ª—ë–Ω –Ω–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö, –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö)
app.set('etag', 'strong');

// Keep-Alive (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö TCP-—Å–µ—Å—Å–∏–π)
app.use((req, res, next) => {
  res.setHeader('Connection', 'keep-alive');
  next();
});

// Rate limiting (–º—è–≥–∫–∏–π –ª–∏–º–∏—Ç –Ω–∞ /api)
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 300, // –¥–æ 300 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å IP –≤ –æ–∫–Ω–æ
  standardHeaders: true,
  legacyHeaders: false,
  message: {
    error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
    retryAfter: '15 –º–∏–Ω—É—Ç'
  }
});

// –ë–ª–æ–∫ –Ω–∞ —Å–ª–∏—à–∫–æ–º —Ç—è–∂—ë–ª—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∑–∞—â–∏—Ç–∞ –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ UX)
app.use((req, res, next) => {
  // –º—è–≥–∫–∞—è —Å–∞–Ω–∏—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const limit = Number(req.query.limit || 50);

  if (limit > 3000) {
    // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (works: 540, materials: 1448)
    return res.status(400).json({ error: 'Limit too large. Maximum allowed: 3000' });
  }
  next();
});

// Middleware
const allowedOrigins = new Set([
  'http://localhost:4174', // vite preview
  'http://localhost:3000', // dev
  'http://localhost:5173', // vite dev
  'http://127.0.0.1:4174' // local preview
]);

app.use(
  cors({
    origin: (origin, callback) => {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
      if (!origin || allowedOrigins.has(origin)) {
        callback(null, true);
      } else {
        console.log('‚ö†Ô∏è CORS blocked origin:', origin);
        callback(null, true); // –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      }
    },
    credentials: true,
    optionsSuccessStatus: 200,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization']
  })
);

// –°—Ç—Ä–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑–º–µ—Ä JSON (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ–ª—å—à–∏—Ö payload)
app.use(express.json({ limit: '1mb' }));
app.use(express.static('.'));

// Rate limiting –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
app.use('/api', apiLimiter);

// Prometheus –º–µ—Ç—Ä–∏–∫–∏
app.use(observeRequestDuration);

// ============ –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø ============

function setCatalogCache(res) {
  // –ø—É–±–ª–∏—á–Ω—ã–π –∫–µ—à 5 –º–∏–Ω—É—Ç, –º–æ–∂–Ω–æ –æ—Ç–¥–∞–≤–∞—Ç—å ¬´–ø—Ä–æ—Ç—É—Ö—à–µ–µ¬ª –µ—â—ë 60 —Å–µ–∫ –ø–æ–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ–º
  res.setHeader('Cache-Control', 'public, max-age=300, stale-while-revalidate=60');
}

function setLastModified(res, lastUpdated) {
  // lastUpdated ‚Äî ISO —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ Date
  res.setHeader('Last-Modified', new Date(lastUpdated).toUTCString());
}

function withCatalogCache(handler) {
  return async (req, res, next) => {
    try {
      setCatalogCache(res);
      await handler(req, res, next);
    } catch (e) {
      next(e);
    }
  };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è 304 Not Modified
function checkNotModified(req, res, lastUpdated) {
  if (req.headers['if-modified-since']) {
    const clientTime = new Date(req.headers['if-modified-since']);
    const serverTime = new Date(lastUpdated);
    if (clientTime >= serverTime) {
      res.status(304).end();
      return true;
    }
  }
  return false;
}

// ============ API ENDPOINTS ============

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç endpoint –±–µ–∑ –ë–î
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    message: 'Backend —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
    port: PORT,
    timestamp: new Date().toISOString()
  });
});

app.get('/api/health/db', async (req, res) => {
  try {
    const result = await query('SELECT 1 as ok');
    res.json({ db: 'up', result: result.rows[0].ok });
  } catch (e) {
    res.status(503).json({ db: 'down', error: e.message });
  }
});

// Prometheus –º–µ—Ç—Ä–∏–∫–∏ endpoint
app.get('/metrics', metricsEndpoint);

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üì® ${req.method} ${req.path} - ${req.ip}`);
  next();
});

console.log('üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è CORS –ø–æ–ª–∏—Ç–∏–∫–∞');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
async function initializeTables() {
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await query(`
      CREATE TABLE IF NOT EXISTS auth_users (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        firstname VARCHAR(255) NOT NULL,
        lastname VARCHAR(255) NOT NULL,
        company VARCHAR(255),
        phone VARCHAR(20),
        position VARCHAR(255),
        location VARCHAR(255),
        bio TEXT,
        is_active BOOLEAN DEFAULT true,
        email_verified BOOLEAN DEFAULT false,
        last_login TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–µ—Å—Å–∏–π/—Ç–æ–∫–µ–Ω–æ–≤
    await query(`
      CREATE TABLE IF NOT EXISTS user_sessions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES auth_users(id) ON DELETE CASCADE,
        token_hash VARCHAR(255) NOT NULL,
        expires_at TIMESTAMP NOT NULL,
        user_agent TEXT,
        ip_address INET,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await query(`
      CREATE INDEX IF NOT EXISTS idx_auth_users_email ON auth_users(email);
      CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);
      CREATE INDEX IF NOT EXISTS idx_user_sessions_expires ON user_sessions(expires_at);
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    await query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
    await query(`
      CREATE TABLE IF NOT EXISTS orders (
        id SERIAL PRIMARY KEY,
        tracking_no BIGINT NOT NULL,
        product_name VARCHAR(255) NOT NULL,
        quantity INTEGER NOT NULL,
        status INTEGER DEFAULT 0,
        amount DECIMAL(10,2) NOT NULL,
        user_id INTEGER REFERENCES auth_users(id),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await query(`
      CREATE TABLE IF NOT EXISTS statistics (
        id SERIAL PRIMARY KEY,
        metric_name VARCHAR(255) NOT NULL,
        metric_value INTEGER NOT NULL,
        percentage DECIMAL(5,2),
        extra_value INTEGER,
        is_loss BOOLEAN DEFAULT FALSE,
        color VARCHAR(50) DEFAULT 'primary',
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    await query(`
      CREATE TABLE IF NOT EXISTS work_materials (
        work_id VARCHAR(50) NOT NULL,
        material_id VARCHAR(50) NOT NULL,
        consumption_per_work_unit DECIMAL(10,6),
        waste_coeff DECIMAL(5,3) DEFAULT 1.000,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (work_id, material_id),
        FOREIGN KEY (work_id) REFERENCES works_ref(id) ON DELETE CASCADE,
        FOREIGN KEY (material_id) REFERENCES materials(id) ON DELETE CASCADE
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–º–µ—Ç
    await query(`
      CREATE TABLE IF NOT EXISTS construction_projects (
        id SERIAL PRIMARY KEY,
        customer_name VARCHAR(255) NOT NULL,
        object_address TEXT NOT NULL,
        contractor_name VARCHAR(255) NOT NULL,
        contract_number VARCHAR(100) NOT NULL,
        deadline DATE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await query(`
      CREATE TABLE IF NOT EXISTS user_roles (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) UNIQUE NOT NULL,
        description TEXT,
        permissions JSONB DEFAULT '{}',
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π (–º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º)
    await query(`
      CREATE TABLE IF NOT EXISTS user_role_assignments (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES auth_users(id) ON DELETE CASCADE,
        role_id INTEGER REFERENCES user_roles(id) ON DELETE CASCADE,
        tenant_id UUID,
        assigned_by INTEGER REFERENCES auth_users(id) ON DELETE SET NULL,
        assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP,
        is_active BOOLEAN DEFAULT true,
        UNIQUE(user_id, role_id, tenant_id)
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏)
    await query(`
      CREATE TABLE IF NOT EXISTS object_parameters (
        id SERIAL PRIMARY KEY,
        project_id INTEGER REFERENCES construction_projects(id) ON DELETE CASCADE,
        building_type VARCHAR(255),
        construction_category INTEGER,
        floors_above_ground INTEGER,
        floors_below_ground INTEGER,
        height_above_ground DECIMAL(10,2),
        height_below_ground DECIMAL(10,2),
        total_area DECIMAL(12,2),
        building_area DECIMAL(12,2),
        estimated_cost DECIMAL(15,2),
        construction_complexity VARCHAR(100),
        seismic_zone INTEGER,
        wind_load INTEGER,
        snow_load INTEGER,
        soil_conditions VARCHAR(255),
        groundwater_level DECIMAL(10,2),
        climate_zone VARCHAR(100),
        user_id INTEGER REFERENCES auth_users(id) ON DELETE SET NULL,
        tenant_id UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–º–µ—â–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞
    await query(`
      CREATE TABLE IF NOT EXISTS project_rooms (
        id SERIAL PRIMARY KEY,
        object_parameters_id INTEGER REFERENCES object_parameters(id) ON DELETE CASCADE,
        room_name VARCHAR(255) NOT NULL,
        area DECIMAL(10,2),
        height DECIMAL(8,2),
        volume DECIMAL(12,2),
        finish_class VARCHAR(100),
        purpose VARCHAR(255),
        sort_order INTEGER DEFAULT 0,
        user_id INTEGER REFERENCES auth_users(id) ON DELETE SET NULL,
        tenant_id UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await query(`
      CREATE TABLE IF NOT EXISTS constructive_elements (
        id SERIAL PRIMARY KEY,
        object_parameters_id INTEGER REFERENCES object_parameters(id) ON DELETE CASCADE,
        element_type VARCHAR(100) NOT NULL, -- foundation, walls, roof, etc.
        material VARCHAR(255),
        characteristics TEXT,
        quantity DECIMAL(12,2),
        unit VARCHAR(50),
        notes TEXT,
        user_id INTEGER REFERENCES auth_users(id) ON DELETE SET NULL,
        tenant_id UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    await query(`
      CREATE TABLE IF NOT EXISTS engineering_systems (
        id SERIAL PRIMARY KEY,
        object_parameters_id INTEGER REFERENCES object_parameters(id) ON DELETE CASCADE,
        system_type VARCHAR(100) NOT NULL, -- heating, ventilation, electrical, etc.
        characteristics TEXT,
        capacity VARCHAR(255),
        efficiency VARCHAR(100),
        notes TEXT,
        user_id INTEGER REFERENCES auth_users(id) ON DELETE SET NULL,
        tenant_id UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å–º–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
    await query(`
      CREATE TABLE IF NOT EXISTS customer_estimates (
        id SERIAL PRIMARY KEY,
        project_id INTEGER REFERENCES construction_projects(id) ON DELETE CASCADE,
        name VARCHAR(255) NOT NULL DEFAULT '–°–º–µ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞',
        description TEXT,
        version INTEGER DEFAULT 1,
        status VARCHAR(50) DEFAULT 'draft',
        total_amount DECIMAL(15,2) DEFAULT 0,
        work_coefficient DECIMAL(8,3) DEFAULT 1.000,
        material_coefficient DECIMAL(8,3) DEFAULT 1.000,
        user_id INTEGER REFERENCES auth_users(id) ON DELETE SET NULL,
        tenant_id UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        approved_at TIMESTAMP,
        approved_by INTEGER REFERENCES auth_users(id) ON DELETE SET NULL
      );
    `);

    await query(`
      CREATE TABLE IF NOT EXISTS customer_estimate_items (
        id SERIAL PRIMARY KEY,
        estimate_id INTEGER REFERENCES customer_estimates(id) ON DELETE CASCADE,
        item_type VARCHAR(20) NOT NULL,
        reference_id VARCHAR(50),
        name TEXT NOT NULL,
        unit VARCHAR(50),
        quantity DECIMAL(12,3) NOT NULL,
        unit_price DECIMAL(12,2) NOT NULL,
        original_unit_price DECIMAL(12,2),
        total_amount DECIMAL(15,2) NOT NULL,
        sort_order INTEGER DEFAULT 0,
        notes TEXT,
        user_id INTEGER REFERENCES auth_users(id) ON DELETE SET NULL,
        tenant_id UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    await query(`
      CREATE TABLE IF NOT EXISTS customer_estimate_history (
        id SERIAL PRIMARY KEY,
        estimate_id INTEGER REFERENCES customer_estimates(id) ON DELETE CASCADE,
        action VARCHAR(50) NOT NULL,
        changes JSONB,
        old_values JSONB,
        new_values JSONB,
        user_id INTEGER REFERENCES auth_users(id) ON DELETE SET NULL,
        tenant_id UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    await query(`
      CREATE TABLE IF NOT EXISTS customer_estimate_templates (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        template_data JSONB NOT NULL,
        is_public BOOLEAN DEFAULT false,
        user_id INTEGER REFERENCES auth_users(id) ON DELETE SET NULL,
        tenant_id UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∞—É–¥–∏—Ç)
    await query(`
      CREATE TABLE IF NOT EXISTS audit_log (
        id SERIAL PRIMARY KEY,
        table_name VARCHAR(100) NOT NULL,
        record_id INTEGER NOT NULL,
        action VARCHAR(20) NOT NULL, -- INSERT, UPDATE, DELETE
        old_values JSONB,
        new_values JSONB,
        user_id INTEGER REFERENCES auth_users(id) ON DELETE SET NULL,
        tenant_id UUID,
        ip_address INET,
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
    await query(`
      CREATE TABLE IF NOT EXISTS permissions (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) UNIQUE NOT NULL,
        resource VARCHAR(100) NOT NULL, -- projects, estimates, materials, etc.
        action VARCHAR(50) NOT NULL, -- create, read, update, delete, manage, etc.
        description TEXT,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–∏ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    await query(`
      CREATE TABLE IF NOT EXISTS role_permissions (
        id SERIAL PRIMARY KEY,
        role_id INTEGER REFERENCES user_roles(id) ON DELETE CASCADE,
        permission_id INTEGER REFERENCES permissions(id) ON DELETE CASCADE,
        granted_by INTEGER REFERENCES auth_users(id) ON DELETE SET NULL,
        granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(role_id, permission_id)
      );
    `);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    try {
      await query(
        `ALTER TABLE construction_projects ADD COLUMN IF NOT EXISTS user_id INTEGER REFERENCES auth_users(id) ON DELETE SET NULL`
      );
      await query(`ALTER TABLE construction_projects ADD COLUMN IF NOT EXISTS tenant_id UUID`);
      await query(`ALTER TABLE construction_projects ADD COLUMN IF NOT EXISTS status VARCHAR(50) DEFAULT 'draft'`);

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π –≤ auth_users –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
      await query(`ALTER TABLE auth_users ADD COLUMN IF NOT EXISTS phone VARCHAR(20)`);
      await query(`ALTER TABLE auth_users ADD COLUMN IF NOT EXISTS position VARCHAR(255)`);
      await query(`ALTER TABLE auth_users ADD COLUMN IF NOT EXISTS location VARCHAR(255)`);
      await query(`ALTER TABLE auth_users ADD COLUMN IF NOT EXISTS bio TEXT`);

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –æ–∫–æ–Ω –∏ –ø–æ—Ä—Ç–∞–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É project_rooms
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS perimeter DECIMAL(10,2) DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS prostenki DECIMAL(10,2) DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS doors_count INTEGER DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS window1_width DECIMAL(8,2) DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS window1_height DECIMAL(8,2) DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS window2_width DECIMAL(8,2) DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS window2_height DECIMAL(8,2) DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS window3_width DECIMAL(8,2) DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS window3_height DECIMAL(8,2) DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS portal1_width DECIMAL(8,2) DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS portal1_height DECIMAL(8,2) DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS portal2_width DECIMAL(8,2) DEFAULT 0`);
      await query(`ALTER TABLE project_rooms ADD COLUMN IF NOT EXISTS portal2_height DECIMAL(8,2) DEFAULT 0`);

      // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
      await query(`CREATE INDEX IF NOT EXISTS idx_construction_projects_tenant ON construction_projects(tenant_id)`);
      await query(`CREATE INDEX IF NOT EXISTS idx_construction_projects_user_tenant ON construction_projects(user_id, tenant_id)`);
    } catch (error) {
      console.log('‚ÑπÔ∏è –ü–æ–ª—è –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.message);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await query(`
      CREATE INDEX IF NOT EXISTS idx_auth_users_email ON auth_users(email);
      CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);
      CREATE INDEX IF NOT EXISTS idx_user_sessions_expires ON user_sessions(expires_at);
      CREATE INDEX IF NOT EXISTS idx_work_materials_work_id ON work_materials(work_id);
      CREATE INDEX IF NOT EXISTS idx_work_materials_material_id ON work_materials(material_id);
      CREATE INDEX IF NOT EXISTS idx_work_materials_work_material ON work_materials(work_id, material_id);
      CREATE INDEX IF NOT EXISTS idx_works_ref_sort_order ON works_ref(sort_order);
      CREATE INDEX IF NOT EXISTS idx_works_ref_id ON works_ref(id);
      CREATE INDEX IF NOT EXISTS idx_works_ref_name ON works_ref(name);
      CREATE INDEX IF NOT EXISTS idx_materials_id ON materials(id);
      CREATE INDEX IF NOT EXISTS idx_materials_name ON materials(name);
      CREATE INDEX IF NOT EXISTS idx_materials_unit_price ON materials(unit_price);
      
      -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–æ–ª–µ–π
      CREATE INDEX IF NOT EXISTS idx_user_role_assignments_user ON user_role_assignments(user_id);
      CREATE INDEX IF NOT EXISTS idx_user_role_assignments_role ON user_role_assignments(role_id);
      CREATE INDEX IF NOT EXISTS idx_user_role_assignments_tenant ON user_role_assignments(tenant_id);
      CREATE INDEX IF NOT EXISTS idx_user_role_assignments_active ON user_role_assignments(is_active);
      CREATE INDEX IF NOT EXISTS idx_user_role_assignments_expires ON user_role_assignments(expires_at);
      
      -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
      CREATE INDEX IF NOT EXISTS idx_object_parameters_project ON object_parameters(project_id);
      CREATE INDEX IF NOT EXISTS idx_object_parameters_user_tenant ON object_parameters(user_id, tenant_id);
      CREATE INDEX IF NOT EXISTS idx_project_rooms_object_params ON project_rooms(object_parameters_id);
      CREATE INDEX IF NOT EXISTS idx_project_rooms_user_tenant ON project_rooms(user_id, tenant_id);
      CREATE INDEX IF NOT EXISTS idx_constructive_elements_object_params ON constructive_elements(object_parameters_id);
      CREATE INDEX IF NOT EXISTS idx_engineering_systems_object_params ON engineering_systems(object_parameters_id);
      
      -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      CREATE INDEX IF NOT EXISTS idx_role_permissions_role ON role_permissions(role_id);
      CREATE INDEX IF NOT EXISTS idx_role_permissions_permission ON role_permissions(permission_id);
      CREATE INDEX IF NOT EXISTS idx_permissions_resource_action ON permissions(resource, action);
      
      -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–º–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
      CREATE INDEX IF NOT EXISTS idx_customer_estimates_project ON customer_estimates(project_id);
      CREATE INDEX IF NOT EXISTS idx_customer_estimates_user_tenant ON customer_estimates(user_id, tenant_id);
      CREATE INDEX IF NOT EXISTS idx_customer_estimates_status ON customer_estimates(status);
      CREATE INDEX IF NOT EXISTS idx_customer_estimate_items_estimate ON customer_estimate_items(estimate_id);
      CREATE INDEX IF NOT EXISTS idx_customer_estimate_items_type ON customer_estimate_items(item_type);
      CREATE INDEX IF NOT EXISTS idx_customer_estimate_items_reference ON customer_estimate_items(reference_id);
      CREATE INDEX IF NOT EXISTS idx_customer_estimate_history_estimate ON customer_estimate_history(estimate_id);
      CREATE INDEX IF NOT EXISTS idx_customer_estimate_history_action ON customer_estimate_history(action);
      CREATE INDEX IF NOT EXISTS idx_customer_estimate_templates_user_tenant ON customer_estimate_templates(user_id, tenant_id);
      
      -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞—É–¥–∏—Ç–∞
      CREATE INDEX IF NOT EXISTS idx_audit_log_table_record ON audit_log(table_name, record_id);
      CREATE INDEX IF NOT EXISTS idx_audit_log_user_tenant ON audit_log(user_id, tenant_id);
      CREATE INDEX IF NOT EXISTS idx_audit_log_created ON audit_log(created_at);
    `);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    await initializeRolesAndPermissions();

    // –í—Å—Ç–∞–≤–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ
    const userCount = await query('SELECT COUNT(*) FROM auth_users');
    if (parseInt(userCount.rows[0].count) === 0) {
      await insertDemoAuthData();
    }

    const orderCount = await query('SELECT COUNT(*) FROM orders');
    if (parseInt(orderCount.rows[0].count) === 0) {
      await insertDemoData();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥-—Ñ–æ—Ä–º—ã
    await initializeLeadsTable();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü (–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞):', error.message);
    console.log('‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
async function initializeRolesAndPermissions() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const permissionCount = await query('SELECT COUNT(*) FROM permissions');
    if (parseInt(permissionCount.rows[0].count) > 0) {
      console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...');

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    const permissions = [
      // –ü—Ä–æ–µ–∫—Ç—ã
      { name: 'projects.create', resource: 'projects', action: 'create', description: '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤' },
      { name: 'projects.read', resource: 'projects', action: 'read', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤' },
      { name: 'projects.update', resource: 'projects', action: 'update', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤' },
      { name: 'projects.delete', resource: 'projects', action: 'delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤' },
      { name: 'projects.manage', resource: 'projects', action: 'manage', description: '–ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏' },

      // –°–º–µ—Ç—ã
      { name: 'estimates.create', resource: 'estimates', action: 'create', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—Ç' },
      { name: 'estimates.read', resource: 'estimates', action: 'read', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–º–µ—Ç' },
      { name: 'estimates.update', resource: 'estimates', action: 'update', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç' },
      { name: 'estimates.delete', resource: 'estimates', action: 'delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ—Ç' },
      { name: 'estimates.export', resource: 'estimates', action: 'export', description: '–≠–∫—Å–ø–æ—Ä—Ç —Å–º–µ—Ç' },

      // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
      { name: 'materials.create', resource: 'materials', action: 'create', description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤' },
      { name: 'materials.read', resource: 'materials', action: 'read', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤' },
      { name: 'materials.update', resource: 'materials', action: 'update', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤' },
      { name: 'materials.delete', resource: 'materials', action: 'delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤' },

      // –†–∞–±–æ—Ç—ã
      { name: 'works.create', resource: 'works', action: 'create', description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç' },
      { name: 'works.read', resource: 'works', action: 'read', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç' },
      { name: 'works.update', resource: 'works', action: 'update', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç' },
      { name: 'works.delete', resource: 'works', action: 'delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç' },

      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤
      { name: 'object_parameters.create', resource: 'object_parameters', action: 'create', description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤' },
      { name: 'object_parameters.read', resource: 'object_parameters', action: 'read', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤' },
      {
        name: 'object_parameters.update',
        resource: 'object_parameters',
        action: 'update',
        description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤'
      },
      { name: 'object_parameters.delete', resource: 'object_parameters', action: 'delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤' },

      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–æ–ª–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
      { name: 'users.create', resource: 'users', action: 'create', description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
      { name: 'users.read', resource: 'users', action: 'read', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
      { name: 'users.update', resource: 'users', action: 'update', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
      { name: 'users.delete', resource: 'users', action: 'delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
      { name: 'users.manage_roles', resource: 'users', action: 'manage_roles', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },

      // –°–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
      { name: 'system.audit', resource: 'system', action: 'audit', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∞—É–¥–∏—Ç–∞' },
      { name: 'system.backup', resource: 'system', action: 'backup', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π' },
      { name: 'system.settings', resource: 'system', action: 'settings', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏' }
    ];

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    for (const permission of permissions) {
      await query(
        `
        INSERT INTO permissions (name, resource, action, description)
        VALUES ($1, $2, $3, $4)
        ON CONFLICT (name) DO NOTHING
      `,
        [permission.name, permission.resource, permission.action, permission.description]
      );
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π
    const roles = [
      {
        name: 'super_admin',
        description: '–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã',
        permissions: permissions.map((p) => p.name) // –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      },
      {
        name: 'admin',
        description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
        permissions: [
          'projects.manage',
          'estimates.create',
          'estimates.read',
          'estimates.update',
          'estimates.export',
          'materials.create',
          'materials.read',
          'materials.update',
          'works.create',
          'works.read',
          'works.update',
          'object_parameters.create',
          'object_parameters.read',
          'object_parameters.update',
          'users.read',
          'users.update'
        ]
      },
      {
        name: 'project_manager',
        description: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ —Å–º–µ—Ç–∞–º–∏',
        permissions: [
          'projects.create',
          'projects.read',
          'projects.update',
          'estimates.create',
          'estimates.read',
          'estimates.update',
          'estimates.export',
          'materials.read',
          'works.read',
          'object_parameters.create',
          'object_parameters.read',
          'object_parameters.update'
        ]
      },
      {
        name: 'estimator',
        description: '–°–º–µ—Ç—á–∏–∫ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç',
        permissions: [
          'projects.read',
          'estimates.create',
          'estimates.read',
          'estimates.update',
          'estimates.export',
          'materials.read',
          'works.read',
          'object_parameters.read'
        ]
      },
      {
        name: 'viewer',
        description: '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö',
        permissions: ['projects.read', 'estimates.read', 'materials.read', 'works.read', 'object_parameters.read']
      }
    ];

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    for (const role of roles) {
      const roleResult = await query(
        `
        INSERT INTO user_roles (name, description)
        VALUES ($1, $2)
        ON CONFLICT (name) DO UPDATE SET description = EXCLUDED.description
        RETURNING id
      `,
        [role.name, role.description]
      );

      const roleId = roleResult.rows[0].id;

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∫ —Ä–æ–ª–∏
      for (const permissionName of role.permissions) {
        const permissionResult = await query('SELECT id FROM permissions WHERE name = $1', [permissionName]);
        if (permissionResult.rows.length > 0) {
          const permissionId = permissionResult.rows[0].id;
          await query(
            `
            INSERT INTO role_permissions (role_id, permission_id)
            VALUES ($1, $2)
            ON CONFLICT (role_id, permission_id) DO NOTHING
          `,
            [roleId, permissionId]
          );
        }
      }
    }

    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    console.log('üè∑Ô∏è –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏: super_admin, admin, project_manager, estimator, viewer');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function insertDemoAuthData() {
  try {
    const salt = await bcrypt.genSalt(config.bcryptRounds);
    const hashedPassword = await bcrypt.hash('password123', salt);

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = [
      { email: 'admin@smeta360.ru', firstname: '–°—É–ø–µ—Ä', lastname: '–ê–¥–º–∏–Ω', company: '–°–ú–ï–¢–ê 360¬∞', role: 'super_admin' },
      { email: 'manager@smeta360.ru', firstname: '–ò–≤–∞–Ω', lastname: '–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤', company: '–°–ú–ï–¢–ê 360¬∞', role: 'project_manager' },
      { email: 'estimator@smeta360.ru', firstname: '–ü–µ—Ç—Ä', lastname: '–°–º–µ—Ç—á–∏–∫–æ–≤', company: '–°–ú–ï–¢–ê 360¬∞', role: 'estimator' },
      { email: 'viewer@smeta360.ru', firstname: '–ê–Ω–Ω–∞', lastname: '–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤–∞', company: '–°–ú–ï–¢–ê 360¬∞', role: 'viewer' }
    ];

    for (const userData of users) {
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await query(
        `
        INSERT INTO auth_users (email, password_hash, firstname, lastname, company, is_active, email_verified)
        VALUES ($1, $2, $3, $4, $5, true, true)
        ON CONFLICT (email) DO NOTHING
        RETURNING id
      `,
        [userData.email, hashedPassword, userData.firstname, userData.lastname, userData.company]
      );

      if (userResult.rows.length > 0) {
        const userId = userResult.rows[0].id;

        // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const roleResult = await query('SELECT id FROM user_roles WHERE name = $1', [userData.role]);
        if (roleResult.rows.length > 0) {
          const roleId = roleResult.rows[0].id;
          await query(
            `
            INSERT INTO user_role_assignments (user_id, role_id, is_active)
            VALUES ($1, $2, true)
            ON CONFLICT (user_id, role_id, tenant_id) DO NOTHING
          `,
            [userId, roleId]
          );
        }
      }
    }

    console.log('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—è–º–∏ —Å–æ–∑–¥–∞–Ω—ã');
    console.log('üîë –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:');
    console.log('   admin@smeta360.ru / password123 (–°—É–ø–µ—Ä–∞–¥–º–∏–Ω)');
    console.log('   manager@smeta360.ru / password123 (–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤)');
    console.log('   estimator@smeta360.ru / password123 (–°–º–µ—Ç—á–∏–∫)');
    console.log('   viewer@smeta360.ru / password123 (–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å)');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function insertDemoData() {
  try {
    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await query(`
      INSERT INTO users (name, email) VALUES
      ('–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', 'ivan@example.com'),
      ('–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', 'maria@example.com'),
      ('–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤', 'alexey@example.com');
    `);

    // –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
    await query(`
      INSERT INTO orders (tracking_no, product_name, quantity, status, amount) VALUES
      (84564564, '–û–±—ä–µ–∫—Ç–∏–≤ –∫–∞–º–µ—Ä—ã', 40, 2, 40570.00),
      (98764564, '–ù–æ—É—Ç–±—É–∫', 300, 0, 180139.00),
      (98756325, '–ú–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', 355, 1, 90989.00),
      (98652366, '–¢–µ–ª–µ—Ñ–æ–Ω', 50, 1, 10239.00),
      (13286564, '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã', 100, 1, 83348.00),
      (86739658, '–¢–µ–ª–µ–≤–∏–∑–æ—Ä', 99, 0, 410780.00),
      (13256498, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞', 125, 2, 70999.00),
      (98753263, '–ú—ã—à—å', 89, 2, 10570.00);
    `);

    // –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await query(`
      INSERT INTO statistics (metric_name, metric_value, percentage, extra_value, is_loss, color) VALUES
      ('–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', 442236, 59.3, 35000, false, 'primary'),
      ('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 78250, 70.5, 8900, false, 'primary'),
      ('–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤', 18800, 27.4, 1943, true, 'warning'),
      ('–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂', 35078, 27.4, 20395, true, 'warning');
    `);

    // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª
    await query(`
      INSERT INTO work_materials (work_id, material_id, consumption_per_work_unit, waste_coeff) VALUES
      ('w.1', 'm.1', 2.5, 1.05),
      ('w.1', 'm.2', 0.8, 1.10),
      ('w.10', 'm.3', 1.2, 1.08),
      ('w.10', 'm.4', 0.5, 1.15),
      ('w.100', 'm.1', 3.0, 1.05),
      ('w.100', 'm.5', 1.5, 1.12),
      ('w.101', 'm.2', 1.8, 1.10),
      ('w.101', 'm.6', 0.9, 1.20)
      ON CONFLICT (work_id, material_id) DO NOTHING;
    `);

    console.log('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ë–î)
let localUsers = [];
let userIdCounter = 1;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Å fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
async function createUser(userData) {
  try {
    const result = await query(
      `
      INSERT INTO auth_users (email, password_hash, firstname, lastname, company, is_active, email_verified)
      VALUES ($1, $2, $3, $4, $5, true, false)
      RETURNING id, email, firstname, lastname, company, created_at
    `,
      [userData.email, userData.passwordHash, userData.firstname, userData.lastname, userData.company || null]
    );
    return result.rows[0];
  } catch {
    console.log('‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    const newUser = {
      id: userIdCounter++,
      email: userData.email,
      firstname: userData.firstname,
      lastname: userData.lastname,
      company: userData.company,
      created_at: new Date()
    };
    localUsers.push({
      ...newUser,
      password_hash: userData.passwordHash,
      is_active: true,
      email_verified: false,
      last_login: null
    });
    return newUser;
  }
}

async function findUserByEmail(email) {
  try {
    const result = await query(
      `
      SELECT id, email, password_hash, firstname, lastname, company, is_active, email_verified, created_at
      FROM auth_users 
      WHERE email = $1
    `,
      [email]
    );
    return result.rows[0] || null;
  } catch {
    console.log('‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    return localUsers.find((user) => user.email === email) || null;
  }
}

async function updateLastLogin(userId) {
  try {
    await query('UPDATE auth_users SET last_login = NOW() WHERE id = $1', [userId]);
  } catch {
    console.log('‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ last_login');
    const user = localUsers.find((u) => u.id === userId);
    if (user) user.last_login = new Date();
  }
}

// ============ API –ú–ê–†–®–†–£–¢–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ============

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/auth/register', async (req, res) => {
  console.log('üîç POST /api/auth/register - –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', req.body);
  try {
    const { firstname, lastname, email, company, password } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!firstname || !lastname || !email || !password) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return res.status(400).json({
        success: false,
        message: '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
    if (password.length < 6) {
      return res.status(400).json({
        success: false,
        message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = await findUserByEmail(email);
    if (existingUser) {
      return res.status(409).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const salt = await bcrypt.genSalt(config.bcryptRounds);
    const passwordHash = await bcrypt.hash(password, salt);

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = await createUser({
      email,
      passwordHash,
      firstname,
      lastname,
      company
    });

    // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π tenant –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    let newUserTenantId = null;

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Ä–æ–ª—å—é –∏ tenant
    const token = jwt.sign(
      {
        userId: newUser.id,
        email: newUser.email,
        firstname: newUser.firstname,
        lastname: newUser.lastname,
        role: 'estimator', // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        tenantId: newUserTenantId // null –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ tenant
      },
      config.jwtSecret,
      { expiresIn: '24h' }
    );

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (—Ö–µ—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    try {
      const tokenHash = await bcrypt.hash(token, 10);
      await query(
        `
        INSERT INTO user_sessions (user_id, token_hash, expires_at, user_agent, ip_address)
        VALUES ($1, $2, NOW() + INTERVAL '24 hours', $3, $4)
      `,
        [newUser.id, tokenHash, req.headers['user-agent'] || '', req.ip || req.connection.remoteAddress]
      );
    } catch {
      console.log('‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏');
    }

    res.status(201).json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      data: {
        token,
        user: {
          id: newUser.id,
          email: newUser.email,
          firstname: newUser.firstname,
          lastname: newUser.lastname,
          company: newUser.company,
          createdAt: newUser.created_at
        }
      }
    });

    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è:', email);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
      });
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await findUserByEmail(email);

    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    if (!user.is_active) {
      return res.status(403).json({
        success: false,
        message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const isPasswordValid = await bcrypt.compare(password, user.password_hash);
    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await updateLastLogin(user.id);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userRole = 'estimator'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try {
      const roleResult = await query(
        `
        SELECT ur.name as role_name
        FROM user_role_assignments ura
        JOIN user_roles ur ON ur.id = ura.role_id
        WHERE ura.user_id = $1 AND ura.is_active = true
        ORDER BY ura.assigned_at DESC
        LIMIT 1
      `,
        [user.id]
      );

      if (roleResult.rows.length > 0) {
        userRole = roleResult.rows[0].role_name;
      }
    } catch {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º estimator');
    }

    // –ü–æ–ª—É—á–∞–µ–º tenant_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user_tenants
    let userTenantId = null;
    try {
      const tenantResult = await query(
        `
        SELECT tenant_id FROM user_tenants 
        WHERE user_id = $1 
        ORDER BY created_at DESC 
        LIMIT 1
      `,
        [user.id]
      );

      userTenantId = tenantResult.rows.length > 0 ? tenantResult.rows[0].tenant_id : null;
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å tenant_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ —Å —Ä–æ–ª—å—é –∏ tenantId
    const token = jwt.sign(
      {
        userId: user.id,
        email: user.email,
        firstname: user.firstname,
        lastname: user.lastname,
        role: userRole, // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –≤ —Ç–æ–∫–µ–Ω
        tenantId: userTenantId // –†–µ–∞–ª—å–Ω—ã–π tenant_id –∏–∑ user_tenants
      },
      config.jwtSecret,
      { expiresIn: '24h' }
    );

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    try {
      const tokenHash = await bcrypt.hash(token, 10);
      await query(
        `
        INSERT INTO user_sessions (user_id, token_hash, expires_at, user_agent, ip_address)
        VALUES ($1, $2, NOW() + INTERVAL '24 hours', $3, $4)
      `,
        [user.id, tokenHash, req.headers['user-agent'] || '', req.ip || req.connection.remoteAddress]
      );
    } catch {
      console.log('‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏');
    }

    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      data: {
        token,
        user: {
          id: user.id,
          email: user.email,
          firstname: user.firstname,
          lastname: user.lastname,
          company: user.company,
          emailVerified: user.email_verified,
          createdAt: user.created_at
        }
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏)
app.post('/api/auth/logout', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏)
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ö†Ô∏è Logout –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö');
      return res.json({
        success: true,
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
      });
    }

    const token = authHeader.substring(7);

    try {
      const decoded = jwt.verify(token, config.jwtSecret);

      // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await query('DELETE FROM user_sessions WHERE user_id = $1', [decoded.userId]);
      console.log(`üîê Logout –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${decoded.email || decoded.userId}`);
    } catch (tokenError) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫, –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
      console.log('‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ logout, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö:', tokenError.message);
    }

    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö - –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã frontend –º–æ–≥ –≤—ã–π—Ç–∏
    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get('/api/auth/me', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const token = authHeader.substring(7);
    const decoded = jwt.verify(token, config.jwtSecret);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const result = await query(
      `
      SELECT id, email, firstname, lastname, company, phone, position, location, bio, 
             is_active, email_verified, last_login, created_at
      FROM auth_users 
      WHERE id = $1 AND is_active = true
    `,
      [decoded.userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
      });
    }

    const user = result.rows[0];

    res.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        firstname: user.firstname,
        lastname: user.lastname,
        company: user.company,
        phone: user.phone,
        position: user.position,
        location: user.location,
        bio: user.bio,
        emailVerified: user.email_verified,
        lastLogin: user.last_login,
        createdAt: user.created_at
      }
    });
  } catch (error) {
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
      });
    }
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫'
      });
    }

    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// ============ API –ú–ê–†–®–†–£–¢–´ –î–ê–ù–ù–´–• ============

// API –º–∞—Ä—à—Ä—É—Ç—ã

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è dashboard
app.get('/api/statistics', async (req, res) => {
  try {
    const result = await query('SELECT * FROM statistics ORDER BY id');
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
app.get('/api/orders', async (req, res) => {
  try {
    const result = await query(`
      SELECT * FROM orders 
      ORDER BY created_at DESC 
      LIMIT 10
    `);
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// OLD API - –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π API –Ω–∏–∂–µ
// app.get('/api/users', async (req, res) => {
//   try {
//     const result = await query('SELECT * FROM users ORDER BY created_at DESC');
//     res.json(result.rows);
//   } catch (error) {
//     console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
//     res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
//   }
// });

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/users', async (req, res) => {
  try {
    const { name, email } = req.body;
    const result = await query('INSERT INTO users (name, email) VALUES ($1, $2) RETURNING *', [name, email]);
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
app.post('/api/orders', async (req, res) => {
  try {
    const { tracking_no, product_name, quantity, status, amount } = req.body;
    const result = await query(
      'INSERT INTO orders (tracking_no, product_name, quantity, status, amount) VALUES ($1, $2, $3, $4, $5) RETURNING *',
      [tracking_no, product_name, quantity, status, amount]
    );
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ==============================|| WORKS REF API ||============================== //

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–∑
app.get('/api/phases', async (req, res) => {
  try {
    const result = await query('SELECT * FROM phases ORDER BY sort_order, id');
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∑:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∑' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç —Å –∏—Ö —Å–≤—è–∑—è–º–∏ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º Redis)
app.get(
  '/api/works',
  withCatalogCache(async (req, res) => {
    try {
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–ª—é—á–∞ –∫—ç—à–∞
      const search = req.query.search?.trim().toLowerCase() || '';
      const page = Number(req.query.page || 1);
      const limit = Math.min(Number(req.query.limit || 50), 3000); // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞
      const ttl = Number(process.env.CACHE_TTL_WORKS || 600);
      const useCache = process.env.CACHE_ENABLED === 'true' && process.env.CACHE_WORKS === 'true';

      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞
      const key = `works:q=${encodeURIComponent(search)}:p=${page}:l=${limit}`;

      const data = await cacheGetOrSet(
        key,
        ttl,
        async () => {
          console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          const lastModResult = await query(`
          SELECT COALESCE(MAX(updated_at), MAX(created_at)) as last_updated 
          FROM works_ref
        `);
          const lastUpdated = lastModResult.rows[0]?.last_updated || new Date();

          // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–∏—Å–∫–æ–º
          let whereClause = '';
          let params = [];
          let paramIndex = 1;

          if (search) {
            whereClause = `WHERE w.name ILIKE $${paramIndex}`;
            params.push(`%${search}%`);
            paramIndex++;
          }

          const offset = (page - 1) * limit;
          const result = await query(
            `
          SELECT 
            w.*,
            p.name as phase_name,
            s.name as stage_name,
            ss.name as substage_name
          FROM works_ref w
          LEFT JOIN phases p ON w.phase_id = p.id
          LEFT JOIN stages s ON w.stage_id = s.id  
          LEFT JOIN substages ss ON w.substage_id = ss.id
          ${whereClause}
          ORDER BY w.sort_order, w.id
          LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
        `,
            [...params, limit, offset]
          );

          // –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
          const countResult = await query(
            `
          SELECT COUNT(*) as total 
          FROM works_ref w ${whereClause}
        `,
            params
          );

          return {
            data: result.rows,
            pagination: {
              page,
              limit,
              total: parseInt(countResult.rows[0].total),
              totalPages: Math.ceil(parseInt(countResult.rows[0].total) / limit)
            },
            lastUpdated: lastUpdated
          };
        },
        { skip: !useCache }
      );

      setLastModified(res, data.lastUpdated);

      if (checkNotModified(req, res, data.lastUpdated)) {
        return;
      }

      res.json(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç' });
    }
  })
);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º Redis)
app.get(
  '/api/materials',
  withCatalogCache(async (req, res) => {
    try {
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–ª—é—á–∞ –∫—ç—à–∞
      const search = req.query.search?.trim().toLowerCase() || '';
      const page = Number(req.query.page || 1);
      const limit = Math.min(Number(req.query.limit || 50), 3000); // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const ttl = Number(process.env.CACHE_TTL_MATERIALS || 600);
      const useCache = process.env.CACHE_ENABLED === 'true' && process.env.CACHE_MATERIALS === 'true';

      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞ —É—á–∏—Ç—ã–≤–∞—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const key = `materials:q=${encodeURIComponent(search)}:p=${page}:l=${limit}`;

      const data = await cacheGetOrSet(
        key,
        ttl,
        async () => {
          // Producer function - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ cache miss
          console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è Last-Modified
          const lastModResult = await query(`
          SELECT COALESCE(MAX(updated_at), MAX(created_at)) as last_updated 
          FROM materials
        `);
          const lastUpdated = lastModResult.rows[0]?.last_updated || new Date();

          // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–∏—Å–∫–æ–º –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
          let whereClause = '';
          let params = [];
          let paramIndex = 1;

          if (search) {
            whereClause = `WHERE name ILIKE $${paramIndex}`;
            params.push(`%${search}%`);
            paramIndex++;
          }

          const offset = (page - 1) * limit;
          const result = await query(
            `
          SELECT * FROM materials 
          ${whereClause}
          ORDER BY name 
          LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
        `,
            [...params, limit, offset]
          );

          // –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
          const countResult = await query(
            `
          SELECT COUNT(*) as total FROM materials ${whereClause}
        `,
            params
          );

          return {
            data: result.rows,
            pagination: {
              page,
              limit,
              total: parseInt(countResult.rows[0].total),
              totalPages: Math.ceil(parseInt(countResult.rows[0].total) / limit)
            },
            lastUpdated: lastUpdated
          };
        },
        { skip: !useCache }
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ Last-Modified
      setLastModified(res, data.lastUpdated);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º If-Modified-Since –¥–ª—è 304 Not Modified
      if (checkNotModified(req, res, data.lastUpdated)) {
        return;
      }

      res.json(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤' });
    }
  })
);

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
app.post('/api/materials', async (req, res) => {
  try {
    const { id, name, image_url, item_url, unit, unit_price, expenditure, weight } = req.body;
    const result = await query(
      'INSERT INTO materials (id, name, image_url, item_url, unit, unit_price, expenditure, weight) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *',
      [id, name, image_url, item_url, unit, unit_price, expenditure, weight]
    );

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    cacheInvalidateByPrefix('materials:').catch((err) => console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', err.message));

    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
app.put('/api/materials/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { name, image_url, item_url, unit, unit_price, expenditure, weight } = req.body;
    const result = await query(
      'UPDATE materials SET name = $1, image_url = $2, item_url = $3, unit = $4, unit_price = $5, expenditure = $6, weight = $7, updated_at = now() WHERE id = $8 RETURNING *',
      [name, image_url, item_url, unit, unit_price, expenditure, weight, id]
    );
    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    cacheInvalidateByPrefix('materials:').catch((err) => console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', err.message));

    res.json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
app.delete('/api/materials/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const result = await query('DELETE FROM materials WHERE id = $1 RETURNING *', [id]);
    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json({ message: '–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã
app.post('/api/works', async (req, res) => {
  try {
    const { id, name, phase_id, stage_id, substage_id, unit, unit_price } = req.body;
    const result = await query(
      'INSERT INTO works_ref (id, name, phase_id, stage_id, substage_id, unit, unit_price) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *',
      [id, name, phase_id, stage_id, substage_id, unit, unit_price]
    );
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã' });
  }
});

// ==============================|| WORK MATERIALS API ||============================== //

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã
app.get('/api/works/:workId/materials', async (req, res) => {
  try {
    const { workId } = req.params;
    const result = await query(
      `
      SELECT
        wm.*,
        m.name as material_name,
        m.unit as material_unit,
        m.unit_price as material_unit_price,
        (wm.consumption_per_work_unit * wm.waste_coeff) as total_consumption,
        ((wm.consumption_per_work_unit * wm.waste_coeff) * m.unit_price) as material_cost_per_work_unit
      FROM work_materials wm
      JOIN materials m ON wm.material_id = m.id
      WHERE wm.work_id = $1
      ORDER BY m.name
    `,
      [workId]
    );
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã' });
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫ —Ä–∞–±–æ—Ç–µ
app.post('/api/works/:workId/materials', async (req, res) => {
  try {
    const { workId } = req.params;
    const { material_id, consumption_per_work_unit, waste_coeff = 1.0 } = req.body;
    const result = await query(
      `
      INSERT INTO work_materials (work_id, material_id, consumption_per_work_unit, waste_coeff)
      VALUES ($1, $2, $3, $4)
      ON CONFLICT (work_id, material_id)
      DO UPDATE SET
        consumption_per_work_unit = EXCLUDED.consumption_per_work_unit,
        waste_coeff = EXCLUDED.waste_coeff,
        updated_at = now()
      RETURNING *
    `,
      [workId, material_id, consumption_per_work_unit, waste_coeff]
    );
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫ —Ä–∞–±–æ—Ç–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫ —Ä–∞–±–æ—Ç–µ' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª
app.put('/api/works/:workId/materials/:materialId', async (req, res) => {
  try {
    const { workId, materialId } = req.params;
    const { consumption_per_work_unit, waste_coeff = 1.0 } = req.body;
    const result = await query(
      `
      UPDATE work_materials
      SET consumption_per_work_unit = $1, waste_coeff = $2, updated_at = now()
      WHERE work_id = $3 AND material_id = $4
      RETURNING *
    `,
      [consumption_per_work_unit, waste_coeff, workId, materialId]
    );
    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–°–≤—è–∑—å —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    res.json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª
app.delete('/api/works/:workId/materials/:materialId', async (req, res) => {
  try {
    const { workId, materialId } = req.params;
    const result = await query(
      `
      DELETE FROM work_materials
      WHERE work_id = $1 AND material_id = $2
      RETURNING *
    `,
      [workId, materialId]
    );
    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–°–≤—è–∑—å —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    res.json({ message: '–°–≤—è–∑—å —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª
app.get('/api/work-materials', async (req, res) => {
  try {
    const result = await query(`
      SELECT
        wm.*,
        w.name as work_name,
        w.unit as work_unit,
        w.unit_price as work_unit_price,
        m.name as material_name,
        m.unit as material_unit,
        m.unit_price as material_unit_price,
        m.image_url as material_image_url,
        m.item_url as material_item_url,
        (wm.consumption_per_work_unit * wm.waste_coeff) as total_consumption,
        ((wm.consumption_per_work_unit * wm.waste_coeff) * m.unit_price) as material_cost_per_work_unit
      FROM work_materials wm
      JOIN works_ref w ON wm.work_id = w.id
      JOIN materials m ON wm.material_id = m.id
      ORDER BY w.sort_order, w.id, m.id
    `);
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª' });
  }
});

// –ü—Ä–æ—Å—Ç–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è API
const cache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
app.get('/api/estimate-data', async (req, res) => {
  try {
    const cacheKey = 'estimate-data';
    const cached = cache.get(cacheKey);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      console.log('üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞');
      return res.json({
        success: true,
        data: cached.data,
        meta: {
          ...cached.meta,
          cached: true,
          cacheAge: Date.now() - cached.timestamp
        }
      });
    }

    console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã...');
    const startTime = Date.now();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const result = await query(`
      SELECT
        -- –î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç
        w.id as work_id,
        w.name as work_name,
        w.unit as work_unit,
        w.unit_price as work_unit_price,
        w.sort_order as work_sort_order,
        
        -- –î–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        m.id as material_id,
        m.name as material_name,
        m.unit as material_unit,
        m.unit_price as material_unit_price,
        m.image_url as material_image_url,
        m.item_url as material_item_url,
        
        -- –°–≤—è–∑–∏ —Ä–∞–±–æ—Ç–∞-–º–∞—Ç–µ—Ä–∏–∞–ª
        wm.consumption_per_work_unit,
        wm.waste_coeff,
        (wm.consumption_per_work_unit * wm.waste_coeff) as total_consumption,
        ((wm.consumption_per_work_unit * wm.waste_coeff) * m.unit_price) as material_cost_per_work_unit
      FROM work_materials wm
      JOIN works_ref w ON wm.work_id = w.id
      JOIN materials m ON wm.material_id = m.id
      ORDER BY w.sort_order, w.id, m.id
    `);

    const endTime = Date.now();
    const duration = endTime - startTime;

    console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${duration}ms (${result.rows.length} –∑–∞–ø–∏—Å–µ–π)`);

    const responseData = {
      success: true,
      data: result.rows,
      meta: {
        count: result.rows.length,
        duration: duration,
        timestamp: new Date().toISOString(),
        cached: false
      }
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    cache.set(cacheKey, {
      data: result.rows,
      meta: responseData.meta,
      timestamp: Date.now()
    });

    res.json(responseData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã',
      details: error.message
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/api/test', async (req, res) => {
  try {
    const result = await query('SELECT NOW() as current_time');
    res.json({
      message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      database_time: result.rows[0].current_time,
      status: 'connected'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' });
  }
});

// ==============================|| –õ–ò–î–§–û–†–ú–ê API ||============================== //

// –õ–∏–¥-—Ñ–æ—Ä–º–∞ endpoints
app.post('/api/lead', leadRateLimit, createLead);
app.get('/api/leads/stats', getLeadsStats);

// –í—Ä–µ–º–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–æ–≤
app.post('/api/init-leads', async (req, res) => {
  try {
    await initializeLeadsTable();
    res.json({ success: true, message: '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏' });
  }
});

// ==============================|| –ü–†–û–ï–ö–¢–´ API ||============================== //

// authMiddleware —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π authMiddleware

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/api/auth/profile', authMiddleware, async (req, res) => {
  try {
    const userId = req.user.userId || req.user.sub;
    const { firstname, lastname, company, phone, position, location, bio } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!firstname || !lastname) {
      return res.status(400).json({
        success: false,
        message: '–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
      });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const result = await query(
      `
      UPDATE auth_users 
      SET 
        firstname = $1,
        lastname = $2,
        company = $3,
        phone = $4,
        position = $5,
        location = $6,
        bio = $7,
        updated_at = CURRENT_TIMESTAMP
      WHERE id = $8 AND is_active = true
      RETURNING id, email, firstname, lastname, company, phone, position, location, bio, created_at, updated_at
    `,
      [firstname, lastname, company, phone, position, location, bio, userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
      });
    }

    const updatedUser = result.rows[0];

    console.log(`üìù –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω`);

    res.json({
      success: true,
      message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      data: {
        user: {
          id: updatedUser.id,
          email: updatedUser.email,
          firstname: updatedUser.firstname,
          lastname: updatedUser.lastname,
          company: updatedUser.company,
          phone: updatedUser.phone,
          position: updatedUser.position,
          location: updatedUser.location,
          bio: updatedUser.bio,
          createdAt: updatedUser.created_at,
          updatedAt: updatedUser.updated_at
        }
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// ==============================|| OBJECT PARAMETERS API ||============================== //

// üîπ –®–ê–ì 4 - Object Parameters API
// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞ –ø–æ ID –ø—Ä–æ–µ–∫—Ç–∞ (1:1 —Å–≤—è–∑—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º)
app.get('/api/projects/:id/object-parameters', authMiddleware, async (req, res) => {
  try {
    const { id: projectId } = req.params;
    const userId = req.user.userId || req.user.id || req.user.sub;

    console.log(`üìã GET /api/projects/${projectId}/object-parameters [user=${userId}]`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–∞—Å–ª–µ–¥—É–µ–º tenant_id
    const projectCheck = await query(
      `
      SELECT id, tenant_id FROM construction_projects 
      WHERE id = $1 AND tenant_id = $2
    `,
      [projectId, req.user.tenantId]
    );

    if (projectCheck.rows.length === 0) {
      console.log(`‚ùå –ü—Ä–æ–µ–∫—Ç ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–Ω–∞–Ω—Ç—É ${req.user.tenantId}`);
      return res.status(403).json({
        error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø',
        code: 'PROJECT_NOT_ACCESSIBLE'
      });
    }

    const projectTenantId = projectCheck.rows[0].tenant_id;

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ (1:1 —Å–≤—è–∑—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º)
    const result = await query(
      `
      SELECT 
        op.*,
        cp.customer_name as project_name,
        au.firstname || ' ' || au.lastname as created_by_name
      FROM object_parameters op
      LEFT JOIN construction_projects cp ON op.project_id = cp.id
      LEFT JOIN auth_users au ON op.user_id = au.id
      WHERE op.project_id = $1 AND op.tenant_id = $2
    `,
      [projectId, projectTenantId]
    );

    if (result.rows.length === 0) {
      console.log(`‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      return res.status(404).json({
        error: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        code: 'OBJECT_PARAMETERS_NOT_FOUND'
      });
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`);
    res.json(result.rows[0]);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_SERVER_ERROR'
    });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞ (Idempotent Upsert)
app.put('/api/projects/:id/object-parameters', authMiddleware, async (req, res) => {
  try {
    const { id: projectId } = req.params;
    const userId = req.user.userId || req.user.id || req.user.sub;

    console.log(`üìù PUT /api/projects/${projectId}/object-parameters [user=${userId}]`);
    console.log(`üì¶ Request body:`, req.body);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const {
      building_type,
      construction_category,
      floors_above_ground,
      floors_below_ground,
      height_above_ground,
      height_below_ground,
      total_area,
      building_area,
      estimated_cost,
      construction_complexity,
      seismic_zone,
      wind_load,
      snow_load,
      soil_conditions,
      groundwater_level,
      climate_zone
    } = req.body;

    // –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!building_type || typeof building_type !== 'string') {
      return res.status(400).json({
        error: '–ü–æ–ª–µ building_type –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π',
        code: 'VALIDATION_ERROR',
        field: 'building_type'
      });
    }

    if (
      construction_category !== undefined &&
      (!Number.isInteger(construction_category) || construction_category < 1 || construction_category > 5)
    ) {
      return res.status(400).json({
        error: '–ü–æ–ª–µ construction_category –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5',
        code: 'VALIDATION_ERROR',
        field: 'construction_category'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º tenant_id (tenant inheritance)
    const projectCheck = await query(
      `
      SELECT id, tenant_id FROM construction_projects 
      WHERE id = $1 AND tenant_id = $2
    `,
      [projectId, req.user.tenantId]
    );

    if (projectCheck.rows.length === 0) {
      console.log(`‚ùå –ü—Ä–æ–µ–∫—Ç ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–Ω–∞–Ω—Ç—É ${req.user.tenantId}`);
      return res.status(403).json({
        error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø',
        code: 'PROJECT_NOT_ACCESSIBLE'
      });
    }

    const projectTenantId = projectCheck.rows[0].tenant_id;
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç ${projectId} –Ω–∞–π–¥–µ–Ω, tenant: ${projectTenantId}`);

    // Idempotent Upsert: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const existingParams = await query(
      `
      SELECT id FROM object_parameters 
      WHERE project_id = $1 AND tenant_id = $2
    `,
      [projectId, projectTenantId]
    );

    let result;

    if (existingParams.rows.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (UPDATE —á–∞—Å—Ç—å upsert)
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`);

      result = await query(
        `
        UPDATE object_parameters SET
          building_type = $3,
          construction_category = $4,
          floors_above_ground = $5,
          floors_below_ground = $6,
          height_above_ground = $7,
          height_below_ground = $8,
          total_area = $9,
          building_area = $10,
          estimated_cost = $11,
          construction_complexity = $12,
          seismic_zone = $13,
          wind_load = $14,
          snow_load = $15,
          soil_conditions = $16,
          groundwater_level = $17,
          climate_zone = $18,
          updated_at = CURRENT_TIMESTAMP
        WHERE project_id = $1 AND tenant_id = $2
        RETURNING *, 'updated' as operation
      `,
        [
          projectId,
          projectTenantId,
          building_type,
          construction_category || null,
          floors_above_ground || null,
          floors_below_ground || null,
          height_above_ground || null,
          height_below_ground || null,
          total_area || null,
          building_area || null,
          estimated_cost || null,
          construction_complexity || null,
          seismic_zone || null,
          wind_load || null,
          snow_load || null,
          soil_conditions || null,
          groundwater_level || null,
          climate_zone || null
        ]
      );
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (INSERT —á–∞—Å—Ç—å upsert)
      console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`);

      result = await query(
        `
        INSERT INTO object_parameters (
          project_id, building_type, construction_category, floors_above_ground, 
          floors_below_ground, height_above_ground, height_below_ground, total_area, 
          building_area, estimated_cost, construction_complexity, seismic_zone, 
          wind_load, snow_load, soil_conditions, groundwater_level, climate_zone,
          user_id, tenant_id
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19)
        RETURNING *, 'created' as operation
      `,
        [
          projectId,
          building_type,
          construction_category || null,
          floors_above_ground || null,
          floors_below_ground || null,
          height_above_ground || null,
          height_below_ground || null,
          total_area || null,
          building_area || null,
          estimated_cost || null,
          construction_complexity || null,
          seismic_zone || null,
          wind_load || null,
          snow_load || null,
          soil_conditions || null,
          groundwater_level || null,
          climate_zone || null,
          userId,
          projectTenantId
        ]
      );
    }

    const objectParams = result.rows[0];
    const operation = objectParams.operation;
    delete objectParams.operation;

    console.log(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ ${operation === 'created' ? '—Å–æ–∑–¥–∞–Ω—ã' : '–æ–±–Ω–æ–≤–ª–µ–Ω—ã'} –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`);

    res.status(operation === 'created' ? 201 : 200).json({
      success: true,
      message: `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ ${operation === 'created' ? '—Å–æ–∑–¥–∞–Ω—ã' : '–æ–±–Ω–æ–≤–ª–µ–Ω—ã'}`,
      operation: operation,
      data: objectParams
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_SERVER_ERROR',
      message: error.message
    });
  }
});

// ==============================|| PROJECT ROOMS API ||============================== //

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
app.post('/api/object-parameters/:objectParamsId/rooms', authMiddleware, async (req, res) => {
  try {
    const { objectParamsId } = req.params;
    const userId = req.user.userId || req.user.id || req.user.sub;
    const tenantId = req.user.tenantId || 'default-tenant';

    const {
      roomName,
      area,
      height,
      volume,
      finishClass,
      purpose,
      sortOrder,
      perimeter,
      prostenki,
      doorsCount,
      window1Width,
      window1Height,
      window2Width,
      window2Height,
      window3Width,
      window3Height,
      portal1Width,
      portal1Height,
      portal2Width,
      portal2Height
    } = req.body;

    if (!roomName) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    console.log('üè† POST /api/object-parameters/:objectParamsId/rooms');
    console.log(`   üìã –î–∞–Ω–Ω—ã–µ:`, {
      objectParamsId,
      tenantId: `${tenantId?.substring(0, 8)}...`,
      body: req.body
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ object_parameters
    const objectParamsCheck = await query(
      `
      SELECT id FROM object_parameters 
      WHERE id = $1 AND tenant_id = $2
    `,
      [objectParamsId, tenantId]
    );

    console.log(`   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ object_parameters: –Ω–∞–π–¥–µ–Ω–æ ${objectParamsCheck.rows.length} –∑–∞–ø–∏—Å–µ–π`);

    if (objectParamsCheck.rows.length === 0) {
      return res.status(404).json({
        error: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        code: 'OBJECT_PARAMETERS_NOT_FOUND'
      });
    }

    const result = await query(
      `
      INSERT INTO project_rooms (
        object_parameters_id, room_name, area, height, volume, finish_class, purpose, sort_order,
        perimeter, prostenki, doors_count,
        window1_width, window1_height, window2_width, window2_height, window3_width, window3_height,
        portal1_width, portal1_height, portal2_width, portal2_height,
        user_id, tenant_id
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23)
      RETURNING *
    `,
      [
        objectParamsId,
        roomName,
        area,
        height,
        volume,
        finishClass,
        purpose,
        sortOrder,
        perimeter,
        prostenki,
        doorsCount,
        window1Width,
        window1Height,
        window2Width,
        window2Height,
        window3Width,
        window3Height,
        portal1Width,
        portal1Height,
        portal2Width,
        portal2Height,
        userId,
        tenantId
      ]
    );

    res.status(201).json({
      success: true,
      message: '–ü–æ–º–µ—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞
app.get('/api/object-parameters/:objectParamsId/rooms', authMiddleware, async (req, res) => {
  try {
    const { objectParamsId } = req.params;
    const tenantId = req.user.tenantId || 'default-tenant';

    const result = await query(
      `
      SELECT * FROM project_rooms 
      WHERE object_parameters_id = $1 AND tenant_id = $2
      ORDER BY sort_order, room_name
    `,
      [objectParamsId, tenantId]
    );

    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
app.put('/api/rooms/:roomId', authMiddleware, async (req, res) => {
  try {
    const { roomId } = req.params;
    const userId = req.user.userId || req.user.id || req.user.sub;
    const tenantId = req.user.tenantId || 'default-tenant';

    console.log(`üìù PUT /api/rooms/${roomId} [user=${userId}]`);
    console.log(`üì¶ Request body:`, req.body);

    const {
      roomName,
      area,
      height,
      volume,
      finishClass,
      purpose,
      sortOrder,
      perimeter,
      prostenki,
      doorsCount,
      window1Width,
      window1Height,
      window2Width,
      window2Height,
      window3Width,
      window3Height,
      portal1Width,
      portal1Height,
      portal2Width,
      portal2Height
    } = req.body;

    const result = await query(
      `
      UPDATE project_rooms SET
        room_name = $2,
        area = $3,
        height = $4,
        volume = $5,
        finish_class = $6,
        purpose = $7,
        sort_order = $8,
        perimeter = $9,
        prostenki = $10,
        doors_count = $11,
        window1_width = $12,
        window1_height = $13,
        window2_width = $14,
        window2_height = $15,
        window3_width = $16,
        window3_height = $17,
        portal1_width = $18,
        portal1_height = $19,
        portal2_width = $20,
        portal2_height = $21,
        updated_at = CURRENT_TIMESTAMP
      WHERE id = $1 AND tenant_id = $22
      RETURNING *
      `,
      [
        roomId,
        roomName,
        area,
        height,
        volume,
        finishClass,
        purpose,
        sortOrder,
        perimeter,
        prostenki,
        doorsCount,
        window1Width,
        window1Height,
        window2Width,
        window2Height,
        window3Width,
        window3Height,
        portal1Width,
        portal1Height,
        portal2Width,
        portal2Height,
        tenantId
      ]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        error: '–ü–æ–º–µ—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        code: 'ROOM_NOT_FOUND'
      });
    }

    res.json({
      success: true,
      message: '–ü–æ–º–µ—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_SERVER_ERROR',
      message: error.message
    });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
app.delete('/api/rooms/:roomId', authMiddleware, async (req, res) => {
  try {
    const { roomId } = req.params;
    const userId = req.user.userId || req.user.id || req.user.sub;
    const tenantId = req.user.tenantId || 'default-tenant';

    console.log(`üóëÔ∏è DELETE /api/rooms/${roomId} [user=${userId}]`);

    const result = await query(
      `
      DELETE FROM project_rooms 
      WHERE id = $1 AND tenant_id = $2
      RETURNING *
      `,
      [roomId, tenantId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        error: '–ü–æ–º–µ—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        code: 'ROOM_NOT_FOUND'
      });
    }

    res.json({
      success: true,
      message: '–ü–æ–º–µ—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_SERVER_ERROR',
      message: error.message
    });
  }
});

// ==============================|| STEP 5: MATERIALS / WORKS / WORK-MATERIALS API ||============================== //

// üîπ –®–ê–ì 5.1 ‚Äî Works API (–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç)
// GET /api/works - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
app.get('/api/works', authMiddleware, async (req, res) => {
  try {
    const { limit = 50, offset = 0, search = '', phase_id = '', stage_id = '', substage_id = '' } = req.query;

    console.log(`üìã GET /api/works - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç`);

    let whereConditions = [];
    let params = [];
    let paramIndex = 1;

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (search) {
      whereConditions.push(`w.name ILIKE $${paramIndex}`);
      params.push(`%${search}%`);
      paramIndex++;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–∞–∑–µ
    if (phase_id) {
      whereConditions.push(`w.phase_id = $${paramIndex}`);
      params.push(phase_id);
      paramIndex++;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞–¥–∏–∏
    if (stage_id) {
      whereConditions.push(`w.stage_id = $${paramIndex}`);
      params.push(stage_id);
      paramIndex++;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥—Å—Ç–∞–¥–∏–∏
    if (substage_id) {
      whereConditions.push(`w.substage_id = $${paramIndex}`);
      params.push(substage_id);
      paramIndex++;
    }

    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const countResult = await query(
      `
      SELECT COUNT(*) as total
      FROM works_ref w
      ${whereClause}
    `,
      params
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç –∏ –æ—Ñ—Ñ—Å–µ—Ç
    params.push(parseInt(limit));
    params.push(parseInt(offset));

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const result = await query(
      `
      SELECT 
        w.*,
        COALESCE(w.phase_name, w.phase_id::text) as phase_name,
        COALESCE(w.stage_name, w.stage_id) as stage_name,
        COALESCE(w.substage_name, w.substage_id) as substage_name
      FROM works_ref w
      ${whereClause}
      ORDER BY w.sort_order, w.id
      LIMIT $${paramIndex - 1} OFFSET $${paramIndex}
    `,
      params
    );

    const total = parseInt(countResult.rows[0].total);
    const totalPages = Math.ceil(total / limit);

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—Ç: ${result.rows.length}/${total} (page ${Math.floor(offset / limit) + 1}/${totalPages})`);

    res.json({
      data: result.rows,
      pagination: {
        page: Math.floor(offset / limit) + 1,
        limit: parseInt(limit),
        total: total,
        totalPages: totalPages
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/works/:id - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ ID
app.get('/api/works/:id', authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;

    console.log(`üìã GET /api/works/${id} - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã`);

    const result = await query(
      `
      SELECT 
        w.*,
        COALESCE(p.name, w.phase_id::text) as phase_name,
        COALESCE(s.name, w.stage_id) as stage_name,
        COALESCE(ss.name, w.substage_id) as substage_name
      FROM works_ref w
      LEFT JOIN phases p ON w.phase_id = p.id::text
      LEFT JOIN stages s ON w.stage_id = s.id
      LEFT JOIN substages ss ON w.substage_id = ss.id
      WHERE w.id = $1
    `,
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    console.log(`‚úÖ –†–∞–±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: ${result.rows[0].name}`);

    res.json({
      success: true,
      data: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/works/:id/materials - –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã
app.get('/api/works/:id/materials', authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const tenantId = req.user.tenantId;

    console.log(`üìã GET /api/works/${id}/materials - –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã`);

    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    const workCheck = await query('SELECT id, name FROM works_ref WHERE id = $1', [id]);
    if (workCheck.rows.length === 0) {
      return res.status(404).json({ error: '–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–µ—Ç–æ–º tenant overrides
    const result = await query(
      `
      SELECT 
        wm.work_id,
        wm.material_id,
        wm.consumption_per_work_unit,
        wm.waste_coeff,
        wm.created_at as link_created_at,
        wm.updated_at as link_updated_at,
        
        -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ
        w.name as work_name,
        w.unit as work_unit,
        w.unit_price as work_unit_price,
        
        -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: tenant > global)
        COALESCE(mt.name, mg.name) as material_name,
        COALESCE(mt.unit, mg.unit) as material_unit,
        COALESCE(mt.unit_price, mg.unit_price) as material_unit_price,
        COALESCE(mt.image_url, mg.image_url) as material_image_url,
        COALESCE(mt.item_url, mg.item_url) as material_item_url,
        CASE 
          WHEN mt.id IS NOT NULL THEN 'tenant'
          ELSE 'global'
        END as material_source,
        
        -- –†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–ª—è
        (wm.consumption_per_work_unit * wm.waste_coeff) as total_consumption,
        (COALESCE(mt.unit_price, mg.unit_price)::decimal * wm.consumption_per_work_unit * wm.waste_coeff) as material_cost_per_work_unit
        
      FROM work_materials wm
      LEFT JOIN works_ref w ON wm.work_id = w.id
      LEFT JOIN materials mg ON wm.material_id = mg.id AND mg.tenant_id IS NULL  -- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
      LEFT JOIN materials mt ON wm.material_id = mt.id AND mt.tenant_id = $2     -- Tenant override
      WHERE wm.work_id = $1
      ORDER BY mg.name, mt.name
    `,
      [id, tenantId]
    );

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã ${workCheck.rows[0].name}: ${result.rows.length}`);

    res.json({
      success: true,
      work: workCheck.rows[0],
      materials_count: result.rows.length,
      data: result.rows
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üîπ –®–ê–ì 5.2 ‚Äî Materials API (–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å tenant overrides)
// GET /api/materials - –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã (global + tenant)
app.get('/api/materials', authMiddleware, async (req, res) => {
  try {
    const {
      limit = 50,
      offset = 0,
      search = '',
      source = 'all' // 'global', 'tenant', 'all'
    } = req.query;

    const tenantId = req.user.tenantId;

    console.log(`üìã GET /api/materials - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (source: ${source})`);

    let whereConditions = [];
    let params = [];
    let paramIndex = 1;

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (search) {
      whereConditions.push(`m.name ILIKE $${paramIndex}`);
      params.push(`%${search}%`);
      paramIndex++;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
    if (source === 'global') {
      whereConditions.push('m.tenant_id IS NULL');
    } else if (source === 'tenant') {
      whereConditions.push(`m.tenant_id = $${paramIndex}`);
      params.push(tenantId);
      paramIndex++;
    } else {
      // source = 'all' - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º global + tenant
      whereConditions.push(`(m.tenant_id IS NULL OR m.tenant_id = $${paramIndex})`);
      params.push(tenantId);
      paramIndex++;
    }

    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const countResult = await query(
      `
      SELECT COUNT(*) as total
      FROM materials m
      ${whereClause}
    `,
      params
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç –∏ –æ—Ñ—Ñ—Å–µ—Ç
    params.push(parseInt(limit));
    params.push(parseInt(offset));

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const result = await query(
      `
      SELECT 
        m.*,
        CASE 
          WHEN m.tenant_id IS NULL THEN 'global'
          ELSE 'tenant'
        END as source
      FROM materials m
      ${whereClause}
      ORDER BY m.name, m.id
      LIMIT $${paramIndex - 1} OFFSET $${paramIndex}
    `,
      params
    );

    const total = parseInt(countResult.rows[0].total);
    const totalPages = Math.ceil(total / limit);

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${result.rows.length}/${total} (page ${Math.floor(offset / limit) + 1}/${totalPages})`);

    res.json({
      data: result.rows,
      pagination: {
        page: Math.floor(offset / limit) + 1,
        limit: parseInt(limit),
        total: total,
        totalPages: totalPages
      },
      lastUpdated: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/materials/:id - –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ ID
app.get('/api/materials/:id', authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const tenantId = req.user.tenantId;

    console.log(`üìã GET /api/materials/${id} - –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞`);

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: tenant override > global
    const result = await query(
      `
      SELECT 
        m.*,
        CASE 
          WHEN m.tenant_id IS NULL THEN 'global'
          ELSE 'tenant'
        END as source
      FROM materials m
      WHERE m.id = $1 
        AND (m.tenant_id IS NULL OR m.tenant_id = $2)
      ORDER BY m.tenant_id NULLS LAST
      LIMIT 1
    `,
      [id, tenantId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log(`‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞–π–¥–µ–Ω: ${result.rows[0].name} (${result.rows[0].source})`);

    res.json({
      success: true,
      data: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// POST /api/materials - —Å–æ–∑–¥–∞—Ç—å tenant override –º–∞—Ç–µ—Ä–∏–∞–ª–∞
app.post('/api/materials', authMiddleware, async (req, res) => {
  try {
    const tenantId = req.user.tenantId;
    // eslint-disable-next-line no-unused-vars
    const userId = req.user.userId || req.user.id;

    const {
      base_material_id, // ID –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è override
      name,
      unit,
      unit_price,
      image_url,
      item_url,
      expenditure,
      weight
    } = req.body;

    console.log(`üìù POST /api/materials - —Å–æ–∑–¥–∞–Ω–∏–µ tenant override –º–∞—Ç–µ—Ä–∏–∞–ª–∞`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!base_material_id) {
      return res.status(400).json({ error: 'base_material_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è tenant override' });
    }

    if (!name || !unit || !unit_price) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ, –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const baseCheck = await query(
      `
      SELECT id, name FROM materials 
      WHERE id = $1 AND tenant_id IS NULL
    `,
      [base_material_id]
    );

    if (baseCheck.rows.length === 0) {
      return res.status(400).json({ error: '–ë–∞–∑–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ override –¥–ª—è —ç—Ç–æ–≥–æ tenant
    const existingOverride = await query(
      `
      SELECT id FROM materials 
      WHERE id = $1 AND tenant_id = $2
    `,
      [base_material_id, tenantId]
    );

    if (existingOverride.rows.length > 0) {
      return res.status(409).json({
        error: 'Tenant override –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        existing_id: existingOverride.rows[0].id
      });
    }

    // –°–æ–∑–¥–∞–µ–º tenant override (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID)
    const result = await query(
      `
      INSERT INTO materials (
        id, name, unit, unit_price, image_url, item_url, 
        expenditure, weight, tenant_id, created_at, updated_at
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
      RETURNING *
    `,
      [
        base_material_id, // –¢–æ—Ç –∂–µ ID —á—Ç–æ –∏ —É –±–∞–∑–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        name,
        unit,
        parseFloat(unit_price),
        image_url || null,
        item_url || null,
        expenditure ? parseFloat(expenditure) : null,
        weight ? parseFloat(weight) : null,
        tenantId
      ]
    );

    console.log(`‚úÖ Tenant override —Å–æ–∑–¥–∞–Ω: ${result.rows[0].name} (tenant: ${tenantId})`);

    res.status(201).json({
      success: true,
      message: 'Tenant override –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å–æ–∑–¥–∞–Ω',
      base_material: baseCheck.rows[0],
      data: {
        ...result.rows[0],
        source: 'tenant'
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è tenant override –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üîπ –®–ê–ì 5.3 ‚Äî Work-Materials API (–°–≤—è–∑–∏ —Ä–∞–±–æ—Ç-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)
// GET /api/work-materials - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∏ —Ä–∞–±–æ—Ç-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
app.get('/api/work-materials', authMiddleware, async (req, res) => {
  try {
    const { limit = 50, offset = 0, work_id = '', material_id = '' } = req.query;

    const tenantId = req.user.tenantId;

    console.log(`üìã GET /api/work-materials - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`);

    let whereConditions = [];
    let params = [];
    let paramIndex = 1;

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–±–æ—Ç–µ
    if (work_id) {
      whereConditions.push(`wm.work_id = $${paramIndex}`);
      params.push(work_id);
      paramIndex++;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É
    if (material_id) {
      whereConditions.push(`wm.material_id = $${paramIndex}`);
      params.push(material_id);
      paramIndex++;
    }

    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const countResult = await query(
      `
      SELECT COUNT(*) as total
      FROM work_materials wm
      ${whereClause}
    `,
      params
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç –∏ –æ—Ñ—Ñ—Å–µ—Ç
    params.push(parseInt(limit));
    params.push(parseInt(offset));
    params.push(tenantId); // –î–ª—è tenant override –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å JOIN
    const result = await query(
      `
      SELECT 
        wm.*,
        
        -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ
        w.name as work_name,
        w.unit as work_unit,
        w.unit_price as work_unit_price,
        
        -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: tenant > global)  
        COALESCE(mt.name, mg.name) as material_name,
        COALESCE(mt.unit, mg.unit) as material_unit,
        COALESCE(mt.unit_price, mg.unit_price) as material_unit_price,
        COALESCE(mt.image_url, mg.image_url) as material_image_url,
        COALESCE(mt.item_url, mg.item_url) as material_item_url,
        CASE 
          WHEN mt.id IS NOT NULL THEN 'tenant'
          ELSE 'global'
        END as material_source,
        
        -- –†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–ª—è
        (wm.consumption_per_work_unit * wm.waste_coeff) as total_consumption,
        (COALESCE(mt.unit_price, mg.unit_price)::decimal * wm.consumption_per_work_unit * wm.waste_coeff) as material_cost_per_work_unit
        
      FROM work_materials wm
      LEFT JOIN works_ref w ON wm.work_id = w.id
      LEFT JOIN materials mg ON wm.material_id = mg.id AND mg.tenant_id IS NULL  -- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
      LEFT JOIN materials mt ON wm.material_id = mt.id AND mt.tenant_id = $${paramIndex}     -- Tenant override
      ${whereClause}
      ORDER BY w.name, mg.name, mt.name
      LIMIT $${paramIndex - 2} OFFSET $${paramIndex - 1}
    `,
      params
    );

    const total = parseInt(countResult.rows[0].total);
    const totalPages = Math.ceil(total / limit);

    console.log(
      `üìä –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${result.rows.length}/${total} (page ${Math.floor(offset / limit) + 1}/${totalPages})`
    );

    res.json({
      data: result.rows,
      pagination: {
        page: Math.floor(offset / limit) + 1,
        limit: parseInt(limit),
        total: total,
        totalPages: totalPages
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// POST /api/work-materials/bulk - –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
app.post('/api/work-materials/bulk', authMiddleware, async (req, res) => {
  try {
    const { relations } = req.body;

    console.log(`üìù POST /api/work-materials/bulk - –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π`);

    if (!Array.isArray(relations) || relations.length === 0) {
      return res.status(400).json({ error: '–ú–∞—Å—Å–∏–≤ relations –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∏
    for (let i = 0; i < relations.length; i++) {
      const rel = relations[i];
      if (!rel.work_id || !rel.material_id || !rel.consumption_per_work_unit) {
        return res.status(400).json({
          error: `–°–≤—è–∑—å ${i}: work_id, material_id –∏ consumption_per_work_unit –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã`
        });
      }
    }

    const results = [];
    const errors = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–≤—è–∑—å
    for (let i = 0; i < relations.length; i++) {
      try {
        const { work_id, material_id, consumption_per_work_unit, waste_coeff = 1.0 } = relations[i];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        const workCheck = await query('SELECT id FROM works_ref WHERE id = $1', [work_id]);
        if (workCheck.rows.length === 0) {
          errors.push({ index: i, error: `–†–∞–±–æ—Ç–∞ ${work_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞` });
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ)
        const materialCheck = await query('SELECT id FROM materials WHERE id = $1 AND tenant_id IS NULL', [material_id]);
        if (materialCheck.rows.length === 0) {
          errors.push({ index: i, error: `–ú–∞—Ç–µ—Ä–∏–∞–ª ${material_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ` });
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å (UPSERT)
        const result = await query(
          `
          INSERT INTO work_materials (work_id, material_id, consumption_per_work_unit, waste_coeff, created_at, updated_at)
          VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
          ON CONFLICT (work_id, material_id) 
          DO UPDATE SET
            consumption_per_work_unit = EXCLUDED.consumption_per_work_unit,
            waste_coeff = EXCLUDED.waste_coeff,
            updated_at = CURRENT_TIMESTAMP
          RETURNING *, 
            CASE WHEN xmax = 0 THEN 'created' ELSE 'updated' END as operation
        `,
          [work_id, material_id, parseFloat(consumption_per_work_unit), parseFloat(waste_coeff)]
        );

        results.push({
          index: i,
          operation: result.rows[0].operation,
          data: result.rows[0]
        });
      } catch (error) {
        errors.push({
          index: i,
          error: error.message
        });
      }
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–≤—è–∑–µ–π: ${results.length} —É—Å–ø–µ—à–Ω–æ, ${errors.length} –æ—à–∏–±–æ–∫`);

    res.status(errors.length > 0 ? 207 : 201).json({
      // 207 Multi-Status
      success: errors.length === 0,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length} —É—Å–ø–µ—à–Ω–æ, ${errors.length} –æ—à–∏–±–æ–∫`,
      results: results,
      errors: errors,
      summary: {
        total: relations.length,
        created: results.filter((r) => r.operation === 'created').length,
        updated: results.filter((r) => r.operation === 'updated').length,
        failed: errors.length
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ==============================|| CONSTRUCTIVE ELEMENTS API ||============================== //

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞
app.get('/api/object-parameters/:objectParamsId/constructive-elements', authMiddleware, async (req, res) => {
  try {
    const { objectParamsId } = req.params;

    const result = await query(
      `
      SELECT ce.*, 
             au.firstname || ' ' || au.lastname as created_by_name
      FROM constructive_elements ce
      LEFT JOIN auth_users au ON ce.user_id = au.id
      WHERE ce.object_parameters_id = $1
      ORDER BY ce.element_type, ce.id
    `,
      [objectParamsId]
    );

    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
app.post('/api/object-parameters/:objectParamsId/constructive-elements', authMiddleware, async (req, res) => {
  try {
    const { objectParamsId } = req.params;
    const userId = req.user.userId || req.user.id || req.user.sub;
    const { elementType, material, characteristics, quantity, unit, notes } = req.body;

    if (!elementType) {
      return res.status(400).json({ error: '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –£–±–∏—Ä–∞–µ–º tenant_id - –ø–æ–ª–µ nullable
    const result = await query(
      `
      INSERT INTO constructive_elements (
        object_parameters_id, element_type, material, characteristics, 
        quantity, unit, notes, user_id
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      RETURNING *
    `,
      [objectParamsId, elementType, material, characteristics, quantity, unit, notes, userId]
    );

    res.status(201).json({
      success: true,
      message: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
app.put('/api/constructive-elements/:elementId', authMiddleware, async (req, res) => {
  try {
    const { elementId } = req.params;
    const { elementType, material, characteristics, quantity, unit, notes } = req.body;

    const result = await query(
      `
      UPDATE constructive_elements SET
        element_type = $1, material = $2, characteristics = $3, 
        quantity = $4, unit = $5, notes = $6, updated_at = CURRENT_TIMESTAMP
      WHERE id = $7
      RETURNING *
    `,
      [elementType, material, characteristics, quantity, unit, notes, elementId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      success: true,
      message: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
app.delete('/api/constructive-elements/:elementId', authMiddleware, async (req, res) => {
  try {
    const { elementId } = req.params;

    const result = await query('DELETE FROM constructive_elements WHERE id = $1 RETURNING *', [elementId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      success: true,
      message: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ==============================|| ENGINEERING SYSTEMS API ||============================== //

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –æ–±—ä–µ–∫—Ç–∞
app.get('/api/object-parameters/:objectParamsId/engineering-systems', authMiddleware, async (req, res) => {
  try {
    const { objectParamsId } = req.params;

    const result = await query(
      `
      SELECT es.*, 
             au.firstname || ' ' || au.lastname as created_by_name
      FROM engineering_systems es
      LEFT JOIN auth_users au ON es.user_id = au.id
      WHERE es.object_parameters_id = $1
      ORDER BY es.system_type, es.id
    `,
      [objectParamsId]
    );

    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
app.post('/api/object-parameters/:objectParamsId/engineering-systems', authMiddleware, async (req, res) => {
  try {
    const { objectParamsId } = req.params;
    const userId = req.user.userId || req.user.id || req.user.sub;
    const { systemType, characteristics, capacity, efficiency, notes } = req.body;

    if (!systemType) {
      return res.status(400).json({ error: '–¢–∏–ø –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –£–±–∏—Ä–∞–µ–º tenant_id - –ø–æ–ª–µ nullable
    const result = await query(
      `
      INSERT INTO engineering_systems (
        object_parameters_id, system_type, characteristics, 
        capacity, efficiency, notes, user_id
      ) VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING *
    `,
      [objectParamsId, systemType, characteristics, capacity, efficiency, notes, userId]
    );

    res.status(201).json({
      success: true,
      message: '–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
app.put('/api/engineering-systems/:systemId', authMiddleware, async (req, res) => {
  try {
    const { systemId } = req.params;
    const { systemType, characteristics, capacity, efficiency, notes } = req.body;

    const result = await query(
      `
      UPDATE engineering_systems SET
        system_type = $1, characteristics = $2, capacity = $3, 
        efficiency = $4, notes = $5, updated_at = CURRENT_TIMESTAMP
      WHERE id = $6
      RETURNING *
    `,
      [systemType, characteristics, capacity, efficiency, notes, systemId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json({
      success: true,
      message: '–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
app.delete('/api/engineering-systems/:systemId', authMiddleware, async (req, res) => {
  try {
    const { systemId } = req.params;

    const result = await query('DELETE FROM engineering_systems WHERE id = $1 RETURNING *', [systemId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json({
      success: true,
      message: '–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ==============================|| ROLES API ||============================== //

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
app.get('/api/roles', authMiddleware, async (req, res) => {
  try {
    const result = await query(`
      SELECT ur.*, 
             COUNT(ura.user_id) as users_count
      FROM user_roles ur
      LEFT JOIN user_role_assignments ura ON ur.id = ura.role_id AND ura.is_active = true
      WHERE ur.is_active = true
      GROUP BY ur.id
      ORDER BY ur.name
    `);

    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/users/:userId/roles', authMiddleware, async (req, res) => {
  try {
    const { userId } = req.params;

    const result = await query(
      `
      SELECT ur.*, ura.assigned_at, ura.expires_at,
             assigner.firstname || ' ' || assigner.lastname as assigned_by_name
      FROM user_roles ur
      JOIN user_role_assignments ura ON ur.id = ura.role_id
      LEFT JOIN auth_users assigner ON ura.assigned_by = assigner.id
      WHERE ura.user_id = $1 AND ura.is_active = true
      ORDER BY ura.assigned_at DESC
    `,
      [userId]
    );

    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
app.post('/api/users/:userId/roles', authMiddleware, async (req, res) => {
  try {
    const { userId } = req.params;
    const { roleId } = req.body;
    const assignerId = req.user?.id; // ID —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Ä–æ–ª—å

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const userResult = await query('SELECT id FROM auth_users WHERE id = $1', [userId]);
    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–æ–ª—å
    const roleResult = await query('SELECT id, name FROM user_roles WHERE id = $1 AND is_active = true', [roleId]);
    if (roleResult.rows.length === 0) {
      return res.status(404).json({ error: '–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
    const assignmentResult = await query(
      `
      INSERT INTO user_role_assignments (user_id, role_id, assigned_by, is_active)
      VALUES ($1, $2, $3, true)
      ON CONFLICT (user_id, role_id, tenant_id) 
      DO UPDATE SET is_active = true, assigned_by = $3, assigned_at = CURRENT_TIMESTAMP
      RETURNING *
    `,
      [userId, roleId, assignerId]
    );

    res.json({
      success: true,
      message: `–†–æ–ª—å "${roleResult.rows[0].name}" –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`,
      assignment: assignmentResult.rows[0]
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—Ç–∑—ã–≤ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.delete('/api/users/:userId/roles/:roleId', authMiddleware, async (req, res) => {
  try {
    const { userId, roleId } = req.params;

    const result = await query(
      `
      UPDATE user_role_assignments 
      SET is_active = false 
      WHERE user_id = $1 AND role_id = $2
      RETURNING *
    `,
      [userId, roleId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({
      success: true,
      message: '–†–æ–ª—å –æ—Ç–æ–∑–≤–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ä–æ–ª–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤) - –û–¢–ö–õ–Æ–ß–ï–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è —Å roles –º–∞—Å—Å–∏–≤–æ–º –Ω–∏–∂–µ
/*
app.get('/api/users', authMiddleware, async (req, res) => {
  try {
    const result = await query(`
      SELECT 
        au.id, 
        au.email, 
        au.firstname, 
        au.lastname, 
        au.company, 
        au.is_active,
        au.created_at,
        au.last_login,
        COUNT(ura.id) as roles_count,
        STRING_AGG(ur.name, ', ') as role_names
      FROM auth_users au
      LEFT JOIN user_role_assignments ura ON au.id = ura.user_id AND ura.is_active = true
      LEFT JOIN user_roles ur ON ura.role_id = ur.id
      WHERE au.is_active = true
      GROUP BY au.id
      ORDER BY au.created_at DESC
    `);
    
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
*/

// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.delete('/api/users/:userId/roles/:roleId', authMiddleware, async (req, res) => {
  try {
    const { userId, roleId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã)
    // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–µ–π

    const result = await query(
      `
      UPDATE user_role_assignments 
      SET is_active = false, 
          assigned_by = $1, 
          assigned_at = CURRENT_TIMESTAMP
      WHERE user_id = $2 AND role_id = $3 AND is_active = true
      RETURNING *
    `,
      [req.user?.id, userId, roleId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({
      success: true,
      message: '–†–æ–ª—å –æ—Ç–æ–∑–≤–∞–Ω–∞'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ä–æ–ª–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Ä–æ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/users', authMiddleware, async (req, res) => {
  console.log('üî• USING NEW API ENDPOINT WITH ROLES ARRAY');
  try {
    const usersResult = await query(`
      SELECT 
        au.id,
        au.email,
        au.firstname,
        au.lastname,
        au.company,
        au.phone,
        au.position,
        au.location,
        au.is_active,
        au.email_verified,
        au.created_at,
        au.updated_at
      FROM auth_users au
      WHERE au.id != 0  -- –∏—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      ORDER BY au.created_at DESC
    `);

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ä–æ–ª–∏
    for (const user of usersResult.rows) {
      const rolesResult = await query(
        `
        SELECT ur.id, ur.name, ur.description, ura.assigned_at
        FROM user_roles ur
        JOIN user_role_assignments ura ON ur.id = ura.role_id
        WHERE ura.user_id = $1 AND ura.is_active = true
        ORDER BY ura.assigned_at DESC
      `,
        [user.id]
      );

      user.roles = rolesResult.rows;
    }

    res.json(usersResult.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º (—Ü–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)
app.get('/api/projects', authMiddleware, async (req, res) => {
  try {
    const tenantId = req.user?.tenantId;
    const { search, offset = 0, limit = 20, sort = 'created_at', order = 'desc' } = req.query;

    if (!tenantId) {
      return res.status(401).json({
        error: '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        code: 'MISSING_TENANT_CONTEXT'
      });
    }

    console.log(`üìã –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞: ${tenantId.substring(0, 8)}...`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validSortFields = ['created_at', 'deadline', 'project_code', 'customer_name'];
    const validOrder = ['asc', 'desc'];
    const sortField = validSortFields.includes(sort) ? sort : 'created_at';
    const sortOrder = validOrder.includes(order.toLowerCase()) ? order.toUpperCase() : 'DESC';
    const limitNum = Math.min(Math.max(parseInt(limit) || 20, 1), 100); // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1-100
    const offsetNum = Math.max(parseInt(offset) || 0, 0);

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ WHERE —É—Å–ª–æ–≤–∏–π
    let whereConditions = ['cp.tenant_id = $1'];
    let params = [tenantId];
    let paramIndex = 2;

    if (search) {
      whereConditions.push(`(
        cp.customer_name ILIKE $${paramIndex} OR 
        cp.object_address ILIKE $${paramIndex} OR 
        cp.contract_number ILIKE $${paramIndex} OR 
        cp.project_code ILIKE $${paramIndex}
      )`);
      params.push(`%${search}%`);
      paramIndex++;
    }

    const whereClause = whereConditions.join(' AND ');

    // –ó–∞–ø—Ä–æ—Å –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    const countQuery = `
      SELECT COUNT(*) as total
      FROM construction_projects cp
      WHERE ${whereClause}
    `;

    const countResult = await query(countQuery, params);
    const total = parseInt(countResult.rows[0].total);

    // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const dataQuery = `
      SELECT 
        cp.id,
        cp.customer_name,
        cp.object_address,
        cp.contractor_name,
        cp.contract_number,
        cp.deadline,
        cp.project_code,
        cp.status,
        cp.tenant_id,
        cp.created_at,
        cp.updated_at,
        au.firstname || ' ' || au.lastname as created_by_name,
        au.email as created_by_email
      FROM construction_projects cp
      LEFT JOIN auth_users au ON cp.user_id = au.id
      WHERE ${whereClause}
      ORDER BY cp.${sortField} ${sortOrder}
      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
    `;

    params.push(limitNum, offsetNum);
    const result = await query(dataQuery, params);

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${result.rows.length}/${total} (offset: ${offsetNum}, limit: ${limitNum})`);

    res.json({
      items: result.rows,
      total,
      offset: offsetNum,
      limit: limitNum,
      hasMore: offsetNum + limitNum < total
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (—Ü–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)
app.post('/api/projects', authMiddleware, async (req, res) => {
  try {
    const { customerName, objectAddress, contractorName, contractNumber, deadline, projectCode } = req.body;
    const userId = req.user?.id || req.user?.userId || req.user?.sub;
    const tenantId = req.user?.tenantId;

    if (!tenantId) {
      return res.status(401).json({
        error: '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        code: 'MISSING_TENANT_CONTEXT'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!customerName || !objectAddress || !contractorName || !contractNumber || !deadline) {
      return res.status(400).json({
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: customerName, objectAddress, contractorName, contractNumber, deadline',
        code: 'MISSING_REQUIRED_FIELDS'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è projectCode –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if (projectCode && (typeof projectCode !== 'string' || projectCode.length > 50)) {
      return res.status(400).json({
        error: 'projectCode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤',
        code: 'INVALID_PROJECT_CODE'
      });
    }

    console.log(`üîç –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞: ${tenantId.substring(0, 8)}...`);

    const result = await query(
      `
      INSERT INTO construction_projects (
        customer_name, object_address, contractor_name, contract_number, deadline,
        project_code, tenant_id, user_id, status, created_at, updated_at
      ) 
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), NOW()) 
      RETURNING 
        id, customer_name, object_address, contractor_name, contract_number, 
        deadline, project_code, status, tenant_id, created_at, updated_at
    `,
      [customerName, objectAddress, contractorName, contractNumber, deadline, projectCode, tenantId, userId, 'draft']
    );

    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ID=${result.rows[0].id}, –∫–æ–¥=${projectCode || '–Ω–µ—Ç'}, —Ç–µ–Ω–∞–Ω—Ç=${tenantId.substring(0, 8)}...`);

    res.status(201).json({
      success: true,
      message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);

    if (error.code === '23505') {
      // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–µ –∏–º–µ–Ω–Ω–æ
      if (error.constraint && error.constraint.includes('tenant_code')) {
        return res.status(409).json({
          error: '–ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Ç–µ–Ω–∞–Ω—Ç–µ',
          code: 'PROJECT_CODE_CONFLICT'
        });
      } else {
        return res.status(409).json({
          error: '–ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
          code: 'DUPLICATE_PROJECT'
        });
      }
    }

    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID (—Ü–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)
app.get('/api/projects/:id', authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const tenantId = req.user?.tenantId;

    if (!tenantId) {
      return res.status(401).json({
        error: '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        code: 'MISSING_TENANT_CONTEXT'
      });
    }

    const result = await query(
      `
      SELECT 
        cp.id,
        cp.customer_name,
        cp.object_address,
        cp.contractor_name,
        cp.contract_number,
        cp.deadline,
        cp.project_code,
        cp.status,
        cp.tenant_id,
        cp.created_at,
        cp.updated_at,
        au.firstname || ' ' || au.lastname as created_by_name,
        au.email as created_by_email
      FROM construction_projects cp
      LEFT JOIN auth_users au ON cp.user_id = au.id
      WHERE cp.id = $1 AND cp.tenant_id = $2
    `,
      [id, tenantId]
    );

    if (result.rows.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç –≤–æ–æ–±—â–µ
      const existsCheck = await query('SELECT id FROM construction_projects WHERE id = $1', [id]);

      if (existsCheck.rows.length > 0) {
        return res.status(403).json({
          error: '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É –¥—Ä—É–≥–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω',
          code: 'FOREIGN_TENANT'
        });
      } else {
        return res.status(404).json({
          error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
          code: 'PROJECT_NOT_FOUND'
        });
      }
    }

    res.json(result.rows[0]);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ü–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)
app.put('/api/projects/:id', authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const { customerName, objectAddress, contractorName, contractNumber, deadline, projectCode, status } = req.body;
    const tenantId = req.user?.tenantId;

    if (!tenantId) {
      return res.status(401).json({
        error: '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        code: 'MISSING_TENANT_CONTEXT'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ–Ω–∞–Ω—Ç–µ
    const existingProject = await query(
      `
      SELECT id, project_code FROM construction_projects 
      WHERE id = $1 AND tenant_id = $2
    `,
      [id, tenantId]
    );

    if (existingProject.rows.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç –≤–æ–æ–±—â–µ
      const existsCheck = await query('SELECT id FROM construction_projects WHERE id = $1', [id]);

      if (existsCheck.rows.length > 0) {
        return res.status(403).json({
          error: '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É –¥—Ä—É–≥–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω',
          code: 'FOREIGN_TENANT'
        });
      } else {
        return res.status(404).json({
          error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
          code: 'PROJECT_NOT_FOUND'
        });
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const validStatuses = ['draft', 'active', 'archived'];
    if (status && !validStatuses.includes(status)) {
      return res.status(400).json({
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å. –†–∞–∑—Ä–µ—à–µ–Ω—ã: draft, active, archived',
        code: 'INVALID_STATUS'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è projectCode –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if (projectCode !== undefined && (typeof projectCode !== 'string' || projectCode.length > 50)) {
      return res.status(400).json({
        error: 'projectCode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤',
        code: 'INVALID_PROJECT_CODE'
      });
    }

    const result = await query(
      `
      UPDATE construction_projects 
      SET 
        customer_name = COALESCE($1, customer_name),
        object_address = COALESCE($2, object_address),
        contractor_name = COALESCE($3, contractor_name),
        contract_number = COALESCE($4, contract_number),
        deadline = COALESCE($5, deadline),
        project_code = COALESCE($6, project_code),
        status = COALESCE($7, status),
        updated_at = NOW()
      WHERE id = $8 AND tenant_id = $9
      RETURNING 
        id, customer_name, object_address, contractor_name, contract_number, 
        deadline, project_code, status, tenant_id, created_at, updated_at
    `,
      [customerName, objectAddress, contractorName, contractNumber, deadline, projectCode, status, id, tenantId]
    );

    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç ${id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ç–µ–Ω–∞–Ω—Ç–µ ${tenantId.substring(0, 8)}...`);

    res.json({
      success: true,
      message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);

    if (error.code === '23505' && error.constraint && error.constraint.includes('tenant_code')) {
      return res.status(409).json({
        error: '–ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Ç–µ–Ω–∞–Ω—Ç–µ',
        code: 'PROJECT_CODE_CONFLICT'
      });
    }

    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ü–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)
app.delete('/api/projects/:id', authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const tenantId = req.user?.tenantId;

    if (!tenantId) {
      return res.status(401).json({
        error: '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        code: 'MISSING_TENANT_CONTEXT'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ–Ω–∞–Ω—Ç–µ
    const existingProject = await query(
      `
      SELECT id FROM construction_projects 
      WHERE id = $1 AND tenant_id = $2
    `,
      [id, tenantId]
    );

    if (existingProject.rows.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç –≤–æ–æ–±—â–µ
      const existsCheck = await query('SELECT id FROM construction_projects WHERE id = $1', [id]);

      if (existsCheck.rows.length > 0) {
        return res.status(403).json({
          error: '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É –¥—Ä—É–≥–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω',
          code: 'FOREIGN_TENANT'
        });
      } else {
        return res.status(404).json({
          error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
          code: 'PROJECT_NOT_FOUND'
        });
      }
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞)
    const result = await query(
      `
      DELETE FROM construction_projects 
      WHERE id = $1 AND tenant_id = $2 
      RETURNING id, customer_name, project_code
    `,
      [id, tenantId]
    );

    console.log(`üóëÔ∏è –ü—Ä–æ–µ–∫—Ç ${id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–µ–Ω–∞–Ω—Ç–∞ ${tenantId.substring(0, 8)}...`);

    res.json({
      success: true,
      message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      deleted: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// =======================
// ESTIMATES API (–®–∞–≥ 2) - –¶–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å
// =======================

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–º–µ—Ç (—Ü–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)
app.get('/api/estimates', authMiddleware, async (req, res) => {
  try {
    const tenantId = req.user?.tenantId;

    if (!tenantId) {
      return res.status(401).json({
        error: '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        code: 'MISSING_TENANT_CONTEXT'
      });
    }

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const offset = parseInt(req.query.offset) || 0;
    const limit = Math.min(parseInt(req.query.limit) || 50, 200); // –ú–∞–∫—Å–∏–º—É–º 200 –∑–∞–ø–∏—Å–µ–π

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortField = req.query.sort || 'created_at';
    const sortOrder = req.query.order === 'asc' ? 'ASC' : 'DESC';

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const allowedSortFields = ['created_at', 'estimate_number', 'name'];
    const finalSortField = allowedSortFields.includes(sortField) ? sortField : 'created_at';

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    const projectId = req.query.project_id;

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
    const search = req.query.search;

    let whereConditions = ['e.tenant_id = $1'];
    let queryParams = [tenantId];
    let paramCount = 1;

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    if (projectId) {
      paramCount++;
      whereConditions.push(`e.project_id = $${paramCount}`);
      queryParams.push(projectId);
    }

    // –ü–æ–∏—Å–∫
    if (search && search.trim()) {
      paramCount++;
      whereConditions.push(`(
        e.estimate_number ILIKE $${paramCount} OR 
        e.name ILIKE $${paramCount}
      )`);
      queryParams.push(`%${search.trim()}%`);
    }

    const whereClause = whereConditions.length > 0 ? 'WHERE ' + whereConditions.join(' AND ') : '';

    // –ó–∞–ø—Ä–æ—Å –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const countQuery = `
      SELECT COUNT(*) as total
      FROM customer_estimates e
      INNER JOIN construction_projects p ON e.project_id = p.id
      ${whereClause}
    `;

    const countResult = await query(countQuery, queryParams);
    const total = parseInt(countResult.rows[0].total);

    // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const dataQuery = `
      SELECT 
        e.id,
        e.project_id,
        e.name,
        e.estimate_number,
        e.version,
        e.status,
        e.currency,
        e.total_amount,
        e.notes,
        e.created_at,
        e.updated_at,
        p.customer_name as project_name,
        p.project_code
      FROM customer_estimates e
      INNER JOIN construction_projects p ON e.project_id = p.id
      ${whereClause}
      ORDER BY e.${finalSortField} ${sortOrder}
      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}
    `;

    queryParams.push(limit, offset);

    const dataResult = await query(dataQuery, queryParams);

    console.log(`üìã –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Å–º–µ—Ç: ${dataResult.rows.length} –∏–∑ ${total} (tenant: ${tenantId.substring(0, 8)}...)`);

    res.json({
      items: dataResult.rows,
      total,
      offset,
      limit,
      hasMore: offset + dataResult.rows.length < total
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–º–µ—Ç:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã (—Ü–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)
app.post('/api/estimates', authMiddleware, async (req, res) => {
  try {
    const { project_id, estimate_number, name, version, currency, notes } = req.body;
    const tenantId = req.user?.tenantId;
    const userId = req.user?.id;

    if (!tenantId) {
      return res.status(401).json({
        error: '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        code: 'MISSING_TENANT_CONTEXT'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!project_id || !estimate_number || !name) {
      return res.status(400).json({
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: project_id, estimate_number, name',
        code: 'MISSING_REQUIRED_FIELDS'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ —Ç–µ–∫—É—â–µ–º—É —Ç–µ–Ω–∞–Ω—Ç—É
    const projectCheck = await query(
      `
      SELECT id FROM construction_projects 
      WHERE id = $1 AND tenant_id = $2
    `,
      [project_id, tenantId]
    );

    if (projectCheck.rows.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç –≤–æ–æ–±—â–µ
      const existsCheck = await query('SELECT id FROM construction_projects WHERE id = $1', [project_id]);

      if (existsCheck.rows.length > 0) {
        return res.status(403).json({
          error: '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É –¥—Ä—É–≥–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω',
          code: 'FOREIGN_TENANT'
        });
      } else {
        return res.status(404).json({
          error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
          code: 'PROJECT_NOT_FOUND'
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å estimate_number –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
    const duplicateCheck = await query(
      `
      SELECT id FROM customer_estimates 
      WHERE project_id = $1 AND estimate_number = $2
    `,
      [project_id, estimate_number]
    );

    if (duplicateCheck.rows.length > 0) {
      return res.status(409).json({
        error: '–ù–æ–º–µ—Ä —Å–º–µ—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ',
        code: 'ESTIMATE_NUMBER_CONFLICT'
      });
    }

    // –°–æ–∑–¥–∞–µ–º —Å–º–µ—Ç—É
    const result = await query(
      `
      INSERT INTO customer_estimates (
        project_id, estimate_number, name, version, 
        currency, notes, user_id, tenant_id
      )
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      RETURNING *
    `,
      [project_id, estimate_number, name, version || 1, currency || 'RUB', notes || null, userId, tenantId]
    );

    console.log(`‚úÖ –°–º–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${estimate_number} –≤ –ø—Ä–æ–µ–∫—Ç–µ ${project_id} (tenant: ${tenantId.substring(0, 8)}...)`);

    res.status(201).json({
      success: true,
      message: '–°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      estimate: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å–º–µ—Ç—ã (—Ü–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)
app.get('/api/estimates/:id', authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const tenantId = req.user?.tenantId;

    if (!tenantId) {
      return res.status(401).json({
        error: '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        code: 'MISSING_TENANT_CONTEXT'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–Ω–∞–Ω—Ç—É
    const result = await query(
      `
      SELECT 
        e.*,
        p.customer_name as project_name,
        p.project_code,
        u.username as created_by_username
      FROM customer_estimates e
      INNER JOIN construction_projects p ON e.project_id = p.id
      LEFT JOIN auth_users u ON e.user_id = u.id
      WHERE e.id = $1 AND e.tenant_id = $2
    `,
      [id, tenantId]
    );

    if (result.rows.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–º–µ—Ç–∞ –≤–æ–æ–±—â–µ
      const existsCheck = await query('SELECT id FROM customer_estimates WHERE id = $1', [id]);

      if (existsCheck.rows.length > 0) {
        return res.status(403).json({
          error: '–î–æ—Å—Ç—É–ø –∫ —Å–º–µ—Ç–µ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω',
          code: 'FOREIGN_TENANT'
        });
      } else {
        return res.status(404).json({
          error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          code: 'ESTIMATE_NOT_FOUND'
        });
      }
    }

    console.log(`üìÑ –°–º–µ—Ç–∞ ${id} –∑–∞–ø—Ä–æ—à–µ–Ω–∞ (tenant: ${tenantId.substring(0, 8)}...)`);

    res.json({
      success: true,
      estimate: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã (—Ü–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)
app.put('/api/estimates/:id', authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const { estimate_number, name, version, currency, status, notes } = req.body;
    const tenantId = req.user?.tenantId;

    if (!tenantId) {
      return res.status(401).json({
        error: '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        code: 'MISSING_TENANT_CONTEXT'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ–Ω–∞–Ω—Ç–µ
    const existingEstimate = await query(
      `
      SELECT id, project_id, estimate_number FROM customer_estimates 
      WHERE id = $1 AND tenant_id = $2
    `,
      [id, tenantId]
    );

    if (existingEstimate.rows.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–º–µ—Ç–∞ –≤–æ–æ–±—â–µ
      const existsCheck = await query('SELECT id FROM customer_estimates WHERE id = $1', [id]);

      if (existsCheck.rows.length > 0) {
        return res.status(403).json({
          error: '–î–æ—Å—Ç—É–ø –∫ —Å–º–µ—Ç–µ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω',
          code: 'FOREIGN_TENANT'
        });
      } else {
        return res.status(404).json({
          error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          code: 'ESTIMATE_NOT_FOUND'
        });
      }
    }

    const currentEstimate = existingEstimate.rows[0];

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
    if (status && !['draft', 'active', 'archived'].includes(status)) {
      return res.status(400).json({
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: draft, active, archived',
        code: 'INVALID_STATUS'
      });
    }

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è estimate_number, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (estimate_number && estimate_number !== currentEstimate.estimate_number) {
      const duplicateCheck = await query(
        `
        SELECT id FROM customer_estimates 
        WHERE project_id = $1 AND estimate_number = $2 AND id != $3
      `,
        [currentEstimate.project_id, estimate_number, id]
      );

      if (duplicateCheck.rows.length > 0) {
        return res.status(409).json({
          error: '–ù–æ–º–µ—Ä —Å–º–µ—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ',
          code: 'ESTIMATE_NUMBER_CONFLICT'
        });
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateFields = [];
    const updateValues = [];
    let paramCount = 0;

    if (estimate_number !== undefined) {
      paramCount++;
      updateFields.push(`estimate_number = $${paramCount}`);
      updateValues.push(estimate_number);
    }

    if (name !== undefined) {
      paramCount++;
      updateFields.push(`name = $${paramCount}`);
      updateValues.push(name);
    }

    if (version !== undefined) {
      paramCount++;
      updateFields.push(`version = $${paramCount}`);
      updateValues.push(version);
    }

    if (currency !== undefined) {
      paramCount++;
      updateFields.push(`currency = $${paramCount}`);
      updateValues.push(currency);
    }

    if (status !== undefined) {
      paramCount++;
      updateFields.push(`status = $${paramCount}`);
      updateValues.push(status);
    }

    if (notes !== undefined) {
      paramCount++;
      updateFields.push(`notes = $${paramCount}`);
      updateValues.push(notes);
    }

    if (updateFields.length === 0) {
      return res.status(400).json({
        error: '–ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        code: 'NO_UPDATE_FIELDS'
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º updated_at
    paramCount++;
    updateFields.push(`updated_at = $${paramCount}`);
    updateValues.push(new Date());

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ WHERE
    paramCount++;
    updateValues.push(id);
    paramCount++;
    updateValues.push(tenantId);

    const updateQuery = `
      UPDATE customer_estimates 
      SET ${updateFields.join(', ')} 
      WHERE id = $${paramCount - 1} AND tenant_id = $${paramCount}
      RETURNING *
    `;

    const result = await query(updateQuery, updateValues);

    console.log(`‚úèÔ∏è –°–º–µ—Ç–∞ ${id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (tenant: ${tenantId.substring(0, 8)}...)`);

    res.json({
      success: true,
      message: '–°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      estimate: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã (—Ü–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)
app.delete('/api/estimates/:id', authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const tenantId = req.user?.tenantId;

    if (!tenantId) {
      return res.status(401).json({
        error: '–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        code: 'MISSING_TENANT_CONTEXT'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ–Ω–∞–Ω—Ç–µ
    const existingEstimate = await query(
      `
      SELECT id, estimate_number, name FROM customer_estimates 
      WHERE id = $1 AND tenant_id = $2
    `,
      [id, tenantId]
    );

    if (existingEstimate.rows.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–º–µ—Ç–∞ –≤–æ–æ–±—â–µ
      const existsCheck = await query('SELECT id FROM customer_estimates WHERE id = $1', [id]);

      if (existsCheck.rows.length > 0) {
        return res.status(403).json({
          error: '–î–æ—Å—Ç—É–ø –∫ —Å–º–µ—Ç–µ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω',
          code: 'FOREIGN_TENANT'
        });
      } else {
        return res.status(404).json({
          error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          code: 'ESTIMATE_NOT_FOUND'
        });
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å–º–µ—Ç—É (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    const result = await query(
      `
      DELETE FROM customer_estimates 
      WHERE id = $1 AND tenant_id = $2 
      RETURNING id, estimate_number, name
    `,
      [id, tenantId]
    );

    console.log(`üóëÔ∏è –°–º–µ—Ç–∞ ${id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–µ–Ω–∞–Ω—Ç–∞ ${tenantId.substring(0, 8)}...`);

    res.json({
      success: true,
      message: '–°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
      deleted: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// API –¥–ª—è —Å–º–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–º–µ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞
// GET /api/customer-estimates - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–º–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
app.get('/api/customer-estimates', authMiddleware, async (req, res) => {
  try {
    console.log('üì® GET /api/customer-estimates [' + req.requestId + ']');
    console.log('üì® GET /api/customer-estimates - ' + req.ip);

    const tenantId = req.user.tenantId;
    const { project_id, status, search, offset = 0, limit = 20, sort = 'created_at', order = 'desc' } = req.query;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const allowedSortFields = ['created_at', 'status', 'name', 'updated_at'];
    const allowedOrderValues = ['asc', 'desc'];

    const sortField = allowedSortFields.includes(sort) ? sort : 'created_at';
    const orderDirection = allowedOrderValues.includes(order?.toLowerCase()) ? order.toUpperCase() : 'DESC';

    let queryText = `
      SELECT 
        ce.*,
        cp.customer_name as project_customer_name,
        cp.object_address as project_address,
        COUNT(cei.id) as items_count,
        COALESCE(SUM(cei.total_amount), 0) as calculated_total
      FROM customer_estimates ce
      LEFT JOIN construction_projects cp ON ce.project_id = cp.id
      LEFT JOIN customer_estimate_items cei ON ce.id = cei.estimate_id
      WHERE ce.tenant_id = $1
    `;

    const params = [tenantId];
    let paramIndex = 1;

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    if (project_id) {
      paramIndex++;
      queryText += ` AND ce.project_id = $${paramIndex}`;
      params.push(project_id);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (status) {
      paramIndex++;
      queryText += ` AND ce.status = $${paramIndex}`;
      params.push(status);
    }

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–º–µ—Ç—ã
    if (search) {
      paramIndex++;
      queryText += ` AND (ce.customer_name ILIKE $${paramIndex} OR ce.name ILIKE $${paramIndex})`;
      params.push(`%${search}%`);
    }

    queryText += `
      GROUP BY ce.id, cp.customer_name, cp.object_address
      ORDER BY ce.${sortField} ${orderDirection}
      LIMIT $${paramIndex + 1} OFFSET $${paramIndex + 2}
    `;

    params.push(parseInt(limit), parseInt(offset));

    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å–º–µ—Ç –¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞:', tenantId);
    const result = await query(queryText, params);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    let countQuery = `
      SELECT COUNT(*) as total
      FROM customer_estimates ce
      WHERE ce.tenant_id = $1
    `;

    const countParams = [tenantId];
    let countParamIndex = 1;

    if (project_id) {
      countParamIndex++;
      countQuery += ` AND ce.project_id = $${countParamIndex}`;
      countParams.push(project_id);
    }

    if (status) {
      countParamIndex++;
      countQuery += ` AND ce.status = $${countParamIndex}`;
      countParams.push(status);
    }

    if (search) {
      countParamIndex++;
      countQuery += ` AND (ce.customer_name ILIKE $${countParamIndex} OR ce.name ILIKE $${countParamIndex})`;
      countParams.push(`%${search}%`);
    }

    const countResult = await query(countQuery, countParams);
    const total = parseInt(countResult.rows[0].total);

    console.log('ÔøΩ –ù–∞–π–¥–µ–Ω–æ —Å–º–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞:', result.rows.length, '–∏–∑', total);

    res.json({
      items: result.rows,
      total: total,
      offset: parseInt(offset),
      limit: parseInt(limit)
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// –°–¢–ê–†–ê–Ø –í–ï–†–°–ò–Ø –° –£–°–õ–û–í–ò–Ø–ú–ò
app.get('/api/customer-estimates-old', async (req, res) => {
  try {
    const userId = req.user.id || req.user.sub;
    const userRole = req.user.role || 'viewer';

    let query_text = `
      SELECT 
        ce.*,
        COUNT(cei.id) as items_count,
        COALESCE(SUM(cei.total_amount), 0) as total_estimate_cost
      FROM customer_estimates ce
      LEFT JOIN customer_estimate_items cei ON ce.id = cei.estimate_id
      WHERE 1=1
    `;

    const params = [];

    // –†–æ–ª–∏ viewer –∏ estimator –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–º–µ—Ç—ã
    if (userRole === 'viewer' || userRole === 'estimator') {
      query_text += ' AND ce.user_id = $1';
      params.push(userId);
    }

    query_text += `
      GROUP BY ce.id
      ORDER BY ce.created_at DESC
    `;

    const result = await query(query_text, params);
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–º–µ—Ç—É –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ ID
// GET /api/customer-estimates/:id - –ü–æ–ª—É—á–∏—Ç—å —Å–º–µ—Ç—É –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ ID
app.get('/api/customer-estimates/:id', authMiddleware, async (req, res) => {
  try {
    console.log('üì® GET /api/customer-estimates/:id [' + req.requestId + ']');
    console.log('üì® GET /api/customer-estimates/:id - ' + req.ip);

    const { id } = req.params;
    const tenantId = req.user.tenantId;

    console.log('üîç –ü–æ–∏—Å–∫ —Å–º–µ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞:', id, '–¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞:', tenantId);

    const queryText = `
      SELECT 
        ce.*,
        cp.customer_name as project_customer_name,
        cp.object_address as project_address,
        cp.project_name,
        COUNT(cei.id) as items_count,
        COALESCE(SUM(cei.total_amount), 0) as calculated_total
      FROM customer_estimates ce
      LEFT JOIN construction_projects cp ON ce.project_id = cp.id
      LEFT JOIN customer_estimate_items cei ON ce.id = cei.estimate_id
      WHERE ce.id = $1 AND ce.tenant_id = $2
      GROUP BY ce.id, cp.customer_name, cp.object_address, cp.project_name
    `;

    const result = await query(queryText, [id, tenantId]);

    if (result.rows.length === 0) {
      return res.status(404).json({
        error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        code: 'NOT_FOUND'
      });
    }

    console.log('‚úÖ –°–º–µ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', result.rows[0].name);
    res.json(result.rows[0]);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// POST /api/customer-estimates - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ—Ç—É –∑–∞–∫–∞–∑—á–∏–∫–∞
app.post('/api/customer-estimates', authMiddleware, async (req, res) => {
  try {
    console.log('üì® POST /api/customer-estimates [' + req.requestId + ']');
    console.log('üì® POST /api/customer-estimates - ' + req.ip);

    const { project_id, customer_name, estimate_name, description, status = 'draft' } = req.body;
    const userId = req.user.id;
    const tenantId = req.user.tenantId;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!project_id || !estimate_name) {
      return res.status(400).json({
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: project_id, estimate_name',
        code: 'MISSING_REQUIRED_FIELDS'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç–µ–Ω–∞–Ω—Ç—É
    const projectCheck = await query(
      `
      SELECT id, tenant_id FROM construction_projects 
      WHERE id = $1 AND tenant_id = $2
    `,
      [project_id, tenantId]
    );

    if (projectCheck.rows.length === 0) {
      return res.status(403).json({
        error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç–µ–Ω–∞–Ω—Ç—É',
        code: 'FOREIGN_TENANT'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å estimate_name –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
    const duplicateCheck = await query(
      `
      SELECT id FROM customer_estimates 
      WHERE project_id = $1 AND name = $2 AND tenant_id = $3
    `,
      [project_id, estimate_name, tenantId]
    );

    if (duplicateCheck.rows.length > 0) {
      return res.status(409).json({
        error: '–°–º–µ—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ',
        code: 'CUSTOMER_ESTIMATE_CONFLICT'
      });
    }

    console.log('ÔøΩ –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:', project_id, '—Ç–µ–Ω–∞–Ω—Ç:', tenantId);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–º–µ—Ç—ã
    const estimateNumber = `EST-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`;

    // –°–æ–∑–¥–∞–µ–º —Å–º–µ—Ç—É —Å tenant_id –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    const result = await query(
      `
      INSERT INTO customer_estimates (
        project_id, name, description, status, 
        customer_name, user_id, tenant_id,
        total_amount, work_coefficient, material_coefficient, version, estimate_number
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
      RETURNING *
    `,
      [project_id, estimate_name, description, status, customer_name || '–ó–∞–∫–∞–∑—á–∏–∫', userId, tenantId, 0, 1.0, 1.0, 1, estimateNumber]
    );

    console.log('‚úÖ –°–º–µ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', result.rows[0].id);

    res.status(201).json({
      success: true,
      message: '–°–º–µ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      estimate: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// PUT /api/customer-estimates/:id - –û–±–Ω–æ–≤–∏—Ç—å —Å–º–µ—Ç—É –∑–∞–∫–∞–∑—á–∏–∫–∞
app.put('/api/customer-estimates/:id', authMiddleware, async (req, res) => {
  try {
    console.log('üì® PUT /api/customer-estimates/:id [' + req.requestId + ']');
    console.log('üì® PUT /api/customer-estimates/:id - ' + req.ip);

    const { id } = req.params;
    const tenantId = req.user.tenantId;
    const { customer_name, estimate_name, description, status } = req.body;

    console.log('üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞:', id, '–¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞:', tenantId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ–Ω–∞–Ω—Ç–µ
    const existingEstimate = await query(
      `
      SELECT id, project_id, name, tenant_id FROM customer_estimates 
      WHERE id = $1 AND tenant_id = $2
    `,
      [id, tenantId]
    );

    if (existingEstimate.rows.length === 0) {
      return res.status(404).json({
        error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        code: 'NOT_FOUND'
      });
    }

    const currentEstimate = existingEstimate.rows[0];

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
    if (estimate_name && estimate_name !== currentEstimate.name) {
      const duplicateCheck = await query(
        `
        SELECT id FROM customer_estimates 
        WHERE project_id = $1 AND name = $2 AND tenant_id = $3 AND id != $4
      `,
        [currentEstimate.project_id, estimate_name, tenantId, id]
      );

      if (duplicateCheck.rows.length > 0) {
        return res.status(409).json({
          error: '–°–º–µ—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ',
          code: 'CUSTOMER_ESTIMATE_CONFLICT'
        });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è (–ù–ï project_id, –ù–ï tenant_id)
    const result = await query(
      `
      UPDATE customer_estimates 
      SET 
        customer_name = COALESCE($1, customer_name),
        name = COALESCE($2, name),
        description = COALESCE($3, description),
        status = COALESCE($4, status),
        updated_at = CURRENT_TIMESTAMP
      WHERE id = $5 AND tenant_id = $6
      RETURNING *
    `,
      [customer_name, estimate_name, description, status, id, tenantId]
    );

    console.log('‚úÖ –°–º–µ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', result.rows[0].name);

    res.json({
      success: true,
      message: '–°–º–µ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      estimate: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// DELETE /api/customer-estimates/:id - –£–¥–∞–ª–∏—Ç—å —Å–º–µ—Ç—É –∑–∞–∫–∞–∑—á–∏–∫–∞
app.delete('/api/customer-estimates/:id', authMiddleware, async (req, res) => {
  try {
    console.log('üì® DELETE /api/customer-estimates/:id [' + req.requestId + ']');
    console.log('üì® DELETE /api/customer-estimates/:id - ' + req.ip);

    const { id } = req.params;
    const tenantId = req.user.tenantId;

    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞:', id, '–¥–ª—è —Ç–µ–Ω–∞–Ω—Ç–∞:', tenantId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const existsCheck = await query(
      `
      SELECT id, name, project_id FROM customer_estimates 
      WHERE id = $1 AND tenant_id = $2
    `,
      [id, tenantId]
    );

    if (existsCheck.rows.length === 0) {
      return res.status(404).json({
        error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        code: 'NOT_FOUND'
      });
    }

    const estimateName = existsCheck.rows[0].name;

    // –£–¥–∞–ª—è–µ–º —Å–º–µ—Ç—É (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
    const result = await query(
      `
      DELETE FROM customer_estimates 
      WHERE id = $1 AND tenant_id = $2 
      RETURNING id, name
    `,
      [id, tenantId]
    );

    console.log('üóëÔ∏è –°–º–µ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞:', estimateName);

    res.json({
      success: true,
      message: '–°–º–µ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
      deleted: result.rows[0]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å–º–µ—Ç—ã
app.get('/api/customer-estimates/:estimateId/items', authMiddleware, async (req, res) => {
  try {
    const { estimateId } = req.params;
    const tenantId = req.user.tenantId;

    console.log('üì® GET /api/customer-estimates/:estimateId/items [' + req.requestId + ']');
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–º–µ—Ç—ã –¥–ª—è ID:', estimateId, '—Ç–µ–Ω–∞–Ω—Ç:', tenantId?.substring(0, 8) + '...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞
    const estimateCheck = await query(
      `
      SELECT id FROM customer_estimates 
      WHERE id = $1 AND tenant_id = $2
    `,
      [estimateId, tenantId]
    );

    if (estimateCheck.rows.length === 0) {
      return res.status(404).json({
        error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç–µ–Ω–∞–Ω—Ç—É',
        code: 'ESTIMATE_NOT_FOUND'
      });
    }

    const result = await query(
      `
      SELECT * FROM customer_estimate_items 
      WHERE estimate_id = $1 
      ORDER BY sort_order ASC, created_at ASC
    `,
      [estimateId]
    );

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${result.rows.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–º–µ—Ç—ã ${estimateId}`);
    res.json({
      success: true,
      items: result.rows,
      total: result.rows.length
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–º–µ—Ç—ã:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–º–µ—Ç—É
app.post('/api/customer-estimates/:estimateId/items', authMiddleware, async (req, res) => {
  try {
    const { estimateId } = req.params;
    const tenantId = req.user.tenantId;

    console.log('üì® POST /api/customer-estimates/:estimateId/items [' + req.requestId + ']');
    console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–º–µ—Ç—É ID:', estimateId, '—Ç–µ–Ω–∞–Ω—Ç:', tenantId?.substring(0, 8) + '...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç–µ–Ω–∞–Ω—Ç—É
    const estimateOwnership = await query(
      `
      SELECT id FROM customer_estimates 
      WHERE id = $1 AND tenant_id = $2
    `,
      [estimateId, tenantId]
    );

    if (estimateOwnership.rows.length === 0) {
      return res.status(404).json({
        error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç–µ–Ω–∞–Ω—Ç—É',
        code: 'ESTIMATE_NOT_FOUND'
      });
    }

    const { item_type, reference_id, name, unit, quantity, unit_price, total_amount, sort_order } = req.body;

    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', { item_type, reference_id, name, unit, quantity, unit_price, total_amount, sort_order });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã
    const estimateCheck = await query('SELECT id FROM customer_estimates WHERE id = $1', [estimateId]);

    if (estimateCheck.rows.length === 0) {
      return res.status(404).json({ message: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const result = await query(
      `
      INSERT INTO customer_estimate_items (
        estimate_id, item_type, reference_id, name,
        unit, quantity, unit_price, total_amount, sort_order
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      RETURNING *
    `,
      [estimateId, item_type, reference_id, name, unit, quantity, unit_price, total_amount, sort_order || 0]
    );

    console.log('–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', result.rows[0].id);
    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–º–µ—Ç—ã:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å–º–µ—Ç—ã
app.put('/api/customer-estimates/:estimateId/items/:itemId', authMiddleware, async (req, res) => {
  try {
    const { estimateId, itemId } = req.params;
    const tenantId = req.user.tenantId;

    console.log('üì® PUT /api/customer-estimates/:estimateId/items/:itemId [' + req.requestId + ']');
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞', itemId, '–≤ —Å–º–µ—Ç–µ', estimateId, '—Ç–µ–Ω–∞–Ω—Ç:', tenantId?.substring(0, 8) + '...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç–µ–Ω–∞–Ω—Ç—É
    const estimateOwnership = await query(
      `
      SELECT id FROM customer_estimates 
      WHERE id = $1 AND tenant_id = $2
    `,
      [estimateId, tenantId]
    );

    if (estimateOwnership.rows.length === 0) {
      return res.status(404).json({
        error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç–µ–Ω–∞–Ω—Ç—É',
        code: 'ESTIMATE_NOT_FOUND'
      });
    }

    const { item_type, reference_id, unit, quantity, unit_price, sort_order } = req.body;

    const result = await query(
      `
      UPDATE customer_estimate_items 
      SET item_type = $1, reference_id = $2, name = $3,
          unit = $4, quantity = $5, unit_price = $6, total_amount = $7,
          sort_order = $8, updated_at = CURRENT_TIMESTAMP
      WHERE id = $9 AND estimate_id = $10
      RETURNING *
    `,
      [item_type, reference_id, custom_name, unit, quantity, unit_price, total_cost, sort_order || 0, itemId, estimateId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: '–≠–ª–µ–º–µ–Ω—Ç —Å–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log('–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', result.rows[0].id);
    res.json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–º–µ—Ç—ã:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å–º–µ—Ç—ã
app.delete('/api/customer-estimates/:estimateId/items/:itemId', authMiddleware, async (req, res) => {
  try {
    const { estimateId, itemId } = req.params;
    const tenantId = req.user.tenantId;

    console.log('üì® DELETE /api/customer-estimates/:estimateId/items/:itemId [' + req.requestId + ']');
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞', itemId, '–∏–∑ —Å–º–µ—Ç—ã', estimateId, '—Ç–µ–Ω–∞–Ω—Ç:', tenantId?.substring(0, 8) + '...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç–µ–Ω–∞–Ω—Ç—É
    const estimateOwnership = await query(
      `
      SELECT id FROM customer_estimates 
      WHERE id = $1 AND tenant_id = $2
    `,
      [estimateId, tenantId]
    );

    if (estimateOwnership.rows.length === 0) {
      return res.status(404).json({
        error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç–µ–Ω–∞–Ω—Ç—É',
        code: 'ESTIMATE_NOT_FOUND'
      });
    }

    const result = await query('DELETE FROM customer_estimate_items WHERE id = $1 AND estimate_id = $2 RETURNING *', [itemId, estimateId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ message: '–≠–ª–µ–º–µ–Ω—Ç —Å–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log('–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:', result.rows[0].id);
    res.json({ message: '–≠–ª–µ–º–µ–Ω—Ç —Å–º–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–º–µ—Ç—ã:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// Prometheus –º–µ—Ç—Ä–∏–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç
app.get('/metrics', metricsEndpoint);

// ============ CACHE MONITORING ENDPOINTS ============

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
app.get('/api/cache/stats', async (req, res) => {
  try {
    const cacheStats = getCacheStats();
    const redisAvailable = await isRedisAvailable();
    const redisStats = await getRedisStats();

    res.json({
      cache: cacheStats,
      redis: {
        available: redisAvailable,
        ...redisStats
      },
      config: {
        enabled: process.env.CACHE_ENABLED === 'true',
        materials: process.env.CACHE_MATERIALS === 'true',
        works: process.env.CACHE_WORKS === 'true',
        ttl_materials: process.env.CACHE_TTL_MATERIALS,
        ttl_works: process.env.CACHE_TTL_WORKS
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞' });
  }
});

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
app.delete('/api/cache', async (req, res) => {
  try {
    await cacheInvalidateByPrefix('');
    res.json({ message: '–ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞' });
  }
});

// –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ start.js

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ –º–µ—Ç–æ–¥ app –¥–ª—è —Ç–µ—Å—Ç–æ–≤
app.initializeTables = initializeTables;

export default app;
