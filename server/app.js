import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import pino from 'pino-http';
import { query } from './database.js';
import { observeRequestDuration, metricsEndpoint, activeConnections as activeConnectionsGauge } from './metrics.js';

dotenv.config();

console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');

const app = express();

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const activeConnections = new Set();
const MAX_CONNECTIONS = 10;

// Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
app.use((req, res, next) => {
  if (activeConnections.size >= MAX_CONNECTIONS) {
    console.log(`‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç (${activeConnections.size}/${MAX_CONNECTIONS})`);
    return res.status(503).json({ error: '–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' });
  }

  const connectionId = Math.random().toString(36).substr(2, 9);
  activeConnections.add(connectionId);

  req.connectionId = connectionId;
  console.log(`üì® ${req.method} ${req.path} [${connectionId}] (${activeConnections.size}/${MAX_CONNECTIONS})`);

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  activeConnectionsGauge.set(activeConnections.size);

  res.on('finish', () => {
    activeConnections.delete(connectionId);
    activeConnectionsGauge.set(activeConnections.size);
  });

  res.on('close', () => {
    activeConnections.delete(connectionId);
    activeConnectionsGauge.set(activeConnections.size);
  });

  next();
});

// –ë—ã—Å—Ç—Ä—ã–π –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –ª–æ–≥–≥–µ—Ä
app.use(
  pino({
    level: process.env.LOG_LEVEL || 'info',
    genReqId: (req, res) => `${Date.now()}-${Math.random().toString(16).slice(2)}`
  })
);

// –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ (gzip/br)
app.use(compression());

// –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ ETag
app.set('etag', 'strong');

// Keep-Alive
app.use((req, res, next) => {
  res.setHeader('Connection', 'keep-alive');
  next();
});

// Rate limiting
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 300,
  standardHeaders: true,
  legacyHeaders: false,
  message: {
    error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
    retryAfter: '15 –º–∏–Ω—É—Ç'
  }
});

// –ë–ª–æ–∫ –Ω–∞ —Å–ª–∏—à–∫–æ–º —Ç—è–∂—ë–ª—ã–µ –∑–∞–ø—Ä–æ—Å—ã
app.use((req, res, next) => {
  const limit = Number(req.query.limit || 50);
  if (limit > 200) {
    return res.status(400).json({ error: 'Limit too large. Maximum allowed: 200' });
  }
  next();
});

// CORS
app.use(
  cors({
    origin: true,
    credentials: true,
    optionsSuccessStatus: 200,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization']
  })
);

// JSON parsing
app.use(express.json({ limit: '1mb' }));
app.use(express.static('.'));

// Rate limiting –¥–ª—è API
app.use('/api', apiLimiter);

// Prometheus –º–µ—Ç—Ä–∏–∫–∏
app.use(observeRequestDuration);

console.log('üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è CORS –ø–æ–ª–∏—Ç–∏–∫–∞');

// Health endpoints
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    message: 'Backend —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString()
  });
});

app.get('/api/health/db', async (req, res) => {
  try {
    const result = await query('SELECT 1 as ok');
    res.json({ db: 'up', result: result.rows[0].ok });
  } catch (e) {
    res.status(503).json({ db: 'down', error: e.message });
  }
});

// Prometheus –º–µ—Ç—Ä–∏–∫–∏ endpoint
app.get('/metrics', metricsEndpoint);

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –¥–ª—è –ª–∏–¥-—Ñ–æ—Ä–º—ã
import { createLead, getLeadsStats, leadRateLimit, initializeLeadsTable } from './controllers/leadController.js';

// –õ–∏–¥-—Ñ–æ—Ä–º–∞ endpoints
app.post('/api/lead', leadRateLimit, createLead);
app.get('/api/leads/stats', getLeadsStats);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü
// (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–∑ server/index.js...)
// –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—é —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/statistics', async (req, res) => {
  try {
    const result = await query('SELECT * FROM statistics ORDER BY id');
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/orders', async (req, res) => {
  try {
    const result = await query('SELECT * FROM orders ORDER BY created_at DESC LIMIT 10');
    res.json(result.rows);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
app.initializeTables = async function () {
  console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü...');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞—è–≤–æ–∫
  await initializeLeadsTable();

  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export default app;
