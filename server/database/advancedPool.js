// Advanced Database Pool Manager - Phase 3 Step 1
import pg from 'pg';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import { smartCacheGetOrSet } from '../cache/smartCache.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables
const envPath = path.resolve(__dirname, '.env');
dotenv.config({ path: envPath });

const { Pool } = pg;

// Advanced Pool Configuration
const POOL_CONFIG = {
  // Connection settings
  connectionString: process.env.DATABASE_URL,
  
  // Pool size optimization
  max: parseInt(process.env.DB_POOL_MAX) || 20, // –º–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  min: parseInt(process.env.DB_POOL_MIN) || 2,  // –º–∏–Ω–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  
  // Timeout configurations
  idleTimeoutMillis: parseInt(process.env.DB_IDLE_TIMEOUT) || 30000, // 30 —Å–µ–∫—É–Ω–¥
  connectionTimeoutMillis: parseInt(process.env.DB_CONNECTION_TIMEOUT) || 5000, // 5 —Å–µ–∫—É–Ω–¥
  acquireTimeoutMillis: parseInt(process.env.DB_ACQUIRE_TIMEOUT) || 60000, // 60 —Å–µ–∫—É–Ω–¥
  
  // Query timeouts
  statement_timeout: parseInt(process.env.DB_STATEMENT_TIMEOUT) || 30000, // 30 —Å–µ–∫—É–Ω–¥
  query_timeout: parseInt(process.env.DB_QUERY_TIMEOUT) || 30000, // 30 —Å–µ–∫—É–Ω–¥
  
  // Keep-alive for long connections
  keepAlive: true,
  keepAliveInitialDelayMillis: 10000,
  
  // SSL configuration
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
};

/**
 * Advanced Database Pool Manager
 */
class DatabasePoolManager {
  constructor() {
    this.pool = null;
    this.stats = {
      totalConnections: 0,
      idleConnections: 0,
      waitingClients: 0,
      queriesExecuted: 0,
      queryErrors: 0,
      averageQueryTime: 0,
      connectionErrors: 0,
      lastConnectionTime: null,
      poolCreatedAt: new Date().toISOString()
    };
    this.queryHistory = [];
    this.maxHistorySize = 100;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  async initialize() {
    if (this.pool) {
      console.log('üîÑ Database pool —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return this.pool;
    }

    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Advanced Database Pool...');
      
      this.pool = new Pool(POOL_CONFIG);

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event handlers
      this.setupEventHandlers();

      // –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      await this.testConnection();

      console.log('‚úÖ Advanced Database Pool —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.log(`üìä Pool –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: min=${POOL_CONFIG.min}, max=${POOL_CONFIG.max}`);
      
      return this.pool;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Database Pool:', error.message);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –ø—É–ª–∞
   */
  setupEventHandlers() {
    // –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    this.pool.on('connect', (client) => {
      this.stats.totalConnections++;
      this.stats.lastConnectionTime = new Date().toISOString();
      console.log(`üîó –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î (–≤—Å–µ–≥–æ: ${this.stats.totalConnections})`);
    });

    // –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.pool.on('error', (err, client) => {
      this.stats.connectionErrors++;
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:', err.message);
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.pool.on('remove', (client) => {
      console.log('üóëÔ∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø—É–ª–∞');
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.pool.on('acquire', (client) => {
      console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∑—è—Ç–æ –∏–∑ –ø—É–ª–∞');
    });

    // –í–æ–∑–≤—Ä–∞—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.pool.on('release', (err, client) => {
      if (err) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err.message);
      }
    });
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async testConnection() {
    const startTime = Date.now();
    try {
      const result = await this.pool.query('SELECT NOW() as current_time, version() as db_version');
      const duration = Date.now() - startTime;
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', result.rows[0].current_time);
      console.log(`‚ö° –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${duration}ms`);
      console.log(`üêò PostgreSQL –≤–µ—Ä—Å–∏—è: ${result.rows[0].db_version.split(' ')[1]}`);
      
      return result.rows[0];
    } catch (error) {
      console.error('‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ:', error.message);
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async query(text, params = [], options = {}) {
    const {
      useCache = false,
      cacheTTL = 300,
      cacheKey = null,
      dependencies = [],
      timeout = 30000
    } = options;

    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (useCache && cacheKey) {
      try {
        return await smartCacheGetOrSet(
          `db:${cacheKey}`,
          cacheTTL,
          async () => await this._executeQuery(text, params, timeout),
          { dependencies, metadata: { type: 'database-query' } }
        );
      } catch (cacheError) {
        console.warn('‚ö†Ô∏è Cache error, executing direct query:', cacheError.message);
        return await this._executeQuery(text, params, timeout);
      }
    }

    return await this._executeQuery(text, params, timeout);
  }

  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
   */
  async _executeQuery(text, params = [], timeout = 30000) {
    if (!this.pool) {
      await this.initialize();
    }

    const startTime = Date.now();
    const queryId = Math.random().toString(36).substr(2, 9);

    try {
      console.log(`üîç Query [${queryId}]: ${text.substring(0, 100)}${text.length > 100 ? '...' : ''}`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const client = await this.pool.connect();
      
      try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        await client.query('SET statement_timeout = $1', [timeout]);
        
        const result = await client.query(text, params);
        const duration = Date.now() - startTime;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateQueryStats(duration, false);
        this.addToHistory(text, params, duration, result.rowCount, queryId);

        console.log(`‚úÖ Query [${queryId}] completed: ${duration}ms, ${result.rowCount} rows`);
        
        return result;
      } finally {
        client.release();
      }
    } catch (error) {
      const duration = Date.now() - startTime;
      this.updateQueryStats(duration, true);
      this.addToHistory(text, params, duration, 0, queryId, error.message);

      console.error(`‚ùå Query [${queryId}] failed after ${duration}ms:`, error.message);
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async transaction(callback) {
    if (!this.pool) {
      await this.initialize();
    }

    const client = await this.pool.connect();
    
    try {
      await client.query('BEGIN');
      const result = await callback(client);
      await client.query('COMMIT');
      
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      return result;
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:', error.message);
      throw error;
    } finally {
      client.release();
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  updateQueryStats(duration, isError) {
    this.stats.queriesExecuted++;
    if (isError) {
      this.stats.queryErrors++;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const totalQueries = this.stats.queriesExecuted;
    this.stats.averageQueryTime = (this.stats.averageQueryTime * (totalQueries - 1) + duration) / totalQueries;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  addToHistory(query, params, duration, rowCount, queryId, error = null) {
    const historyEntry = {
      id: queryId,
      query: query.substring(0, 200), // –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
      params: params ? params.slice(0, 5) : [], // –ø–µ—Ä–≤—ã–µ 5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      duration,
      rowCount,
      error,
      timestamp: new Date().toISOString()
    };

    this.queryHistory.unshift(historyEntry);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.queryHistory.length > this.maxHistorySize) {
      this.queryHistory = this.queryHistory.slice(0, this.maxHistorySize);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–ª–∞
   */
  getPoolStats() {
    const poolStats = {
      // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞
      totalCount: this.pool?.totalCount || 0,
      idleCount: this.pool?.idleCount || 0,
      waitingCount: this.pool?.waitingCount || 0,
      
      // –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      ...this.stats,
      
      // –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      errorRate: this.stats.queriesExecuted > 0 
        ? ((this.stats.queryErrors / this.stats.queriesExecuted) * 100).toFixed(2) + '%'
        : '0%',
      
      queriesPerSecond: this.stats.queriesExecuted > 0
        ? (this.stats.queriesExecuted / ((Date.now() - new Date(this.stats.poolCreatedAt).getTime()) / 1000)).toFixed(2)
        : '0',

      // –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      recentQueries: this.queryHistory.slice(0, 10)
    };

    return poolStats;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  getSlowQueries(minDuration = 1000) {
    return this.queryHistory.filter(query => query.duration >= minDuration);
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  async close() {
    if (this.pool) {
      console.log('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ Database Pool...');
      await this.pool.end();
      this.pool = null;
      console.log('‚úÖ Database Pool –∑–∞–∫—Ä—ã—Ç');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—É–ª–∞
   */
  async healthCheck() {
    try {
      const startTime = Date.now();
      const result = await this.query('SELECT 1 as health_check');
      const duration = Date.now() - startTime;

      return {
        status: 'healthy',
        connectionTime: duration,
        timestamp: new Date().toISOString(),
        poolStats: this.getPoolStats()
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        error: error.message,
        timestamp: new Date().toISOString(),
        poolStats: this.getPoolStats()
      };
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—É–ª–∞
const databaseManager = new DatabasePoolManager();

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
export function getDatabaseManager() {
  return databaseManager;
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
 */
export async function query(text, params, options) {
  return await databaseManager.query(text, params, options);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
export async function initializeDatabase() {
  return await databaseManager.initialize();
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export async function transaction(callback) {
  return await databaseManager.transaction(callback);
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */
export async function closeDatabase() {
  return await databaseManager.close();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
initializeDatabase().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Database Pool:', error.message);
});

export default databaseManager;