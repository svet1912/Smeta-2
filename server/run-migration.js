// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –ø–æ—Ç–æ–ª–∫–∞
import { Pool } from 'pg';
import fs from 'fs';
import { config } from './config.js';

const pool = new Pool({
  connectionString: config.databaseUrl,
  ssl: config.databaseUrl.includes('aiven') ? { rejectUnauthorized: false } : false
});

async function runMigration() {
  const client = await pool.connect();
  
  try {
    console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ—Ç–æ–ª–∫–∞...');
    
    // –ß–∏—Ç–∞–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é
    const migrationSQL = fs.readFileSync('./migrations/add_ceiling_fields_to_rooms.sql', 'utf8');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    await client.query(migrationSQL);
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—è –¥–æ–±–∞–≤–∏–ª–∏—Å—å
    const result = await client.query(`
      SELECT column_name, data_type, column_default 
      FROM information_schema.columns 
      WHERE table_name = 'project_rooms' 
      AND column_name IN ('ceiling_area', 'ceiling_slopes')
      ORDER BY column_name;
    `);
    
    console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è:');
    result.rows.forEach((row) => {
      console.log(`  - ${row.column_name}: ${row.data_type} (default: ${row.column_default})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
    const countResult = await client.query('SELECT COUNT(*) as count FROM project_rooms WHERE ceiling_area > 0');
    console.log(`üî¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å ceiling_area: ${countResult.rows[0].count}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
runMigration().catch(console.error);