// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã project_rooms
import { Pool } from 'pg';
import { config } from './config.js';

const pool = new Pool({
  connectionString: config.databaseUrl,
  ssl: config.databaseUrl.includes('aiven') ? { rejectUnauthorized: false } : false
});

async function checkProjectRooms() {
  const client = await pool.connect();
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã project_rooms...');
    
    const columnsResult = await client.query(`
      SELECT column_name, data_type, column_default, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'project_rooms' 
      ORDER BY ordinal_position;
    `);
    
    console.log('üè† –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã project_rooms:');
    columnsResult.rows.forEach((row) => {
      console.log(`  - ${row.column_name}: ${row.data_type} (default: ${row.column_default || 'NULL'}, nullable: ${row.is_nullable})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—è –ø–æ—Ç–æ–ª–∫–∞
    const ceilingFields = columnsResult.rows.filter((row) => 
      row.column_name === 'ceiling_area' || row.column_name === 'ceiling_slopes'
    );
    
    if (ceilingFields.length > 0) {
      console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –ø–æ—Ç–æ–ª–∫–∞:');
      ceilingFields.forEach((row) => {
        console.log(`  - ${row.column_name}: ${row.data_type}`);
      });
    } else {
      console.log('\n‚ùå –ü–æ–ª—è –ø–æ—Ç–æ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ceiling_area –∏ ceiling_slopes');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const countResult = await client.query('SELECT COUNT(*) as count FROM project_rooms');
    console.log(`\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ project_rooms: ${countResult.rows[0].count}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkProjectRooms().catch(console.error);