// Cache Warming Strategies - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
import { smartCacheWarm } from './smartCache.js';

// Mock services –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
const mockProjectsService = {
  getRecentProjects: async (limit) => Array.from({ length: Math.min(limit, 5) }, (_, i) => ({ id: i + 1, name: `Project ${i + 1}` })),
  getArchivedProjects: async () => [{ id: 999, name: 'Archived Project', status: 'archived' }],
  getTotalCount: async () => 42,
  getActiveCount: async () => 15,
  getCompletedCount: async () => 27
};

const mockWorksService = {
  getPopularWorks: async (limit) =>
    Array.from({ length: Math.min(limit, 10) }, (_, i) => ({ id: i + 1, name: `Work ${i + 1}`, popularity: 100 - i })),
  getTopRates: async (limit) => Array.from({ length: Math.min(limit, 20) }, (_, i) => ({ workId: i + 1, rate: 1000 + i * 50 })),
  getTotalCount: async () => 150,
  getCategoriesCount: async () => 12
};

const mockMaterialsService = {
  getCategories: async () => ['–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'],
  getAllMaterials: async () => Array.from({ length: 20 }, (_, i) => ({ id: i + 1, name: `Material ${i + 1}`, category: 'General' })),
  getTotalCount: async () => 500,
  getCategoriesCount: async () => 8
};

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ cache warming –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
 */
export class CacheWarmingService {
  constructor() {
    this.warmingStrategies = {
      critical: [], // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ - –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
      popular: [], // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
      onDemand: [] // –ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é - –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π warming
   */
  init() {
    this._setupCriticalStrategies();
    this._setupPopularStrategies();
    this._setupOnDemandStrategies();
  }

  /**
   * –ó–∞–ø—É—Å–∫ warming –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞)
   */
  async warmCriticalData() {
    console.log('üî• Starting critical data warming...');

    try {
      await smartCacheWarm(this.warmingStrategies.critical);
      console.log('‚úÖ Critical data warming completed');
    } catch (error) {
      console.error('‚ùå Critical data warming failed:', error.message);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ warming –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
   */
  async warmPopularData() {
    console.log('üî• Starting popular data warming...');

    try {
      await smartCacheWarm(this.warmingStrategies.popular);
      console.log('‚úÖ Popular data warming completed');
    } catch (error) {
      console.error('‚ùå Popular data warming failed:', error.message);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ warming –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
   */
  async warmOnDemand(category = 'all') {
    console.log(`üî• Starting on-demand warming for: ${category}...`);

    try {
      const tasks =
        category === 'all' ? this.warmingStrategies.onDemand : this.warmingStrategies.onDemand.filter((task) => task.category === category);

      await smartCacheWarm(tasks);
      console.log(`‚úÖ On-demand warming completed for: ${category}`);
    } catch (error) {
      console.error(`‚ùå On-demand warming failed for ${category}:`, error.message);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
   */
  _setupCriticalStrategies() {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    this.warmingStrategies.critical.push({
      key: 'system:global-config',
      ttl: 3600, // 1 —á–∞—Å
      dependencies: ['system'],
      category: 'system',
      producer: async () => {
        return {
          version: process.env.npm_package_version || '1.0.0',
          environment: process.env.NODE_ENV || 'development',
          features: {
            multitenancy: true,
            caching: true,
            authentication: true
          }
        };
      }
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
    this.warmingStrategies.critical.push({
      key: 'users:stats',
      ttl: 1800, // 30 –º–∏–Ω—É—Ç
      dependencies: ['users'],
      category: 'users',
      producer: async () => {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        return {
          totalUsers: 0,
          activeUsers: 0,
          newUsersToday: 0,
          lastUpdate: new Date().toISOString()
        };
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
   */
  _setupPopularStrategies() {
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    this.warmingStrategies.popular.push({
      key: 'projects:popular',
      ttl: 900, // 15 –º–∏–Ω—É—Ç
      dependencies: ['projects'],
      category: 'projects',
      producer: async () => {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–æ–µ–∫—Ç–æ–≤
          const projects = await mockProjectsService.getRecentProjects(10);
          return projects;
        } catch (error) {
          console.warn('Failed to load popular projects:', error.message);
          return [];
        }
      }
    });

    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
    this.warmingStrategies.popular.push({
      key: 'works:popular',
      ttl: 1800, // 30 –º–∏–Ω—É—Ç
      dependencies: ['works'],
      category: 'works',
      producer: async () => {
        try {
          const works = await mockWorksService.getPopularWorks(50);
          return works;
        } catch (error) {
          console.warn('Failed to load popular works:', error.message);
          return [];
        }
      }
    });

    // –ö–∞—Ç–∞–ª–æ–≥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    this.warmingStrategies.popular.push({
      key: 'materials:categories',
      ttl: 3600, // 1 —á–∞—Å
      dependencies: ['materials'],
      category: 'materials',
      producer: async () => {
        try {
          const categories = await mockMaterialsService.getCategories();
          return categories;
        } catch (error) {
          console.warn('Failed to load material categories:', error.message);
          return [];
        }
      }
    });

    // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ (—Ç–æ–ø-100)
    this.warmingStrategies.popular.push({
      key: 'pricing:top-rates',
      ttl: 7200, // 2 —á–∞—Å–∞
      dependencies: ['pricing', 'works'],
      category: 'pricing',
      producer: async () => {
        try {
          const rates = await mockWorksService.getTopRates(100);
          return rates;
        } catch (error) {
          console.warn('Failed to load top rates:', error.message);
          return [];
        }
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
   */
  _setupOnDemandStrategies() {
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
    this.warmingStrategies.onDemand.push({
      key: 'materials:detailed',
      ttl: 1800, // 30 –º–∏–Ω—É—Ç
      dependencies: ['materials'],
      category: 'materials',
      producer: async () => {
        try {
          const materials = await mockMaterialsService.getAllMaterials();
          return materials;
        } catch (error) {
          console.warn('Failed to load detailed materials:', error.message);
          return [];
        }
      }
    });

    // –ê—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
    this.warmingStrategies.onDemand.push({
      key: 'projects:archive',
      ttl: 3600, // 1 —á–∞—Å
      dependencies: ['projects'],
      category: 'projects',
      producer: async () => {
        try {
          const archivedProjects = await mockProjectsService.getArchivedProjects();
          return archivedProjects;
        } catch (error) {
          console.warn('Failed to load archived projects:', error.message);
          return [];
        }
      }
    });

    // –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    this.warmingStrategies.onDemand.push({
      key: 'system:full-stats',
      ttl: 600, // 10 –º–∏–Ω—É—Ç
      dependencies: ['system', 'users', 'projects'],
      category: 'analytics',
      producer: async () => {
        try {
          return {
            projects: {
              total: await mockProjectsService.getTotalCount(),
              active: await mockProjectsService.getActiveCount(),
              completed: await mockProjectsService.getCompletedCount()
            },
            works: {
              total: await mockWorksService.getTotalCount(),
              categories: await mockWorksService.getCategoriesCount()
            },
            materials: {
              total: await mockMaterialsService.getTotalCount(),
              categories: await mockMaterialsService.getCategoriesCount()
            },
            timestamp: new Date().toISOString()
          };
        } catch (error) {
          console.warn('Failed to load full system stats:', error.message);
          return { error: error.message };
        }
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
   */
  getStrategiesInfo() {
    return {
      critical: {
        count: this.warmingStrategies.critical.length,
        keys: this.warmingStrategies.critical.map((s) => s.key)
      },
      popular: {
        count: this.warmingStrategies.popular.length,
        keys: this.warmingStrategies.popular.map((s) => s.key)
      },
      onDemand: {
        count: this.warmingStrategies.onDemand.length,
        keys: this.warmingStrategies.onDemand.map((s) => s.key)
      }
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ warming
   */
  addCustomStrategy(strategy, type = 'onDemand') {
    if (!this.warmingStrategies[type]) {
      throw new Error(`Invalid strategy type: ${type}`);
    }

    const requiredFields = ['key', 'producer'];
    const missingFields = requiredFields.filter((field) => !strategy[field]);

    if (missingFields.length > 0) {
      throw new Error(`Missing required fields: ${missingFields.join(', ')}`);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const fullStrategy = {
      ttl: 300, // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      dependencies: [],
      category: 'custom',
      ...strategy
    };

    this.warmingStrategies[type].push(fullStrategy);

    console.log(`‚úÖ Added custom warming strategy: ${fullStrategy.key} (${type})`);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const cacheWarmingService = new CacheWarmingService();

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ warming (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞)
 */
export function initCacheWarming() {
  cacheWarmingService.init();
  return cacheWarmingService;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
 */
export function getCacheWarmingService() {
  return cacheWarmingService;
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const { warmCriticalData, warmPopularData, warmOnDemand } = cacheWarmingService;
export default cacheWarmingService;