import Redis from 'ioredis';

let redis = null;

export function getRedis() {
  if (redis) return redis;

  try {
    if (process.env.CACHE_ENABLED === 'true' && process.env.REDIS_URL) {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞...');

      redis = new Redis(process.env.REDIS_URL, {
        lazyConnect: true, // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
        maxRetriesPerRequest: 2, // –º–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        enableAutoPipelining: true, // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        reconnectOnError: () => true, // –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        retryDelayOnFailover: 100, // –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ failover
        connectTimeout: 2000, // —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 2 —Å–µ–∫
        commandTimeout: 1000 // —Ç–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã 1 —Å–µ–∫
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Redis
      redis.on('connect', () => {
        console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
      });

      redis.on('ready', () => {
        console.log('üéØ Redis –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      });

      redis.on('error', (error) => {
        console.warn('‚ö†Ô∏è Redis error:', error.message);
        // –ù–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ fallback —Ä–µ–∂–∏–º–µ
      });

      redis.on('close', () => {
        console.log('üîå Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      });

      redis.on('reconnecting', () => {
        console.log('üîÑ Redis –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      });
    } else {
      console.log('‚ùå Redis –∫—ç—à –æ—Ç–∫–ª—é—á–µ–Ω (CACHE_ENABLED=false –∏–ª–∏ REDIS_URL –Ω–µ —É–∫–∞–∑–∞–Ω)');
    }
  } catch (error) {
    console.warn('‚ùå Redis init failed:', error.message);
    redis = null;
  }

  return redis;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis
export async function isRedisAvailable() {
  const client = getRedis();
  if (!client) return false;

  try {
    await client.ping();
    return true;
  } catch (error) {
    console.warn('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Redis
export async function getRedisStats() {
  const client = getRedis();
  if (!client) return null;

  try {
    const info = await client.info('memory');
    const keyspace = await client.info('keyspace');
    return {
      status: 'connected',
      memory: info,
      keyspace: keyspace
    };
  } catch (error) {
    return {
      status: 'error',
      error: error.message
    };
  }
}

export default redis;
