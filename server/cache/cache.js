import { getRedis } from './redisClient.js';

const ns = 'smeta360'; // –Ω–µ–π–º—Å–ø–µ–π—Å –∫–ª—é—á–µ–π
const v = 'v1'; // –≤–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã –∫–ª—é—á–µ–π –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏

// –ú–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞
let cacheStats = {
  hits: 0,
  misses: 0,
  errors: 0,
  sets: 0
};

export function getCacheStats() {
  return { ...cacheStats };
}

export function resetCacheStats() {
  cacheStats = { hits: 0, misses: 0, errors: 0, sets: 0 };
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @param {string} key - –∫–ª—é—á –∫—ç—à–∞
 * @param {number} ttlSec - –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {Function} producer - —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} options - –æ–ø—Ü–∏–∏
 * @param {boolean} options.skip - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫—ç—à
 * @returns {Promise<any>} –¥–∞–Ω–Ω—ã–µ
 */
export async function cacheGetOrSet(key, ttlSec, producer, { skip = false } = {}) {
  const redis = getRedis();
  const fullKey = `${ns}:${v}:${key}`;

  // –§–æ–ª–ª–±—ç–∫ - –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∫—ç—à –æ—Ç–∫–ª—é—á–µ–Ω
  if (!redis || skip) {
    console.log(`üîÑ Cache SKIP –¥–ª—è –∫–ª—é—á–∞: ${key}`);
    const result = await producer();
    return result;
  }

  // –ó–∞—â–∏—Ç–∞ –æ—Ç "—à—Ç–∞–º–ø–∞" (cache stampede) –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
  const lockKey = `${fullKey}:lock`;
  const lockTtlMs = 2000;

  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É –≤–∑—è—Ç—å –∏–∑ –∫—ç—à–∞
    const hit = await redis.get(fullKey);
    if (hit) {
      cacheStats.hits++;
      console.log(`‚úÖ Cache HIT –¥–ª—è –∫–ª—é—á–∞: ${key}`);
      return JSON.parse(hit);
    }

    cacheStats.misses++;
    console.log(`‚ùå Cache MISS –¥–ª—è –∫–ª—é—á–∞: ${key}`);

    // –ë–µ—Ä—ë–º –ø—Ä–æ—Å—Ç—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã —Ç–æ–ª–ø–∞ –Ω–µ –ø–æ—à–ª–∞ –≤ –ë–î
    const gotLock = await redis.set(lockKey, '1', 'PX', lockTtlMs, 'NX');

    if (!gotLock) {
      // –ü–æ–¥–æ–∂–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –∫—ç—à–∞
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–ª—é—á–∞: ${key}`);
      await new Promise((r) => setTimeout(r, 150));

      const retry = await redis.get(fullKey);
      if (retry) {
        cacheStats.hits++;
        console.log(`‚úÖ Cache HIT –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫–ª—é—á–∞: ${key}`);
        return JSON.parse(retry);
      }
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞: ${key}`);
      const data = await producer();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await redis.set(fullKey, JSON.stringify(data), 'EX', ttlSec);
      cacheStats.sets++;
      console.log(`üíæ Cache SET –¥–ª—è –∫–ª—é—á–∞: ${key}, TTL: ${ttlSec}s`);

      return data;
    } finally {
      // –û—Å–≤–æ–±–æ–¥–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
      await redis.del(lockKey).catch(() => {});
    }
  } catch (error) {
    cacheStats.errors++;
    console.warn(`‚ö†Ô∏è Cache ERROR –¥–ª—è –∫–ª—é—á–∞ ${key}:`, error.message);

    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∫—ç—à–∞ - fallback –∫ –ø—Ä—è–º–æ–º—É –≤—ã–∑–æ–≤—É
    return await producer();
  }
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –∫–ª—é—á–µ–π
 * @param {string} prefix - –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π
 */
export async function cacheInvalidateByPrefix(prefix) {
  const redis = getRedis();
  if (!redis) {
    console.log(`üö´ Cache invalidation SKIP (Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω): ${prefix}`);
    return;
  }

  try {
    const pattern = `${ns}:${v}:${prefix}*`;
    console.log(`üóëÔ∏è Cache invalidation –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: ${pattern}`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SCAN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π
    const stream = redis.scanStream({
      match: pattern,
      count: 200
    });

    const pipeline = redis.pipeline();
    let deletedCount = 0;

    await new Promise((resolve, reject) => {
      stream.on('data', (keys) => {
        if (keys.length > 0) {
          keys.forEach((k) => {
            pipeline.del(k);
            deletedCount++;
          });
        }
      });

      stream.on('end', resolve);
      stream.on('error', reject);
    });

    if (deletedCount > 0) {
      await pipeline.exec();
      console.log(`‚úÖ Cache invalidated: ${deletedCount} –∫–ª—é—á–µ–π —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ${pattern}`);
    } else {
      console.log(`‚ÑπÔ∏è Cache invalidation: –∫–ª—é—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ${pattern}`);
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è Cache invalidation ERROR –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ ${prefix}:`, error.message);
  }
}

/**
 * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export async function cacheClearAll() {
  return cacheInvalidateByPrefix('');
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö –∫—ç—à–∞
 * @param {string} prefix - –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns {Promise<Array>} —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
 */
export async function getCacheKeys(prefix = '') {
  const redis = getRedis();
  if (!redis) return [];

  try {
    const pattern = `${ns}:${v}:${prefix}*`;
    const keys = [];

    const stream = redis.scanStream({
      match: pattern,
      count: 100
    });

    await new Promise((resolve) => {
      stream.on('data', (foundKeys) => {
        keys.push(...foundKeys);
      });
      stream.on('end', resolve);
    });

    return keys;
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∫—ç—à–∞:', error.message);
    return [];
  }
}
