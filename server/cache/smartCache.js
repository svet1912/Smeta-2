// Enhanced Smart Cache —Å dependency tracking –∏ analytics
import { getRedis } from './redisClient.js';

const ns = 'smeta360'; // namespace –∫–ª—é—á–µ–π
const v = 'v2'; // –≤–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã –∫–ª—é—á–µ–π –¥–ª—è smart cache
const depNs = 'deps'; // namespace –¥–ª—è dependencies

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞
let cacheStats = {
  hits: 0,
  misses: 0,
  errors: 0,
  sets: 0,
  invalidations: 0,
  warmingHits: 0,
  dependencyInvalidations: 0,
  totalKeys: 0,
  averageLatency: 0,
  hitRate: 0
};

/**
 * Smart Cache –∫–ª–∞—Å—Å —Å dependency tracking
 */
class SmartCache {
  constructor(redis) {
    this.redis = redis;
    this.namespace = `${ns}:${v}`;
    this.depsNamespace = `${this.namespace}:${depNs}`;
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
   * @param {string} key - –∫–ª—é—á –∫—ç—à–∞
   * @param {any} value - –∑–Ω–∞—á–µ–Ω–∏–µ
   * @param {number} ttl - –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
   * @param {string[]} dependencies - –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   * @param {Object} metadata - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
   */
  async set(key, value, ttl = 300, dependencies = [], metadata = {}) {
    if (!this.redis) return;

    const fullKey = `${this.namespace}:${key}`;
    const startTime = Date.now();

    try {
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const cacheObject = {
        data: value,
        metadata: {
          ...metadata,
          cachedAt: new Date().toISOString(),
          dependencies,
          ttl,
          originalKey: key
        }
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await this.redis.setex(fullKey, ttl, JSON.stringify(cacheObject));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      if (dependencies.length > 0) {
        await this._saveDependencies(key, dependencies, ttl);
      }

      cacheStats.sets++;
      cacheStats.totalKeys++;

      const latency = Date.now() - startTime;
      this._updateAverageLatency(latency);

      console.log(`üíæ SmartCache SET: ${key}, TTL: ${ttl}s, deps: [${dependencies.join(', ')}]`);
    } catch (error) {
      cacheStats.errors++;
      console.error(`‚ùå SmartCache SET error for ${key}:`, error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   * @param {string} key - –∫–ª—é—á –∫—ç—à–∞
   * @returns {Promise<{data: any, metadata: Object} | null>}
   */
  async get(key) {
    if (!this.redis) return null;

    const fullKey = `${this.namespace}:${key}`;
    const startTime = Date.now();

    try {
      const cached = await this.redis.get(fullKey);

      const latency = Date.now() - startTime;
      this._updateAverageLatency(latency);

      if (cached) {
        cacheStats.hits++;
        this._updateHitRate();

        const cacheObject = JSON.parse(cached);
        console.log(`‚úÖ SmartCache HIT: ${key} (cached at: ${cacheObject.metadata.cachedAt})`);

        return cacheObject;
      } else {
        cacheStats.misses++;
        this._updateHitRate();
        console.log(`‚ùå SmartCache MISS: ${key}`);
        return null;
      }
    } catch (error) {
      cacheStats.errors++;
      console.error(`‚ùå SmartCache GET error for ${key}:`, error.message);
      return null;
    }
  }

  /**
   * Smart invalidation –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
   * @param {string} dependency - –∏–º—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   */
  async invalidateByDependency(dependency) {
    if (!this.redis) return;

    try {
      const depKey = `${this.depsNamespace}:${dependency}`;
      const dependentKeys = await this.redis.smembers(depKey);

      if (dependentKeys.length > 0) {
        console.log(`üóëÔ∏è SmartCache invalidating ${dependentKeys.length} keys for dependency: ${dependency}`);

        // –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –∫–ª—é—á–∏
        const pipeline = this.redis.pipeline();

        dependentKeys.forEach((key) => {
          pipeline.del(`${this.namespace}:${key}`);
        });

        // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
        pipeline.del(depKey);

        await pipeline.exec();

        cacheStats.invalidations++;
        cacheStats.dependencyInvalidations++;
        cacheStats.totalKeys = Math.max(0, cacheStats.totalKeys - dependentKeys.length);

        console.log(`‚úÖ SmartCache invalidated ${dependentKeys.length} keys for dependency: ${dependency}`);
      } else {
        console.log(`‚ÑπÔ∏è SmartCache: no keys found for dependency: ${dependency}`);
      }
    } catch (error) {
      cacheStats.errors++;
      console.error(`‚ùå SmartCache invalidation error for dependency ${dependency}:`, error.message);
    }
  }

  /**
   * Cache warming - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   * @param {Array} warmingTasks - –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è warming
   */
  async warm(warmingTasks) {
    if (!this.redis) return;

    console.log(`üî• SmartCache warming started: ${warmingTasks.length} tasks`);

    for (const task of warmingTasks) {
      try {
        const { key, producer, ttl = 300, dependencies = [] } = task;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
        const existing = await this.get(key);
        if (existing) {
          cacheStats.warmingHits++;
          console.log(`‚ô®Ô∏è SmartCache warming skipped (exists): ${key}`);
          continue;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        console.log(`‚ô®Ô∏è SmartCache warming: ${key}`);
        const data = await producer();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –º–µ—Ç–∫–æ–π warming
        await this.set(key, data, ttl, dependencies, { warmed: true });
      } catch (error) {
        console.error(`‚ùå SmartCache warming error for ${task.key}:`, error.message);
      }
    }

    console.log(`‚úÖ SmartCache warming completed`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫—ç—à–∞
   */
  async getAnalytics() {
    const analytics = {
      ...cacheStats,
      timestamp: new Date().toISOString()
    };

    if (this.redis) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis
        const info = await this.redis.info('memory');
        const memoryLines = info.split('\r\n');

        const usedMemory = memoryLines.find((line) => line.startsWith('used_memory:'));
        const maxMemory = memoryLines.find((line) => line.startsWith('maxmemory:'));

        analytics.redis = {
          usedMemory: usedMemory ? usedMemory.split(':')[1] : 'unknown',
          maxMemory: maxMemory ? maxMemory.split(':')[1] : 'unknown'
        };

        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –Ω–∞—à–µ–≥–æ namespace
        const keys = await this._getOurKeys();
        analytics.actualKeys = keys.length;
      } catch (error) {
        console.error('‚ùå Error getting cache analytics:', error.message);
      }
    }

    return analytics;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  async cleanupStaleData() {
    if (!this.redis) return;

    try {
      console.log('üßπ SmartCache cleanup started...');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      const depKeys = await this.redis.keys(`${this.depsNamespace}:*`);
      let cleanedCount = 0;

      for (const depKey of depKeys) {
        const dependentKeys = await this.redis.smembers(depKey);
        const existingKeys = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∑–∞–≤–∏—Å–∏–º—ã–µ –∫–ª—é—á–∏ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        for (const key of dependentKeys) {
          const exists = await this.redis.exists(`${this.namespace}:${key}`);
          if (exists) {
            existingKeys.push(key);
          }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π, —É–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
        if (existingKeys.length === 0) {
          await this.redis.del(depKey);
          cleanedCount++;
        } else if (existingKeys.length < dependentKeys.length) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
          await this.redis.del(depKey);
          if (existingKeys.length > 0) {
            await this.redis.sadd(depKey, ...existingKeys);
          }
        }
      }

      console.log(`‚úÖ SmartCache cleanup completed: ${cleanedCount} stale dependencies removed`);
    } catch (error) {
      console.error('‚ùå SmartCache cleanup error:', error.message);
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  async _saveDependencies(key, dependencies, ttl) {
    const pipeline = this.redis.pipeline();

    dependencies.forEach((dep) => {
      const depKey = `${this.depsNamespace}:${dep}`;
      pipeline.sadd(depKey, key);
      pipeline.expire(depKey, ttl + 300); // –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∂–∏–≤—É—Ç –¥–æ–ª—å—à–µ –Ω–∞ 5 –º–∏–Ω—É—Ç
    });

    await pipeline.exec();
  }

  async _getOurKeys() {
    const keys = [];
    const stream = this.redis.scanStream({
      match: `${this.namespace}:*`,
      count: 100
    });

    return new Promise((resolve) => {
      stream.on('data', (foundKeys) => {
        keys.push(...foundKeys);
      });
      stream.on('end', () => resolve(keys));
    });
  }

  _updateAverageLatency(newLatency) {
    const totalOps = cacheStats.hits + cacheStats.misses + cacheStats.sets;
    if (totalOps === 1) {
      cacheStats.averageLatency = newLatency;
    } else {
      cacheStats.averageLatency = (cacheStats.averageLatency * (totalOps - 1) + newLatency) / totalOps;
    }
  }

  _updateHitRate() {
    const total = cacheStats.hits + cacheStats.misses;
    cacheStats.hitRate = total > 0 ? ((cacheStats.hits / total) * 100).toFixed(2) : 0;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Smart Cache
let smartCacheInstance = null;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Smart Cache
 */
function getSmartCache() {
  if (!smartCacheInstance) {
    const redis = getRedis();
    smartCacheInstance = new SmartCache(redis);
  }
  return smartCacheInstance;
}

/**
 * Wrapper –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 */
export async function smartCacheGetOrSet(key, ttlSec, producer, options = {}) {
  const { skip = false, dependencies = [], metadata = {}, warming = false } = options;

  if (skip) {
    console.log(`üîÑ SmartCache SKIP –¥–ª—è –∫–ª—é—á–∞: ${key}`);
    return await producer();
  }

  const cache = getSmartCache();

  // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
  const cached = await cache.get(key);
  if (cached) {
    return cached.data;
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  const data = await producer();
  await cache.set(key, data, ttlSec, dependencies, { ...metadata, warming });

  return data;
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
 */
export async function smartCacheInvalidate(dependency) {
  const cache = getSmartCache();
  await cache.invalidateByDependency(dependency);
}

/**
 * Cache warming
 */
export async function smartCacheWarm(tasks) {
  const cache = getSmartCache();
  await cache.warm(tasks);
}

/**
 * –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫—ç—à–∞
 */
export async function getSmartCacheAnalytics() {
  const cache = getSmartCache();
  return await cache.getAnalytics();
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export async function cleanupSmartCache() {
  const cache = getSmartCache();
  await cache.cleanupStaleData();
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
 */
export function getSmartCacheStats() {
  return { ...cacheStats };
}

export { SmartCache, getSmartCache };