/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –ó–∞–º–µ–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è –ª–æ–≥–∏–∫—É –∏–∑ tenantContextMiddleware –∏ simpleAuth
 */
import jwt from 'jsonwebtoken';
import { query } from '../database.js';
import { config } from '../config.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT
const JWT_SECRET = config.jwtSecret;
const JWT_ISSUER = 'smeta360-app';

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
 */
function extractJwtToken(req) {
  const authHeader = req.headers.authorization;
  if (!authHeader) return null;

  if (authHeader.startsWith('Bearer ')) {
    return authHeader.slice(7);
  }
  
  return authHeader;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω
 */
function verifyJwtToken(token) {
  try {
    return jwt.verify(token, JWT_SECRET, {
      algorithms: ['HS256']
    });
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      throw new Error('JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫');
    }
    if (error.name === 'JsonWebTokenError') {
      throw new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω');
    }
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT: ${error.message}`);
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–Ω–∞–Ω—Ç–∞ –≤ –ë–î
 */
async function setDatabaseContext(userId, tenantId) {
  try {
    // PostgreSQL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è SET
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ SQL injection
    const safeUserId = parseInt(userId);
    const safeTenantId = tenantId.replace(/[^a-f0-9-]/gi, '');
    
    await query(`SET app.user_id = ${safeUserId}`);
    await query(`SET app.tenant_id = '${safeTenantId}'`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ë–î:', error.message);
    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    // console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ë–î:', error);
  }
}

/**
 * –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
const PUBLIC_ROUTES = [
  '/api/health',
  '/api/health/db',
  '/api/test',
  '/api/auth/login',
  '/api/auth/register',
  '/api/auth/refresh',
  '/api/lead',
  '/api/leads/stats',
  '/metrics'
];

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ä—à—Ä—É—Ç –ø—É–±–ª–∏—á–Ω—ã–º
 */
function isPublicRoute(path) {
  return PUBLIC_ROUTES.some(route => 
    path === route || 
    path.startsWith(route) ||
    path.startsWith('/api/materials') ||
    path.startsWith('/api/works') ||
    path.startsWith('/api/phases')
  );
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export async function authMiddleware(req, res, next) {
  try {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    if (isPublicRoute(req.path)) {
      return next();
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = extractJwtToken(req);
    if (!token) {
      return res.status(401).json({ 
        error: '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        code: 'NO_AUTH_TOKEN'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    let payload;
    try {
      payload = verifyJwtToken(token);
    } catch (error) {
      return res.status(401).json({
        error: error.message,
        code: 'INVALID_TOKEN'
      });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId = payload.id || payload.sub;
    const tenantId = payload.tenantId || payload.tenant_id;
    const role = payload.role || 'user';
    const email = payload.email;

    if (!userId || !tenantId) {
      return res.status(401).json({
        error: '–¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        code: 'INVALID_TOKEN_PAYLOAD'
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø—Ä–æ—Å–µ
    req.user = {
      id: userId,
      tenantId: tenantId,
      role: role,
      email: email
    };
    

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ë–î
    try {
      await setDatabaseContext(userId, tenantId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ë–î:', error);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    }

    console.log(`üîê Auth: user=${userId}, tenant=${tenantId.substring(0,8)}, role=${role}, path=${req.path}`);
    next();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ authMiddleware:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function requireRole(allowedRoles) {
  const roles = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles];
  
  return (req, res, next) => {
    const user = req.user;
    if (!user) {
      return res.status(401).json({
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        code: 'AUTHENTICATION_REQUIRED'
      });
    }

    if (!roles.includes(user.role)) {
      return res.status(403).json({
        error: `–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: ${roles.join(' –∏–ª–∏ ')}`,
        code: 'INSUFFICIENT_PERMISSIONS'
      });
    }

    next();
  };
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º —Ç–µ–Ω–∞–Ω—Ç–æ–º
 */
export function requireTenantAccess(req, res, next) {
  const user = req.user;
  if (!user) {
    return res.status(401).json({
      error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      code: 'AUTHENTICATION_REQUIRED'
    });
  }

  const requestTenantId = req.params.tenantId || req.body.tenantId;
  if (requestTenantId && requestTenantId !== user.tenantId) {
    return res.status(403).json({
      error: '–î–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å–∞–º –¥—Ä—É–≥–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω',
      code: 'TENANT_ACCESS_DENIED'
    });
  }

  next();
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getCurrentUser(req) {
  return req.user || null;
}

export default {
  authMiddleware,
  requireRole,
  requireTenantAccess,
  getCurrentUser
};
