import jwt from 'jsonwebtoken';

// Middleware –¥–ª—è tenant –∏–∑–æ–ª—è—Ü–∏–∏
const tenantIsolation = async (req, res, next) => {
  try {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è health check –∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    if (req.path === '/api/health' || req.path === '/api/test' || req.path.startsWith('/api/health/')) {
      return next();
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    const authHeader = req.headers.authorization;
    let userId = null;
    let tenantId = null;

    if (authHeader && authHeader.startsWith('Bearer ')) {
      try {
        const token = authHeader.substring(7);
        const decoded = jwt.decode(token); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        userId = decoded?.userId;
        tenantId = decoded?.tenantId; // –ë–µ—Ä–µ–º tenantId –ø—Ä—è–º–æ –∏–∑ JWT
        console.log(`üîç –ò–∑–≤–ª–µ—á–µ–Ω userId ${userId}, tenantId ${tenantId} –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞`);
      } catch (jwtError) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞: ${jwtError.message}`);
      }
    }
    
    if (tenantId && req.db) {
      try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tenant –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É—è tenantId –∏–∑ JWT
        await req.db.query('SELECT set_tenant_context($1)', [tenantId]);
        
        req.tenantId = tenantId;
        console.log(`üè¢ Tenant –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${tenantId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      } catch (dbError) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ tenant –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${dbError.message}`);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ tenant –∏–∑–æ–ª—è—Ü–∏–∏
      }
    } else if (authHeader && !tenantId) {
      console.log(`‚ö†Ô∏è tenantId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JWT —Ç–æ–∫–µ–Ω–µ`);
    } else if (authHeader) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å userId –∏–∑ Authorization –∑–∞–≥–æ–ª–æ–≤–∫–∞`);
    }

    next();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ tenant middleware:', error);
    next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
  }
};

export { tenantIsolation };