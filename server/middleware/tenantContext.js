/**
 * JWT Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–Ω–∞–Ω—Ç–∞ –≤ –ë–î
 * –®–∞–≥ 9.1 ‚Äî Middleware –¥–ª—è app.user_id –∏ app.tenant_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
 */
import jwt from 'jsonwebtoken';
import { query } from '../database.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT
const JWT_SECRET = process.env.JWT_SECRET || 'dev-secret-key-change-in-production';
const JWT_ISSUER = 'sn4-app';

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
 * @param {Request} req - Express –∑–∞–ø—Ä–æ—Å
 * @returns {string|null} JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ null
 */
function extractJwtToken(req) {
  const authHeader = req.headers.authorization;
  if (!authHeader) return null;

  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ 'Bearer TOKEN' —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ 'TOKEN'
  if (authHeader.startsWith('Bearer ')) {
    return authHeader.slice(7);
  }

  return authHeader;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω
 * @param {string} token - JWT —Ç–æ–∫–µ–Ω
 * @returns {Object} –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload
 * @throws {Error} –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
 */
function verifyJwtToken(token) {
  try {
    return jwt.verify(token, JWT_SECRET, {
      issuer: JWT_ISSUER,
      algorithms: ['HS256']
    });
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      throw new Error('JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫');
    }
    if (error.name === 'JsonWebTokenError') {
      throw new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω');
    }
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT: ${error.message}`);
  }
}

/**
 * Middleware –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–Ω–∞–Ω—Ç–∞ –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç app.user_id –∏ app.tenant_id –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
export function tenantContextMiddleware(req, res, next) {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  const publicRoutes = ['/auth/login', '/auth/register', '/auth/refresh', '/health', '/api-docs'];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ä—à—Ä—É—Ç –ø—É–±–ª–∏—á–Ω—ã–º
  const isPublicRoute = publicRoutes.some((route) => req.path === route || req.path.startsWith(route));
  if (isPublicRoute) {
    return next();
  }

  try {
    // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const token = extractJwtToken(req);
    if (!token) {
      return res.status(401).json({
        error: '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        code: 'NO_AUTH_TOKEN'
      });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    let payload;
    try {
      payload = verifyJwtToken(token);
    } catch (error) {
      return res.status(401).json({
        error: error.message,
        code: 'INVALID_TOKEN'
      });
    }

    // 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ payload
    const userId = payload.sub; // subject = user ID
    const tenantId = payload.tenant_id;
    const role = payload.role || 'user';
    const email = payload.email;

    if (!userId) {
      return res.status(401).json({
        error: '–¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        code: 'INVALID_USER_ID'
      });
    }

    if (!tenantId) {
      return res.status(401).json({
        error: '–¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID —Ç–µ–Ω–∞–Ω—Ç–∞',
        code: 'INVALID_TENANT_ID'
      });
    }

    // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ä–µ–∫—Ç–µ –∑–∞–ø—Ä–æ—Å–∞
    req.user = {
      id: userId,
      tenantId: tenantId,
      role: role,
      email: email
    };

    // 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ë–î –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SET LOCAL –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    setDatabaseContext(userId, tenantId)
      .then(() => {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤ –ª–æ–≥–∏
        console.log(`üîê JWT Context: user=${userId.substring(0, 8)}, tenant=${tenantId.substring(0, 8)}, role=${role}, path=${req.path}`);
        next();
      })
      .catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ë–î:', error.message);
        res.status(500).json({
          error: '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
          code: 'DATABASE_CONTEXT_ERROR'
        });
      });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ tenantContextMiddleware:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–Ω–∞–Ω—Ç–∞ –≤ –ë–î
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} tenantId - ID —Ç–µ–Ω–∞–Ω—Ç–∞
 */
async function setDatabaseContext(userId, tenantId) {
  try {
    // PostgreSQL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è SET
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ SQL injection
    const safeUserId = parseInt(userId);
    const safeTenantId = tenantId.replace(/[^a-f0-9-]/gi, '');

    await query(`SET app.user_id = ${safeUserId}`);
    await query(`SET app.tenant_id = '${safeTenantId}'`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ë–î:', error.message);
    throw error;
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
 * @param {Request} req - Express –∑–∞–ø—Ä–æ—Å
 * @returns {Object|null} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null
 */
export function getCurrentUser(req) {
  return req.user || null;
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string|string[]} allowedRoles - –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
 * @returns {Function} Express middleware —Ñ—É–Ω–∫—Ü–∏—è
 */
export function requireRole(allowedRoles) {
  const roles = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles];

  return (req, res, next) => {
    const user = getCurrentUser(req);
    if (!user) {
      return res.status(401).json({
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        code: 'AUTHENTICATION_REQUIRED'
      });
    }

    if (!roles.includes(user.role)) {
      return res.status(403).json({
        error: `–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: ${roles.join(' –∏–ª–∏ ')}`,
        code: 'INSUFFICIENT_PERMISSIONS'
      });
    }

    next();
  };
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º —Ç–µ–Ω–∞–Ω—Ç–æ–º
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ —Å–≤–µ—Ä—Ö RLS –ø–æ–ª–∏—Ç–∏–∫
 */
export function requireTenantAccess(req, res, next) {
  const user = getCurrentUser(req);
  if (!user) {
    return res.status(401).json({
      error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      code: 'AUTHENTICATION_REQUIRED'
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tenant_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞
  const requestTenantId = req.params.tenantId || req.body.tenantId;
  if (requestTenantId && requestTenantId !== user.tenantId) {
    return res.status(403).json({
      error: '–î–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å–∞–º –¥—Ä—É–≥–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω',
      code: 'TENANT_ACCESS_DENIED'
    });
  }

  next();
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —É—Ç–∏–ª–∏—Ç
export default {
  tenantContextMiddleware,
  getCurrentUser,
  requireRole,
  requireTenantAccess,
  extractJwtToken,
  verifyJwtToken
};
