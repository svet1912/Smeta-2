import { query } from '../database.js';
import rateLimit from 'express-rate-limit';

// Rate limiting —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ª–∏–¥-—Ñ–æ—Ä–º—ã
export const leadRateLimit = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
  max: 3, // –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞—è–≤–∫–∏ —Å –æ–¥–Ω–æ–≥–æ IP –≤ —á–∞—Å
  standardHeaders: true,
  legacyHeaders: false,
  message: {
    error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å.',
    retryAfter: 3600
  },
  skip: (req) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    return req.ip === '::1' || req.ip === '127.0.0.1';
  }
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
const validateLeadData = (data) => {
  const errors = [];

  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  if (!data.name || data.name.trim().length < 2) {
    errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
  }

  if (!data.email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
    errors.push('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
  }

  if (!data.consent) {
    errors.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
  if (data.name && data.name.length > 100) {
    errors.push('–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)');
  }

  if (data.email && data.email.length > 254) {
    errors.push('Email —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π');
  }

  if (data.phone && data.phone.length > 20) {
    errors.push('–¢–µ–ª–µ—Ñ–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)');
  }

  if (data.company && data.company.length > 200) {
    errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)');
  }

  if (data.message && data.message.length > 1000) {
    errors.push('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö–∞–Ω–∏–ø–æ—Ç (—Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ)
  if (data.website) {
    errors.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
  }

  return errors;
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
const sendTelegramNotification = async (leadData) => {
  const { TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID } = process.env;

  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.log('üì¢ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
    return;
  }

  try {
    const envLabel = process.env.ENV_NAME || 'unknown';
    const message = `üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –ª–µ–Ω–¥–∏–Ω–≥–∞ SMETA360 [${envLabel}]

üë§ –ò–º—è: ${leadData.name}
üìß Email: ${leadData.email}
${leadData.phone ? `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${leadData.phone}` : ''}
${leadData.company ? `üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${leadData.company}` : ''}
${leadData.project_type ? `üèóÔ∏è –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: ${leadData.project_type}` : ''}
${leadData.budget ? `üí∞ –ë—é–¥–∂–µ—Ç: ${leadData.budget}` : ''}
${leadData.message ? `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${leadData.message}` : ''}

üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${leadData.page_path || '/'}
üìä UTM: ${leadData.utm_source || 'direct'} / ${leadData.utm_medium || 'none'} / ${leadData.utm_campaign || 'none'}
‚è∞ –í—Ä–µ–º—è: ${new Date(leadData.created_at).toLocaleString('ru-RU')}`;

    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      })
    });

    if (response.ok) {
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', await response.text());
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', error.message);
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞—è–≤–æ–∫
export const initializeLeadsTable = async () => {
  try {
    await query(`
      CREATE TABLE IF NOT EXISTS leads (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(254) NOT NULL,
        phone VARCHAR(20),
        company VARCHAR(200),
        project_type VARCHAR(50),
        budget VARCHAR(100),
        message TEXT,
        utm_source VARCHAR(100),
        utm_medium VARCHAR(100), 
        utm_campaign VARCHAR(100),
        page_path VARCHAR(500),
        env_name VARCHAR(20),
        ip_address INET,
        user_agent TEXT,
        consent BOOLEAN NOT NULL DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ email –∏ –≤—Ä–µ–º–µ–Ω–∏
    await query(`
      CREATE INDEX IF NOT EXISTS idx_leads_email_created 
      ON leads (email, created_at DESC)
    `);

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ leads –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã leads:', error);
  }
};

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
export const createLead = async (req, res) => {
  try {
    const leadData = {
      name: req.body.name?.trim(),
      email: req.body.email?.trim().toLowerCase(),
      phone: req.body.phone?.trim(),
      company: req.body.company?.trim(),
      project_type: req.body.project_type,
      budget: req.body.budget,
      message: req.body.message?.trim(),
      utm_source: req.body.utm_source,
      utm_medium: req.body.utm_medium,
      utm_campaign: req.body.utm_campaign,
      page_path: req.body.page_path,
      env_name: process.env.ENV_NAME || 'unknown',
      consent: req.body.consent,
      website: req.body.website // —Ö–∞–Ω–∏–ø–æ—Ç –ø–æ–ª–µ
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validationErrors = validateLeadData(leadData);
    if (validationErrors.length > 0) {
      return res.status(400).json({
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        details: validationErrors
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ—Ç –∂–µ email –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
    const recentLead = await query(
      `
      SELECT id FROM leads 
      WHERE email = $1 AND created_at > NOW() - INTERVAL '10 minutes'
      LIMIT 1
    `,
      [leadData.email]
    );

    if (recentLead.rows.length > 0) {
      return res.status(429).json({
        error: '–ó–∞—è–≤–∫–∞ —Å —ç—Ç–æ–≥–æ email —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ'
      });
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const result = await query(
      `
      INSERT INTO leads (
        name, email, phone, company, project_type, budget, message,
        utm_source, utm_medium, utm_campaign, page_path, env_name,
        ip_address, user_agent, consent
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
      RETURNING id, created_at
    `,
      [
        leadData.name,
        leadData.email,
        leadData.phone,
        leadData.company,
        leadData.project_type,
        leadData.budget,
        leadData.message,
        leadData.utm_source,
        leadData.utm_medium,
        leadData.utm_campaign,
        leadData.page_path,
        leadData.env_name,
        req.ip,
        req.get('User-Agent'),
        leadData.consent
      ]
    );

    const savedLead = result.rows[0];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    setImmediate(async () => {
      try {
        await sendTelegramNotification({
          ...leadData,
          id: savedLead.id,
          created_at: savedLead.created_at
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      }
    });

    console.log(`‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ID ${savedLead.id}, Email: ${leadData.email}`);

    res.status(201).json({
      success: true,
      id: savedLead.id,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
export const getLeads = async (req, res) => {
  try {
    const { limit = 50, offset = 0 } = req.query;

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    const leadsResult = await query(
      `
      SELECT 
        id,
        name,
        email,
        phone,
        company,
        project_type,
        budget,
        message,
        utm_source,
        utm_medium,
        utm_campaign,
        page_path,
        env_name,
        consent,
        created_at,
        updated_at
      FROM leads 
      ORDER BY created_at DESC
      LIMIT $1 OFFSET $2
    `,
      [limit, offset]
    );

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
    const countResult = await query(`SELECT COUNT(*) as total FROM leads`);
    const total = parseInt(countResult.rows[0].total);

    res.json({
      success: true,
      data: leadsResult.rows,
      pagination: {
        total,
        limit: parseInt(limit),
        offset: parseInt(offset),
        hasMore: parseInt(offset) + parseInt(limit) < total
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫',
      code: 'LEADS_FETCH_ERROR'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞—è–≤–∫–∞–º (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
export const getLeadsStats = async (req, res) => {
  try {
    const { default: queryOptimizer } = await import('../services/queryOptimizer.js');
    const result = await queryOptimizer.getLeadsStatsOptimized();
    res.json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// Default export –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–æ—É—Ç–µ—Ä–æ–º
export default {
  createLead,
  getLeads,
  getLeadsStats,
  leadRateLimit,
  initializeLeadsTable
};
