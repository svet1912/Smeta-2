/**
 * API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —Ç–µ–Ω–∞–Ω—Ç–∞–º–∏
 * –®–∞–≥ 9.3 ‚Äî –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–Ω–∞–Ω—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
 */
import bcrypt from 'bcrypt';
import { query } from '../database.js';
import tokenService from '../services/tokenService.js';

/**
 * –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * POST /auth/login
 */
export async function login(req, res) {
  try {
    const { email, password } = req.body;
    
    if (!email || !password) {
      return res.status(400).json({
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è email –∏ –ø–∞—Ä–æ–ª—å',
        code: 'MISSING_CREDENTIALS'
      });
    }

    // 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const userResult = await query(`
      SELECT id, email, password_hash, firstname, lastname, is_active
      FROM auth_users
      WHERE email = $1;
    `, [email.toLowerCase()]);

    if (userResult.rows.length === 0) {
      return res.status(401).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        code: 'INVALID_CREDENTIALS'
      });
    }

    const user = userResult.rows[0];

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user.is_active) {
      return res.status(401).json({
        error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
        code: 'ACCOUNT_DISABLED'
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const passwordValid = await bcrypt.compare(password, user.password_hash);
    if (!passwordValid) {
      return res.status(401).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        code: 'INVALID_CREDENTIALS'
      });
    }

    // 4. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–Ω–∞–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const tenantResult = await query(`
      SELECT ut.tenant_id, t.name as tenant_name
      FROM user_tenants ut
      JOIN tenants t ON t.id = ut.tenant_id
      WHERE ut.user_id = $1 AND ut.is_current = true
      LIMIT 1;
    `, [user.id]);

    if (tenantResult.rows.length === 0) {
      return res.status(401).json({
        error: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞',
        code: 'NO_ACTIVE_TENANT'
      });
    }

    const tenantInfo = tenantResult.rows[0];

    // 5. –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const userWithRole = { ...user, role: 'estimator' }; // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å
    const accessToken = tokenService.createAccessToken(userWithRole, tenantInfo.tenant_id);
    const refreshToken = tokenService.createRefreshToken(user.id);

    // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω
    const userAgent = req.headers['user-agent'] || 'Unknown';
    const ipAddress = req.ip || req.connection.remoteAddress || 'Unknown';
    
    await tokenService.saveRefreshToken(user.id, refreshToken, userAgent, ipAddress);

    // 7. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await query(`
      UPDATE auth_users 
      SET last_login = CURRENT_TIMESTAMP 
      WHERE id = $1;
    `, [user.id]);

    console.log(`üîê –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}, tenant: ${tenantInfo.tenant_name}`);

    res.json({
      success: true,
      accessToken,
      refreshToken,
      user: {
        id: user.id,
        email: user.email,
        role: 'estimator', // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å
        tenantId: tenantInfo.tenant_id,
        tenantName: tenantInfo.tenant_name
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ refresh —Ç–æ–∫–µ–Ω
 * POST /auth/refresh
 */
export async function refreshToken(req, res) {
  try {
    const { refreshToken } = req.body;
    
    if (!refreshToken) {
      return res.status(400).json({
        error: 'Refresh —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        code: 'MISSING_REFRESH_TOKEN'
      });
    }

    // –†–æ—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const userAgent = req.headers['user-agent'] || 'Unknown';
    const ipAddress = req.ip || req.connection.remoteAddress || 'Unknown';
    
    const tokens = await tokenService.rotateRefreshToken(refreshToken, userAgent, ipAddress);
    
    if (!tokens) {
      return res.status(401).json({
        error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh —Ç–æ–∫–µ–Ω',
        code: 'INVALID_REFRESH_TOKEN'
      });
    }

    console.log(`üîÑ Refresh —Ç–æ–∫–µ–Ω: user=${tokens.user.id.substring(0,8)}`);

    res.json({
      success: true,
      accessToken: tokens.accessToken,
      refreshToken: tokens.refreshToken,
      user: tokens.user
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
}

/**
 * –õ–æ–≥–∞—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * POST /auth/logout
 */
export async function logout(req, res) {
  try {
    const { refreshToken } = req.body;
    
    if (refreshToken) {
      await tokenService.revokeRefreshToken(refreshToken);
    }

    console.log('üîê –õ–æ–≥–∞—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∞—É—Ç–µ:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–Ω–∞–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /auth/tenants
 */
export async function getUserTenants(req, res) {
  try {
    const user = req.user; // –ò–∑ JWT middleware
    
    const result = await query(`
      SELECT 
        ut.tenant_id,
        ut.is_current,
        t.name,
        t.display_name,
        t.created_at,
        ut.role as user_role
      FROM user_tenants ut
      JOIN tenants t ON t.id = ut.tenant_id
      WHERE ut.user_id = $1 AND ut.is_active = true
      ORDER BY ut.is_current DESC, t.name ASC;
    `, [user.id]);

    const tenants = result.rows.map(row => ({
      id: row.tenant_id,
      name: row.name,
      displayName: row.display_name,
      isCurrent: row.is_current,
      userRole: row.user_role,
      createdAt: row.created_at
    }));

    res.json({
      success: true,
      tenants
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–Ω–∞–Ω—Ç–æ–≤:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–µ–Ω–∞–Ω—Ç
 * POST /auth/switch-tenant
 */
export async function switchTenant(req, res) {
  try {
    const user = req.user; // –ò–∑ JWT middleware
    const { tenantId } = req.body;
    
    if (!tenantId) {
      return res.status(400).json({
        error: 'ID —Ç–µ–Ω–∞–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        code: 'MISSING_TENANT_ID'
      });
    }

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–Ω–∞–Ω—Ç—É
    const tenantResult = await query(`
      SELECT ut.tenant_id, t.name, t.display_name, ut.role
      FROM user_tenants ut
      JOIN tenants t ON t.id = ut.tenant_id
      WHERE ut.user_id = $1 AND ut.tenant_id = $2 AND ut.is_active = true;
    `, [user.id, tenantId]);

    if (tenantResult.rows.length === 0) {
      return res.status(403).json({
        error: '–î–æ—Å—Ç—É–ø –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–µ–Ω–∞–Ω—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω',
        code: 'TENANT_ACCESS_DENIED'
      });
    }

    const tenantInfo = tenantResult.rows[0];

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–Ω–∞–Ω—Ç
    await query('BEGIN');
    
    try {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º is_current –¥–ª—è –≤—Å–µ—Ö —Ç–µ–Ω–∞–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await query(`
        UPDATE user_tenants 
        SET is_current = false 
        WHERE user_id = $1;
      `, [user.id]);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π —Ç–µ–Ω–∞–Ω—Ç
      await query(`
        UPDATE user_tenants 
        SET is_current = true 
        WHERE user_id = $1 AND tenant_id = $2;
      `, [user.id, tenantId]);

      await query('COMMIT');
    } catch (error) {
      await query('ROLLBACK');
      throw error;
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await query(`
      SELECT id, email, firstname, lastname
      FROM auth_users
      WHERE id = $1;
    `, [user.id]);

    const userData = userResult.rows[0];

    // 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π access —Ç–æ–∫–µ–Ω —Å –Ω–æ–≤—ã–º —Ç–µ–Ω–∞–Ω—Ç–æ–º
    const userDataWithRole = { ...userData, role: 'estimator' }; // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å
    const accessToken = tokenService.createAccessToken(userDataWithRole, tenantId);

    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–Ω–∞–Ω—Ç–∞: user=${user.id.substring(0,8)}, tenant=${tenantInfo.name}`);

    res.json({
      success: true,
      accessToken,
      user: {
        id: userData.id,
        email: userData.email,
        role: 'estimator', // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å
        tenantId: tenantId,
        tenantName: tenantInfo.name,
        tenantDisplayName: tenantInfo.display_name,
        tenantRole: tenantInfo.role
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–Ω–∞–Ω—Ç–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * GET /auth/me
 */
export async function getCurrentUserInfo(req, res) {
  try {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    res.json({
      success: true,
      user: {
        id: 6,
        email: 'kiy026@yandex.ru',
        role: 'estimator',
        tenantId: 'cd5ffb0f-8616-4227-a056-4f729ed6933c',
        tenantName: 'Test Company RLS'
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      code: 'INTERNAL_ERROR'
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
export default {
  login,
  refreshToken,
  logout,
  getUserTenants,
  switchTenant,
  getCurrentUserInfo
};
