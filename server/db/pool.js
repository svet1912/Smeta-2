import { Pool } from 'pg';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  max: 20, // –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  idleTimeoutMillis: 30000, // 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–µ—Ä–∂–∏–º
  connectionTimeoutMillis: 2000, // –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞ 2—Å ‚Üí –æ—à–∏–±–∫–∞
  keepAlive: true, // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—É–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
pool.on('connect', (client) => {
  console.log('üîó –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err, client) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', err);
});

pool.on('acquire', (client) => {
  console.log('üì• –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –ø—É–ª–∞');
});

pool.on('release', (client) => {
  console.log('üì§ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –ø—É–ª');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º
export async function executeQuery(text, params = []) {
  const start = Date.now();
  const client = await pool.connect();

  try {
    const result = await client.query(text, params);
    const duration = Date.now() - start;

    console.log('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—É–ª:', {
      text: text.substring(0, 50) + (text.length > 50 ? '...' : ''),
      duration: `${duration}ms`,
      rows: result.rowCount
    });

    return result;
  } catch (error) {
    const duration = Date.now() - start;
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—É–ª:', {
      text: text.substring(0, 50) + (text.length > 50 ? '...' : ''),
      duration: `${duration}ms`,
      error: error.message
    });
    throw error;
  } finally {
    client.release();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—É–ª–∞
export function getPoolStats() {
  return {
    totalCount: pool.totalCount,
    idleCount: pool.idleCount,
    waitingCount: pool.waitingCount
  };
}

export default pool;
