// MIME Type Fix –¥–ª—è JSX –º–æ–¥—É–ª–µ–π –≤ production
// –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å "text/jsx" MIME —Ç–∏–ø–æ–º

console.log('üîß MIME Type Fix –¥–ª—è JSX –º–æ–¥—É–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è...');

// 1. –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
const originalImport = window.__import || (url => import(url));
window.__import = async function(url) {
  try {
    console.log('üîß Dynamic import intercepted:', url);
    
    // –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç data:text/jsx, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if (url.includes('data:text/jsx')) {
      console.log('üõ†Ô∏è Fixing JSX MIME type in data URL');
      // –ó–∞–º–µ–Ω—è–µ–º MIME —Ç–∏–ø –Ω–∞ application/javascript
      url = url.replace('data:text/jsx', 'data:application/javascript');
    }
    
    return await originalImport.call(this, url);
  } catch (error) {
    if (error.message && error.message.includes('MIME type')) {
      console.log('üõ†Ô∏è MIME type error caught, attempting alternative import');
      
      // –ï—Å–ª–∏ —ç—Ç–æ data: URL —Å JSX, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
      if (url.includes('data:') && url.includes('jsx')) {
        const correctedUrl = url.replace(/data:text\/jsx/g, 'data:application/javascript');
        try {
          return await originalImport.call(this, correctedUrl);
        } catch (secondError) {
          console.warn('Failed to import with corrected MIME type:', secondError);
        }
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –º–æ–¥—É–ª—å
      try {
        const response = await fetch(url);
        const text = await response.text();
        const blob = new Blob([text], { type: 'application/javascript' });
        const objectUrl = URL.createObjectURL(blob);
        return await originalImport.call(this, objectUrl);
      } catch (fetchError) {
        console.warn('Failed to fetch and re-import module:', fetchError);
      }
    }
    
    throw error;
  }
};

// 2. –ü–∞—Ç—á–∏–º createElement –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSX –≤ runtime
const originalCreateElement = document.createElement;
document.createElement = function(tagName, options) {
  const element = originalCreateElement.call(this, tagName, options);
  
  // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è script —ç–ª–µ–º–µ–Ω—Ç —Å JSX —Ç–∏–ø–æ–º, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
  if (tagName.toLowerCase() === 'script') {
    const originalSetAttribute = element.setAttribute;
    element.setAttribute = function(name, value) {
      if (name === 'type' && value === 'text/jsx') {
        console.log('üõ†Ô∏è Fixing script type from text/jsx to module');
        value = 'module';
      }
      return originalSetAttribute.call(this, name, value);
    };
  }
  
  return element;
};

// 3. –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è MIME —Ç–∏–ø–æ–≤
const originalFetch = window.fetch;
window.fetch = async function(url, options) {
  try {
    const response = await originalFetch.call(this, url, options);
    
    // –ï—Å–ª–∏ response —Å–æ–¥–µ—Ä–∂–∏—Ç JSX MIME —Ç–∏–ø, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (response.headers.get('content-type')?.includes('text/jsx')) {
      console.log('üõ†Ô∏è Fixing JSX MIME type in response headers');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π response —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME —Ç–∏–ø–æ–º
      const correctedResponse = new Response(response.body, {
        status: response.status,
        statusText: response.statusText,
        headers: {
          ...Object.fromEntries(response.headers),
          'content-type': 'application/javascript; charset=utf-8'
        }
      });
      
      return correctedResponse;
    }
    
    return response;
  } catch (error) {
    throw error;
  }
};

console.log('‚úÖ MIME Type Fix –¥–ª—è JSX –º–æ–¥—É–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');