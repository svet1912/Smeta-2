import { useState, useEffect, useCallback } from 'react';
import MainCard from 'components/MainCard';
import {
  Typography,
  Table,
  Button,
  Space,
  Tag,
  Modal,
  Form,
  Input,
  Select,
  InputNumber,
  message,
  Card,
  Row,
  Col,
  Statistic,
  Divider,
  Popconfirm
} from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined, EyeOutlined, SearchOutlined, LinkOutlined } from '@ant-design/icons';

const { Text } = Typography;
const { Option } = Select;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API URL
const getApiBaseUrl = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (import.meta.env.VITE_API_BASE_URL) {
    return import.meta.env.VITE_API_BASE_URL;
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è GitHub Codespaces
  const currentHost = window.location.hostname;
  if (currentHost.includes('.app.github.dev')) {
    // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç 3000 –Ω–∞ 3001 –≤ GitHub Codespaces URL
    return '/api-proxy';
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Vite dev server
  }

  // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  return 'http://localhost:3001/api';
};

const API_BASE_URL = getApiBaseUrl();

// ==============================|| –°–ü–†–ê–í–û–ß–ù–ò–ö –†–ê–ë–û–¢ ||============================== //

export default function WorksPage() {
  const [works, setWorks] = useState([]);
  const [phases, setPhases] = useState([]);
  const [materials, setMaterials] = useState([]);
  const [workMaterials, setWorkMaterials] = useState([]);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [materialModalVisible, setMaterialModalVisible] = useState(false);
  const [modalMode, setModalMode] = useState('create'); // 'create', 'edit', 'view'
  const [selectedWork, setSelectedWork] = useState(null);
  const [form] = Form.useForm();
  const [materialForm] = Form.useForm();
  const [searchText, setSearchText] = useState('');
  const [filteredWorks, setFilteredWorks] = useState([]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ID (w.1, w.2, w.10 –∏ —Ç.–¥.)
  const naturalSort = (arr) => {
    return arr.sort((a, b) => {
      const aId = a.id || '';
      const bId = b.id || '';

      // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ (—Ç–µ–∫—Å—Ç –∏ —á–∏—Å–ª–∞)
      const aParts = aId.split(/(\d+)/);
      const bParts = bId.split(/(\d+)/);

      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {
        const aPart = aParts[i] || '';
        const bPart = bParts[i] || '';

        // –ï—Å–ª–∏ –æ–±–µ —á–∞—Å—Ç–∏ —á–∏—Å–ª–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–∞
        if (!isNaN(aPart) && !isNaN(bPart)) {
          const diff = parseInt(aPart, 10) - parseInt(bPart, 10);
          if (diff !== 0) return diff;
        } else {
          // –ò–Ω–∞—á–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
          const comparison = aPart.localeCompare(bPart);
          if (comparison !== 0) return comparison;
        }
      }
      return 0;
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç –ø–æ —Å—Ç–∞–¥–∏—è–º –∏ –ø–æ–¥—Å—Ç–∞–¥–∏—è–º
  const groupWorksByStages = useCallback((works) => {
    const grouped = {};

    works.forEach((work) => {
      const stageName = work.stage_name || '–ë–µ–∑ —Å—Ç–∞–¥–∏–∏';
      const substageName = work.substage_name || null;

      if (!grouped[stageName]) {
        grouped[stageName] = {
          stage: stageName,
          substages: {}
        };
      }

      if (substageName) {
        if (!grouped[stageName].substages[substageName]) {
          grouped[stageName].substages[substageName] = {
            substage: substageName,
            works: []
          };
        }
        grouped[stageName].substages[substageName].works.push(work);
      } else {
        if (!grouped[stageName].substages['direct']) {
          grouped[stageName].substages['direct'] = {
            substage: null,
            works: []
          };
        }
        grouped[stageName].substages['direct'].works.push(work);
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    Object.values(grouped).forEach((stageGroup) => {
      Object.values(stageGroup.substages).forEach((substageGroup) => {
        substageGroup.works = naturalSort(substageGroup.works);
      });
    });

    return grouped;
  }, []);

  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const createDisplayItems = useCallback(
    (works) => {
      const grouped = groupWorksByStages(works);
      const displayItems = [];

      Object.entries(grouped).forEach(([stageName, stageGroup]) => {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞–¥–∏–∏
        displayItems.push({
          key: `stage-${stageName}`,
          type: 'stage',
          name: stageName,
          isHeader: true
        });

        Object.entries(stageGroup.substages).forEach(([substageKey, substageGroup]) => {
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å—Ç–∞–¥–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
          if (substageGroup.substage) {
            displayItems.push({
              key: `substage-${substageGroup.substage}`,
              type: 'substage',
              name: substageGroup.substage,
              isHeader: true
            });
          }

          // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—ã
          substageGroup.works.forEach((work) => {
            displayItems.push({
              ...work,
              type: 'work',
              isHeader: false
            });
          });
        });
      });

      return displayItems;
    },
    [groupWorksByStages]
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç
  const handleSearch = useCallback(
    (value) => {
      setSearchText(value);
      let filtered = works.filter(
        (work) =>
          work.name.toLowerCase().includes(value.toLowerCase()) ||
          work.phase_name?.toLowerCase().includes(value.toLowerCase()) ||
          work.stage_name?.toLowerCase().includes(value.toLowerCase()) ||
          work.id.toString().includes(value)
      );

      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
      const displayItems = createDisplayItems(filtered);
      setFilteredWorks(displayItems);
    },
    [works, createDisplayItems]
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
  useEffect(() => {
    handleSearch(searchText);
  }, [works, handleSearch, searchText]);

  const loadWorks = useCallback(async () => {
    setLoading(true);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–∞–±–æ—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      const response = await fetch(`${API_BASE_URL}/works?limit=2000&offset=0`);
      if (response.ok) {
        const result = await response.json();
        console.log('üî® API –æ—Ç–≤–µ—Ç works:', result);

        let worksData = [];
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {data: Array, pagination: {...}}
        if (result.data && Array.isArray(result.data)) {
          worksData = result.data;
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.data.length} —Ä–∞–±–æ—Ç`);
        } else if (Array.isArray(result)) {
          worksData = result;
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.length} —Ä–∞–±–æ—Ç`);
        } else {
          console.warn('‚ö†Ô∏è /api/works –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:', result);
          worksData = [];
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        const sortedWorks = naturalSort([...worksData]);
        setWorks(sortedWorks);
      } else {
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } finally {
      setLoading(false);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    loadWorks();
    loadPhases();
    loadMaterials();
  }, [loadWorks]);

  const loadPhases = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–∑—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      const response = await fetch(`${API_BASE_URL}/phases?limit=2000&offset=0`);
      if (response.ok) {
        const result = await response.json();
        console.log('üìã API –æ—Ç–≤–µ—Ç phases:', result);

        // API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å {data: Array} –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ Array
        if (result.data && Array.isArray(result.data)) {
          setPhases(result.data);
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.data.length} —Ñ–∞–∑`);
        } else if (Array.isArray(result)) {
          setPhases(result);
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.length} —Ñ–∞–∑`);
        } else {
          console.warn('‚ö†Ô∏è /api/phases –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:', result);
          setPhases([]);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–∑:', error);
    }
  };

  const loadMaterials = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      const response = await fetch(`${API_BASE_URL}/materials?limit=2000&offset=0`);
      if (response.ok) {
        const result = await response.json();
        console.log('üß± API –æ—Ç–≤–µ—Ç materials:', result);

        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {data: Array, pagination: {...}}
        if (result.data && Array.isArray(result.data)) {
          setMaterials(result.data);
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.data.length} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`);
        } else if (Array.isArray(result)) {
          setMaterials(result);
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.length} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`);
        } else {
          console.warn('‚ö†Ô∏è /api/materials –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:', result);
          setMaterials([]);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
    }
  };

  const loadWorkMaterials = async (workId) => {
    try {
      const response = await fetch(`${API_BASE_URL}/works/${workId}/materials`);
      if (response.ok) {
        const data = await response.json();
        if (Array.isArray(data)) {
          setWorkMaterials(data);
        } else {
          setWorkMaterials([]);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ä–∞–±–æ—Ç—ã:', error);
      setWorkMaterials([]);
    }
  };

  const handleCreate = () => {
    setModalMode('create');
    setSelectedWork(null);
    form.resetFields();
    setModalVisible(true);
  };

  const handleEdit = (record) => {
    setModalMode('edit');
    setSelectedWork(record);
    form.setFieldsValue(record);
    setModalVisible(true);
  };

  const handleView = (record) => {
    setModalMode('view');
    setSelectedWork(record);
    form.setFieldsValue(record);
    setModalVisible(true);
  };

  const handleSave = async (values) => {
    try {
      const response = await fetch(`${API_BASE_URL}/works`, {
        method: modalMode === 'create' ? 'POST' : 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(values)
      });

      if (response.ok) {
        message.success(modalMode === 'create' ? '–†–∞–±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞' : '–†–∞–±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        setModalVisible(false);
        loadWorks();
      } else {
        message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
  };

  const handleManageMaterials = (work) => {
    setSelectedWork(work);
    loadWorkMaterials(work.id);
    setMaterialModalVisible(true);
  };

  const handleAddMaterial = async (values) => {
    try {
      const response = await fetch(`${API_BASE_URL}/works/${selectedWork.id}/materials`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(values)
      });

      if (response.ok) {
        message.success('–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ä–∞–±–æ—Ç–µ');
        materialForm.resetFields();
        loadWorkMaterials(selectedWork.id);
      } else {
        message.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
  };

  const handleRemoveMaterial = async (materialId) => {
    try {
      const response = await fetch(`${API_BASE_URL}/works/${selectedWork.id}/materials/${materialId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        message.success('–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞–±–æ—Ç—ã');
        loadWorkMaterials(selectedWork.id);
      } else {
        message.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
  };

  const columns = [
    {
      title: 'ID —Ä–∞–±–æ—Ç—ã',
      dataIndex: 'id',
      key: 'id',
      width: 100,
      render: (text, record) => {
        if (record.isHeader) {
          return null;
        }
        return text;
      }
    },
    {
      title: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã',
      dataIndex: 'name',
      key: 'name',
      width: 300,
      render: (text, record) => {
        if (record.type === 'stage') {
          return <div style={{ fontWeight: 'bold', fontSize: '16px', color: '#1890ff', padding: '8px 0' }}>üìÅ {text}</div>;
        }
        if (record.type === 'substage') {
          return (
            <div style={{ fontWeight: '600', fontSize: '14px', color: '#52c41a', padding: '4px 0', paddingLeft: '20px' }}>üìÇ {text}</div>
          );
        }
        return <Text strong>{text}</Text>;
      }
    },
    {
      title: '–§–∞–∑–∞',
      dataIndex: 'phase_name',
      key: 'phase_name',
      width: 150,
      render: (text, record) => {
        if (record.isHeader) return null;
        return text ? <Tag color="blue">{text}</Tag> : '-';
      }
    },
    {
      title: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è',
      dataIndex: 'unit',
      key: 'unit',
      width: 100,
      render: (text, record) => {
        if (record.isHeader) return null;
        return text;
      }
    },
    {
      title: '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É',
      dataIndex: 'unit_price',
      key: 'unit_price',
      width: 120,
      render: (value, record) => {
        if (record.isHeader) return null;
        return value ? `${parseFloat(value).toFixed(2)} ‚ÇΩ` : '-';
      }
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      width: 200,
      render: (_, record) => {
        if (record.isHeader) return null;
        return (
          <Space>
            <Button type="link" icon={<EyeOutlined />} onClick={() => handleView(record)} size="small" />
            <Button type="link" icon={<EditOutlined />} onClick={() => handleEdit(record)} size="small" />
            <Button
              type="link"
              icon={<LinkOutlined />}
              onClick={() => handleManageMaterials(record)}
              size="small"
              title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏"
            />
            <Button type="link" icon={<DeleteOutlined />} danger size="small" />
          </Space>
        );
      }
    }
  ];

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const actualWorks = filteredWorks.filter((item) => item.type === 'work');
  const stats = {
    total: actualWorks.length,
    phases: [...new Set(actualWorks.filter((w) => w.phase_name).map((w) => w.phase_name))].length,
    avgPrice:
      actualWorks.length > 0
        ? actualWorks.filter((w) => w.unit_price).reduce((sum, w) => sum + w.unit_price, 0) / actualWorks.filter((w) => w.unit_price).length
        : 0
  };

  return (
    <>
      <MainCard title="–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <Row gutter={16} style={{ marginBottom: 24 }}>
          <Col span={6}>
            <Card>
              <Statistic title="–í—Å–µ–≥–æ —Ä–∞–±–æ—Ç" value={stats.total} valueStyle={{ color: '#1890ff' }} />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic title="–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–∑" value={stats.phases} valueStyle={{ color: '#52c41a' }} />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic title="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞" value={stats.avgPrice} precision={2} suffix="‚ÇΩ" valueStyle={{ color: '#faad14' }} />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic title="–°–∏—Å—Ç–µ–º–∞" value="Works Ref 2.0" valueStyle={{ color: '#722ed1' }} />
            </Card>
          </Col>
        </Row>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Space>
            <Button type="primary" icon={<PlusOutlined />} onClick={handleCreate}>
              –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É
            </Button>
            <Button onClick={loadWorks}>–û–±–Ω–æ–≤–∏—Ç—å</Button>
          </Space>

          <Input.Search
            placeholder="–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç..."
            allowClear
            style={{ width: 300 }}
            prefix={<SearchOutlined />}
            value={searchText}
            onChange={(e) => handleSearch(e.target.value)}
            onSearch={handleSearch}
          />
        </div>

        {/* –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–±–æ—Ç */}
        <Table
          columns={columns}
          dataSource={filteredWorks}
          rowKey={(record) => record.key || record.id}
          loading={loading}
          pagination={{
            pageSize: 50,
            showSizeChanger: true,
            showTotal: (total, range) => `${range[0]}-${range[1]} –∏–∑ ${total} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`
          }}
          scroll={{ x: 900 }}
          rowClassName={(record) => {
            if (record.type === 'stage') return 'stage-row';
            if (record.type === 'substage') return 'substage-row';
            return 'work-row';
          }}
          onRow={(record) => {
            if (record.isHeader) {
              return {
                style: {
                  backgroundColor: record.type === 'stage' ? '#f0f8ff' : '#f6ffed',
                  cursor: 'default',
                  fontWeight: record.type === 'stage' ? 'bold' : '600'
                }
              };
            }
            return {
              style: {
                transition: 'background-color 0.2s'
              },
              onMouseEnter: (e) => {
                e.target.parentElement.style.backgroundColor = '#fafafa';
              },
              onMouseLeave: (e) => {
                e.target.parentElement.style.backgroundColor = '';
              }
            };
          }}
        />

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <Modal
          title={modalMode === 'create' ? '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã' : modalMode === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã' : '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–±–æ—Ç—ã'}
          open={modalVisible}
          onCancel={() => setModalVisible(false)}
          footer={
            modalMode === 'view'
              ? [
                  <Button key="close" onClick={() => setModalVisible(false)}>
                    –ó–∞–∫—Ä—ã—Ç—å
                  </Button>
                ]
              : [
                  <Button key="cancel" onClick={() => setModalVisible(false)}>
                    –û—Ç–º–µ–Ω–∞
                  </Button>,
                  <Button key="submit" type="primary" onClick={() => form.submit()}>
                    {modalMode === 'create' ? '–°–æ–∑–¥–∞—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                  </Button>
                ]
          }
          width={600}
        >
          <Form form={form} layout="vertical" onFinish={handleSave} disabled={modalMode === 'view'}>
            <Form.Item name="id" label="ID —Ä–∞–±–æ—Ç—ã" rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞–±–æ—Ç—ã' }]}>
              <Input placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: w.001" />
            </Form.Item>

            <Form.Item name="name" label="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã" rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã' }]}>
              <Input placeholder="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã" />
            </Form.Item>

            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="unit" label="–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è">
                  <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É">
                    <Option value="–º2">–º¬≤</Option>
                    <Option value="–º3">–º¬≥</Option>
                    <Option value="–º">–º</Option>
                    <Option value="—à—Ç">—à—Ç</Option>
                    <Option value="—Ç">—Ç</Option>
                    <Option value="–∫–≥">–∫–≥</Option>
                  </Select>
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="unit_price" label="–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚ÇΩ)">
                  <InputNumber placeholder="0.00" min={0} precision={2} style={{ width: '100%' }} />
                </Form.Item>
              </Col>
            </Row>

            <Form.Item name="phase_id" label="–§–∞–∑–∞">
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∑—É" allowClear>
                {phases.map((phase) => (
                  <Option key={phase.id} value={phase.id}>
                    {phase.name}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Form>
        </Modal>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —Ä–∞–±–æ—Ç—ã */}
        <Modal
          title={`–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Ä–∞–±–æ—Ç—ã: ${selectedWork?.name || ''}`}
          open={materialModalVisible}
          onCancel={() => setMaterialModalVisible(false)}
          width={800}
          footer={[
            <Button key="close" onClick={() => setMaterialModalVisible(false)}>
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
          ]}
        >
          <div style={{ marginBottom: 16 }}>
            <Text strong>–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∫ —Ä–∞–±–æ—Ç–µ</Text>
            <Form form={materialForm} layout="inline" onFinish={handleAddMaterial} style={{ marginTop: 8 }}>
              <Form.Item name="material_id" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª' }]}>
                <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª" style={{ width: 200 }}>
                  {materials.map((material) => (
                    <Option key={material.id} value={material.id}>
                      {material.name} ({material.unit_price ? `${material.unit_price} ‚ÇΩ/${material.unit}` : '—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'})
                    </Option>
                  ))}
                </Select>
              </Form.Item>
              <Form.Item name="consumption_per_work_unit" rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥' }]}>
                <InputNumber placeholder="–†–∞—Å—Ö–æ–¥ –Ω–∞ –µ–¥. —Ä–∞–±–æ—Ç—ã" min={0} precision={6} style={{ width: 150 }} />
              </Form.Item>
              <Form.Item name="waste_coeff" initialValue={1.0}>
                <InputNumber placeholder="–ö–æ—ç—Ñ. –æ—Ç—Ö–æ–¥–æ–≤" min={0} step={0.1} precision={3} style={{ width: 120 }} />
              </Form.Item>
              <Form.Item>
                <Button type="primary" htmlType="submit">
                  –î–æ–±–∞–≤–∏—Ç—å
                </Button>
              </Form.Item>
            </Form>
          </div>

          <Divider />

          <Table
            columns={[
              {
                title: '–ú–∞—Ç–µ—Ä–∏–∞–ª',
                dataIndex: 'material_name',
                key: 'material_name',
                width: 200
              },
              {
                title: '–†–∞—Å—Ö–æ–¥ –Ω–∞ –µ–¥.',
                dataIndex: 'consumption_per_work_unit',
                key: 'consumption_per_work_unit',
                width: 120,
                render: (value) => (value ? parseFloat(value).toFixed(6) : '-')
              },
              {
                title: '–ö–æ—ç—Ñ. –æ—Ç—Ö–æ–¥–æ–≤',
                dataIndex: 'waste_coeff',
                key: 'waste_coeff',
                width: 100,
                render: (value) => (value ? parseFloat(value).toFixed(3) : '1.000')
              },
              {
                title: '–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥',
                dataIndex: 'total_consumption',
                key: 'total_consumption',
                width: 120,
                render: (value) => (value ? parseFloat(value).toFixed(6) : '-')
              },
              {
                title: '–°—Ç–æ–∏–º–æ—Å—Ç—å',
                dataIndex: 'material_cost_per_work_unit',
                key: 'material_cost_per_work_unit',
                width: 120,
                render: (value) => (value ? `${parseFloat(value).toFixed(2)} ‚ÇΩ` : '-')
              },
              {
                title: '–î–µ–π—Å—Ç–≤–∏—è',
                key: 'actions',
                width: 80,
                render: (_, record) => (
                  <Popconfirm
                    title="–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ —Ä–∞–±–æ—Ç—ã?"
                    onConfirm={() => handleRemoveMaterial(record.material_id)}
                    okText="–î–∞"
                    cancelText="–ù–µ—Ç"
                  >
                    <Button type="link" icon={<DeleteOutlined />} danger size="small" />
                  </Popconfirm>
                )
              }
            ]}
            dataSource={workMaterials}
            rowKey="material_id"
            pagination={false}
            size="small"
            scroll={{ x: 600 }}
          />
        </Modal>
      </MainCard>
    </>
  );
}
