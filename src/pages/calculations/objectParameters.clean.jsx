import { useState, useEffect, useCallback } from 'react';
import { Card, Table, Input, Button, notification, Space, Spin } from 'antd';
import { SaveOutlined, PlusOutlined, DeleteOutlined, LoadingOutlined, SettingOutlined } from '@ant-design/icons';
import { getAuthToken } from '../../api/auth';

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–µ–ª–æ—á–µ–∫ —É input[type="number"]
const hideSpinnerStyles = `
  .ant-input[type="number"] {
    -webkit-appearance: textfield;
    -moz-appearance: textfield;
  }
  
  .ant-input[type="number"]::-webkit-outer-spin-button,
  .ant-input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  .ant-input[type="number"]::-moz-number-spin-box {
    -moz-appearance: none;
  }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head
if (typeof document !== 'undefined') {
  const styleElement = document.createElement('style');
  styleElement.textContent = hideSpinnerStyles;
  document.head.appendChild(styleElement);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
const safeEval = (expression) => {
  try {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    const cleanExpression = expression.toString().replace(/\s/g, '');

    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ, –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    if (!/^[0-9+\-*/.(),]+$/.test(cleanExpression)) {
      return null;
    }

    // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    const normalizedExpression = cleanExpression.replace(/,/g, '.');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Function constructor –≤–º–µ—Å—Ç–æ eval –¥–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const result = new Function('return ' + normalizedExpression)();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —ç—Ç–æ —á–∏—Å–ª–æ
    if (typeof result === 'number' && !isNaN(result) && isFinite(result)) {
      return Math.round(result * 100) / 100; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    }

    return null;
  } catch {
    return null;
  }
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
const CalculatorInput = ({ value, onChange, placeholder, ...props }) => {
  const [displayValue, setDisplayValue] = useState(value?.toString() || '');
  const [isEditing, setIsEditing] = useState(false);

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ value –∏–∑–≤–Ω–µ
  useEffect(() => {
    if (!isEditing) {
      setDisplayValue(value?.toString() || '');
    }
  }, [value, isEditing]);

  const handleFocus = () => {
    setIsEditing(true);
  };

  const handleBlur = () => {
    setIsEditing(false);

    if (displayValue.trim() === '') {
      onChange(0);
      setDisplayValue('0');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    const hasOperators = /[+\-*/]/.test(displayValue);

    if (hasOperators) {
      const result = safeEval(displayValue);
      if (result !== null) {
        onChange(result);
        setDisplayValue(result.toString());
      } else {
        // –ï—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        setDisplayValue(value?.toString() || '0');
      }
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –ø–∞—Ä—Å–∏–º –µ–≥–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
      const numValue = parseFloat(displayValue.replace(',', '.')) || 0;
      onChange(numValue);
      setDisplayValue(numValue.toString());
    }
  };

  const handleChange = (e) => {
    setDisplayValue(e.target.value);
  };

  const handleKeyDown = (e) => {
    // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
    if (e.key === 'Enter') {
      e.target.blur(); // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç handleBlur
    }
  };

  return (
    <Input
      {...props}
      value={displayValue}
      onChange={handleChange}
      onFocus={handleFocus}
      onBlur={handleBlur}
      onKeyDown={handleKeyDown}
      placeholder={placeholder}
      title="–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: 2+3, 10*1.5, 20/4 –∏ —Ç.–¥. –ù–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ —Ñ–æ–∫—É—Å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
    />
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API URL
const getApiBaseUrl = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (import.meta.env.VITE_API_BASE_URL) {
    return import.meta.env.VITE_API_BASE_URL;
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è GitHub Codespaces
  const currentHost = window.location.hostname;

  if (currentHost.includes('.app.github.dev')) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Vite dev server
    return '/api-proxy';
  }

  // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  return 'http://localhost:3001/api';
};

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞
const ObjectParametersNew = ({ projectId = 56 }) => {
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [rooms, setRooms] = useState([]);
  const [hasChanges, setHasChanges] = useState(false);
  const [objectParametersId, setObjectParametersId] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const loadData = useCallback(async () => {
    try {
      setLoading(true);
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:', projectId);

      const token = getAuthToken();
      if (!token) {
        console.log('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        setLoading(false);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞
      const objectParamsResponse = await fetch(`${getApiBaseUrl()}/projects/${projectId}/object-parameters`, {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!objectParamsResponse.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞');
      }

      const objectParams = await objectParamsResponse.json();
      console.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞:', objectParams);
      setObjectParametersId(objectParams.id);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–º–µ—â–µ–Ω–∏—è
      const roomsResponse = await fetch(`${getApiBaseUrl()}/object-parameters/${objectParams.id}/rooms`, {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (roomsResponse.ok) {
        const roomsData = await roomsResponse.json();
        console.log('‚úÖ –ü–æ–º–µ—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', roomsData);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        const formattedRooms = roomsData.map((room) => {
          console.log(`üè† –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–º–µ—â–µ–Ω–∏–µ ${room.room_name}: ceiling_area=${room.ceiling_area}, ceiling_slopes=${room.ceiling_slopes}`);
          return {
            id: room.id,
            name: room.room_name,
            area: parseFloat(room.area) || 0,
            height: parseFloat(room.height) || 2.7,
            perimeter: parseFloat(room.perimeter) || 0,
            prostenki: parseFloat(room.prostenki) || 0,
            ceilingArea: parseFloat(room.ceiling_area) || 0,
            ceilingSlopes: parseFloat(room.ceiling_slopes) || 0,
            window1Width: parseFloat(room.window1_width) || 0,
            window1Height: parseFloat(room.window1_height) || 0,
            window2Width: parseFloat(room.window2_width) || 0,
            window2Height: parseFloat(room.window2_height) || 0,
            window3Width: parseFloat(room.window3_width) || 0,
            window3Height: parseFloat(room.window3_height) || 0,
            portal1Width: parseFloat(room.portal1_width) || 0,
            portal1Height: parseFloat(room.portal1_height) || 0,
            portal2Width: parseFloat(room.portal2_width) || 0,
            portal2Height: parseFloat(room.portal2_height) || 0
          };
        });

        setRooms(formattedRooms);
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–º–µ—â–µ–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫');
        setRooms([]);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
      notification.error({
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
        description: error.message
      });
    } finally {
      setLoading(false);
    }
  }, [projectId]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const saveData = async () => {
    try {
      setSaving(true);
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...');

      const token = getAuthToken();
      if (!token) {
        notification.error({
          message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
          description: '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ
      for (const room of rooms) {
        if (room.id > 1000000) {
          // –ù–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º
          console.log('‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ:', room.name);

          const newRoomData = {
            objectParametersId: objectParametersId,
            roomName: room.name,
            area: room.area,
            height: room.height,
            volume: room.area * room.height,
            finishClass: 'standard',
            purpose: 'general',
            sortOrder: 0,
            perimeter: room.perimeter,
            prostenki: room.prostenki,
            ceilingArea: room.ceilingArea,
            ceilingSlopes: room.ceilingSlopes,
            doorsCount: 1,
            window1Width: room.window1Width.toString(),
            window1Height: room.window1Height.toString(),
            window2Width: room.window2Width.toString(),
            window2Height: room.window2Height.toString(),
            window3Width: room.window3Width.toString(),
            window3Height: room.window3Height.toString(),
            portal1Width: room.portal1Width.toString(),
            portal1Height: room.portal1Height.toString(),
            portal2Width: room.portal2Width.toString(),
            portal2Height: room.portal2Height.toString()
          };

          const createResponse = await fetch(`${getApiBaseUrl()}/object-parameters/${objectParametersId}/rooms`, {
            method: 'POST',
            headers: {
              Authorization: `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(newRoomData)
          });

          if (!createResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è "${room.name}"`);
          }

          const createdRoom = await createResponse.json();
          console.log(`‚úÖ –ü–æ–º–µ—â–µ–Ω–∏–µ "${room.name}" —Å–æ–∑–¥–∞–Ω–æ —Å ID:`, createdRoom.id);

          // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
          room.id = createdRoom.id;
        } else {
          // –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–µ–º
          console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–º–µ—â–µ–Ω–∏–µ:', room.name);

          const roomData = {
            roomName: room.name,
            area: room.area,
            height: room.height,
            volume: room.area * room.height,
            finishClass: 'standard',
            purpose: 'general',
            sortOrder: 0,
            perimeter: room.perimeter,
            prostenki: room.prostenki,
            ceilingArea: room.ceilingArea,
            ceilingSlopes: room.ceilingSlopes,
            doorsCount: 1,
            window1Width: room.window1Width.toString(),
            window1Height: room.window1Height.toString(),
            window2Width: room.window2Width.toString(),
            window2Height: room.window2Height.toString(),
            window3Width: room.window3Width.toString(),
            window3Height: room.window3Height.toString(),
            portal1Width: room.portal1Width.toString(),
            portal1Height: room.portal1Height.toString(),
            portal2Width: room.portal2Width.toString(),
            portal2Height: room.portal2Height.toString()
          };

          const response = await fetch(`${getApiBaseUrl()}/rooms/${room.id}`, {
            method: 'PUT',
            headers: {
              Authorization: `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(roomData)
          });

          if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è "${room.name}"`);
          }

          console.log(`‚úÖ –ü–æ–º–µ—â–µ–Ω–∏–µ "${room.name}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
        }
      }

      setHasChanges(false);

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      await loadData();

      notification.success({
        message: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
        description: '–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      notification.error({
        message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        description: error.message
      });
    } finally {
      setSaving(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
  const updateRoom = (roomId, field, value) => {
    if (field === 'ceilingArea' || field === 'ceilingSlopes') {
      console.log(`üè† –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—è ${field} –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏ ${roomId}: ${value}`);
    }
    setRooms((prev) => prev.map((room) => (room.id === roomId ? { ...room, [field]: value } : room)));
    setHasChanges(true);
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
  const addRoom = () => {
    const newRoom = {
      id: Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
      name: `–ü–æ–º–µ—â–µ–Ω–∏–µ ${rooms.length + 1}`,
      area: 0,
      height: 0,
      perimeter: 0,
      prostenki: 0,
      ceilingArea: 0,
      ceilingSlopes: 0,
      window1Width: 0,
      window1Height: 0,
      window2Width: 0,
      window2Height: 0,
      window3Width: 0,
      window3Height: 0,
      portal1Width: 0,
      portal1Height: 0,
      portal2Width: 0,
      portal2Height: 0
    };
    setRooms((prev) => [...prev, newRoom]);
    setHasChanges(true);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
  const deleteRoom = async (roomId) => {
    try {
      // –ï—Å–ª–∏ ID –±–æ–ª—å—à–µ 1000000, —Ç–æ —ç—Ç–æ –Ω–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ (–µ—â–µ –Ω–µ –≤ –ë–î)
      if (roomId < 1000000) {
        const token = getAuthToken();
        if (!token) {
          notification.error({
            message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            description: '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è'
          });
          return;
        }

        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–º–µ—â–µ–Ω–∏–µ –∏–∑ –ë–î:', roomId);

        const response = await fetch(`${getApiBaseUrl()}/rooms/${roomId}`, {
          method: 'DELETE',
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        }

        console.log('‚úÖ –ü–æ–º–µ—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î');
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setRooms((prev) => prev.filter((room) => room.id !== roomId));
      setHasChanges(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞

      notification.success({
        message: '–ü–æ–º–µ—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
        description: '–ü–æ–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      notification.error({
        message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è',
        description: error.message
      });
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadData();
  }, [loadData]);

  // –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  const columns = [
    {
      title: '–ù–∞–∑–≤–∞–Ω–∏–µ',
      dataIndex: 'name',
      key: 'name',
      width: 120,
      render: (value, record) => (
        <Input value={value} onChange={(e) => updateRoom(record.id, 'name', e.target.value)} placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" size="small" />
      )
    },
    {
      title: '–ü–ª–æ—â–∞–¥—å (–º¬≤)',
      dataIndex: 'area',
      key: 'area',
      width: 75,
      render: (value, record) => (
        <CalculatorInput value={value} onChange={(newValue) => updateRoom(record.id, 'area', newValue)} placeholder="0" size="small" />
      )
    },
    {
      title: '–í—ã—Å–æ—Ç–∞ (–º)',
      dataIndex: 'height',
      key: 'height',
      width: 70,
      render: (value, record) => (
        <CalculatorInput value={value} onChange={(newValue) => updateRoom(record.id, 'height', newValue)} placeholder="2.7" size="small" />
      )
    },
    {
      title: '–ü–µ—Ä–∏–º–µ—Ç—Ä (–º)',
      dataIndex: 'perimeter',
      key: 'perimeter',
      width: 75,
      render: (value, record) => (
        <CalculatorInput value={value} onChange={(newValue) => updateRoom(record.id, 'perimeter', newValue)} placeholder="0" size="small" />
      )
    },
    {
      title: '–ü—Ä–æ—Å—Ç–µ–Ω–∫–∏ (–º)',
      dataIndex: 'prostenki',
      key: 'prostenki',
      width: 75,
      render: (value, record) => (
        <CalculatorInput value={value} onChange={(newValue) => updateRoom(record.id, 'prostenki', newValue)} placeholder="0" size="small" />
      )
    },
    {
      title: '–ü–ª–æ—â–∞–¥—å –ø–æ—Ç–æ–ª–∫–∞ (–º¬≤)',
      dataIndex: 'ceilingArea',
      key: 'ceilingArea',
      width: 95,
      render: (value, record) => (
        <CalculatorInput
          value={value}
          onChange={(newValue) => updateRoom(record.id, 'ceilingArea', newValue)}
          placeholder="0"
          size="small"
        />
      )
    },
    {
      title: '–û—Ç–∫–æ—Å—ã –ø–æ—Ç–æ–ª–æ—á–Ω—ã–µ (–º.–ø–æ–≥.)',
      dataIndex: 'ceilingSlopes',
      key: 'ceilingSlopes',
      width: 100,
      render: (value, record) => (
        <CalculatorInput
          value={value}
          onChange={(newValue) => updateRoom(record.id, 'ceilingSlopes', newValue)}
          placeholder="0"
          size="small"
        />
      )
    },
    {
      title: '–û–∫–Ω–æ 1 (–®√ó–í)',
      key: 'window1',
      width: 95,
      render: (_, record) => (
        <Space.Compact>
          <CalculatorInput
            value={record.window1Width}
            onChange={(newValue) => updateRoom(record.id, 'window1Width', newValue)}
            placeholder="–®"
            size="small"
            style={{ width: 47 }}
          />
          <CalculatorInput
            value={record.window1Height}
            onChange={(newValue) => updateRoom(record.id, 'window1Height', newValue)}
            placeholder="–í"
            size="small"
            style={{ width: 47 }}
          />
        </Space.Compact>
      )
    },
    {
      title: '–û–∫–Ω–æ 2 (–®√ó–í)',
      key: 'window2',
      width: 95,
      render: (_, record) => (
        <Space.Compact>
          <CalculatorInput
            value={record.window2Width}
            onChange={(newValue) => updateRoom(record.id, 'window2Width', newValue)}
            placeholder="–®"
            size="small"
            style={{ width: 47 }}
          />
          <CalculatorInput
            value={record.window2Height}
            onChange={(newValue) => updateRoom(record.id, 'window2Height', newValue)}
            placeholder="–í"
            size="small"
            style={{ width: 47 }}
          />
        </Space.Compact>
      )
    },
    {
      title: '–û–∫–Ω–æ 3 (–®√ó–í)',
      key: 'window3',
      width: 95,
      render: (_, record) => (
        <Space.Compact>
          <CalculatorInput
            value={record.window3Width}
            onChange={(newValue) => updateRoom(record.id, 'window3Width', newValue)}
            placeholder="–®"
            size="small"
            style={{ width: 47 }}
          />
          <CalculatorInput
            value={record.window3Height}
            onChange={(newValue) => updateRoom(record.id, 'window3Height', newValue)}
            placeholder="–í"
            size="small"
            style={{ width: 47 }}
          />
        </Space.Compact>
      )
    },
    {
      title: '–ü–æ—Ä—Ç–∞–ª 1 (–®√ó–í)',
      key: 'portal1',
      width: 95,
      render: (_, record) => (
        <Space.Compact>
          <CalculatorInput
            value={record.portal1Width}
            onChange={(newValue) => updateRoom(record.id, 'portal1Width', newValue)}
            placeholder="–®"
            size="small"
            style={{ width: 47 }}
          />
          <CalculatorInput
            value={record.portal1Height}
            onChange={(newValue) => updateRoom(record.id, 'portal1Height', newValue)}
            placeholder="–í"
            size="small"
            style={{ width: 47 }}
          />
        </Space.Compact>
      )
    },
    {
      title: '–ü–æ—Ä—Ç–∞–ª 2 (–®√ó–í)',
      key: 'portal2',
      width: 95,
      render: (_, record) => (
        <Space.Compact>
          <CalculatorInput
            value={record.portal2Width}
            onChange={(newValue) => updateRoom(record.id, 'portal2Width', newValue)}
            placeholder="–®"
            size="small"
            style={{ width: 47 }}
          />
          <CalculatorInput
            value={record.portal2Height}
            onChange={(newValue) => updateRoom(record.id, 'portal2Height', newValue)}
            placeholder="–í"
            size="small"
            style={{ width: 47 }}
          />
        </Space.Compact>
      )
    },
    {
      title: <SettingOutlined style={{ fontSize: '16px' }} />,
      key: 'actions',
      width: 50,
      align: 'center',
      render: (_, record) => (
        <Button type="text" danger size="small" icon={<DeleteOutlined />} onClick={() => deleteRoom(record.id)} title="–£–¥–∞–ª–∏—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ" />
      )
    }
  ];

  if (loading) {
    return (
      <div style={{ textAlign: 'center', padding: '50px' }}>
        <Spin size="large" />
        <div style={{ marginTop: '16px' }}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
      </div>
    );
  }

  return (
    <div style={{ padding: '24px' }}>
      <Card
        title={
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <span>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ (–ü—Ä–æ–µ–∫—Ç #{projectId})</span>
            <Space>
              {hasChanges && <span style={{ color: '#fa8c16', fontSize: '12px' }}>‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</span>}
              <Button
                type={hasChanges ? 'primary' : 'default'}
                icon={saving ? <LoadingOutlined /> : <SaveOutlined />}
                onClick={saveData}
                loading={saving}
                size="small"
              >
                {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : hasChanges ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </Button>
              <Button type="dashed" icon={<PlusOutlined />} onClick={addRoom} size="small">
                –î–æ–±–∞–≤–∏—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ
              </Button>
            </Space>
          </div>
        }
      >
        <Table
          columns={columns}
          dataSource={rooms}
          rowKey="id"
          pagination={false}
          size="small"
          bordered
          scroll={{ x: 'max-content' }}
          locale={{
            emptyText: '–ù–µ—Ç –ø–æ–º–µ—â–µ–Ω–∏–π. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ.'
          }}
        />

        {rooms.length > 0 && (
          <div style={{ marginTop: '16px', padding: '12px', backgroundColor: '#f5f5f5', borderRadius: '4px' }}>
            <div style={{ marginBottom: '12px' }}>
              <strong>–ò—Ç–æ–≥–æ –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—è–º:</strong>
              <Table
                size="small"
                bordered
                pagination={false}
                style={{ marginTop: '8px' }}
                columns={[
                  {
                    title: '–ü–æ–º–µ—â–µ–Ω–∏–µ',
                    dataIndex: 'name',
                    key: 'name',
                    width: 150
                  },
                  {
                    title: '–ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω (–º¬≤)',
                    dataIndex: 'wallArea',
                    key: 'wallArea',
                    width: 130,
                    render: (value) => <strong style={{ color: '#1890ff' }}>{value}</strong>
                  },
                  {
                    title: '–û—Ç–∫–æ—Å—ã (–º.–ø–æ–≥.)',
                    dataIndex: 'slopes',
                    key: 'slopes',
                    width: 120,
                    render: (value) => <strong style={{ color: '#52c41a' }}>{value}</strong>
                  },
                  {
                    title: '–ü–ª–æ—â–∞–¥—å –ø–æ—Ç–æ–ª–∫–∞ (–º¬≤)',
                    dataIndex: 'ceilingArea',
                    key: 'ceilingArea',
                    width: 130,
                    render: (value) => <strong style={{ color: '#722ed1' }}>{value}</strong>
                  },
                  {
                    title: '–û—Ç–∫–æ—Å—ã –ø–æ—Ç–æ–ª–æ—á–Ω—ã–µ (–º.–ø–æ–≥.)',
                    dataIndex: 'ceilingSlopes',
                    key: 'ceilingSlopes',
                    width: 160,
                    render: (value) => <strong style={{ color: '#eb2f96' }}>{value}</strong>
                  }
                ]}
                dataSource={rooms.map((room) => {
                  // –ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω = (–ü–µ—Ä–∏–º–µ—Ç—Ä * –≤—ã—Å–æ—Ç—É) - (–≤—Å–µ –æ–∫–Ω–∞ –∏ –ø–æ—Ä—Ç–∞–ª—ã)
                  const windowsAndPortalsArea =
                    room.window1Width * room.window1Height +
                    room.window2Width * room.window2Height +
                    room.window3Width * room.window3Height +
                    room.portal1Width * room.portal1Height +
                    room.portal2Width * room.portal2Height;

                  const wallArea = room.perimeter * room.height - windowsAndPortalsArea;

                  // –û—Ç–∫–æ—Å—ã = (—à–∏—Ä–∏–Ω–∞ + (–≤—ã—Å–æ—Ç–∞ * 2)) + –ø—Ä–æ—Å—Ç–µ–Ω–∫–∏ (—Ç–æ–ª—å–∫–æ –æ–∫–Ω–∞, –ø–æ—Ä—Ç–∞–ª—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º)
                  const slopes =
                    (room.window1Width > 0 && room.window1Height > 0 ? room.window1Width + room.window1Height * 2 : 0) +
                    (room.window2Width > 0 && room.window2Height > 0 ? room.window2Width + room.window2Height * 2 : 0) +
                    (room.window3Width > 0 && room.window3Height > 0 ? room.window3Width + room.window3Height * 2 : 0) +
                    room.prostenki;

                  return {
                    key: room.id,
                    name: room.name,
                    wallArea: wallArea.toFixed(1),
                    slopes: slopes.toFixed(1),
                    ceilingArea: room.ceilingArea.toFixed(1),
                    ceilingSlopes: room.ceilingSlopes.toFixed(1)
                  };
                })}
                summary={() => {
                  const totalWallArea = rooms.reduce((sum, room) => {
                    const windowsAndPortalsArea =
                      room.window1Width * room.window1Height +
                      room.window2Width * room.window2Height +
                      room.window3Width * room.window3Height +
                      room.portal1Width * room.portal1Height +
                      room.portal2Width * room.portal2Height;
                    return sum + (room.perimeter * room.height - windowsAndPortalsArea);
                  }, 0);

                  const totalSlopes = rooms.reduce((sum, room) => {
                    return (
                      sum +
                      (room.window1Width > 0 && room.window1Height > 0 ? room.window1Width + room.window1Height * 2 : 0) +
                      (room.window2Width > 0 && room.window2Height > 0 ? room.window2Width + room.window2Height * 2 : 0) +
                      (room.window3Width > 0 && room.window3Height > 0 ? room.window3Width + room.window3Height * 2 : 0) +
                      room.prostenki
                    );
                  }, 0);

                  const totalCeilingArea = rooms.reduce((sum, room) => sum + room.ceilingArea, 0);

                  const totalCeilingSlopes = rooms.reduce((sum, room) => sum + room.ceilingSlopes, 0);

                  return (
                    <Table.Summary.Row style={{ backgroundColor: '#fafafa' }}>
                      <Table.Summary.Cell index={0}>
                        <strong>–í–°–ï–ì–û:</strong>
                      </Table.Summary.Cell>
                      <Table.Summary.Cell index={1}>
                        <strong style={{ color: '#1890ff', fontSize: '14px' }}>{totalWallArea.toFixed(1)} –º¬≤</strong>
                      </Table.Summary.Cell>
                      <Table.Summary.Cell index={2}>
                        <strong style={{ color: '#52c41a', fontSize: '14px' }}>{totalSlopes.toFixed(1)} –º.–ø–æ–≥.</strong>
                      </Table.Summary.Cell>
                      <Table.Summary.Cell index={3}>
                        <strong style={{ color: '#722ed1', fontSize: '14px' }}>{totalCeilingArea.toFixed(1)} –º¬≤</strong>
                      </Table.Summary.Cell>
                      <Table.Summary.Cell index={4}>
                        <strong style={{ color: '#eb2f96', fontSize: '14px' }}>{totalCeilingSlopes.toFixed(1)} –º.–ø–æ–≥.</strong>
                      </Table.Summary.Cell>
                    </Table.Summary.Row>
                  );
                }}
              />
            </div>
          </div>
        )}
      </Card>
    </div>
  );
};

export default ObjectParametersNew;
