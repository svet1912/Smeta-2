import axios from 'axios';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API URL
const getApiBaseUrl = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (import.meta.env.VITE_API_BASE_URL) {
    return import.meta.env.VITE_API_BASE_URL;
  }
  
  // –í GitHub Codespaces –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Vite
  const currentHost = window.location.hostname;
  if (currentHost.includes('.app.github.dev')) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Vite dev server
    return '/api-proxy';
  }
  
  // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  return 'http://localhost:3001/api';
};

const API_BASE_URL = getApiBaseUrl();

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
});

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
api.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error('API Error:', error);

    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    if (error.code === 'ECONNREFUSED' || error.code === 'NETWORK_ERROR') {
      console.warn('üîÑ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ');
      return Promise.resolve({ data: [] });
    }

    return Promise.reject(error);
  }
);

// API —Ñ—É–Ω–∫—Ü–∏–∏

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export const getStatistics = async () => {
  try {
    const response = await api.get('/statistics');
    return response.data;
  } catch (error) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    return [
      {
        id: 1,
        metric_name: '–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤',
        metric_value: 442236,
        percentage: 59.3,
        extra_value: 35000,
        is_loss: false,
        color: 'primary'
      },
      {
        id: 2,
        metric_name: '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        metric_value: 78250,
        percentage: 70.5,
        extra_value: 8900,
        is_loss: false,
        color: 'primary'
      },
      { id: 3, metric_name: '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤', metric_value: 18800, percentage: 27.4, extra_value: 1943, is_loss: true, color: 'warning' },
      { id: 4, metric_name: '–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂', metric_value: 35078, percentage: 27.4, extra_value: 20395, is_loss: true, color: 'warning' }
    ];
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
export const getOrders = async () => {
  try {
    const response = await api.get('/orders');
    return response.data;
  } catch (error) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    return [
      { id: 1, tracking_no: 84564564, product_name: '–û–±—ä–µ–∫—Ç–∏–≤ –∫–∞–º–µ—Ä—ã', quantity: 40, status: 2, amount: 40570.0, created_at: '2024-01-20' },
      { id: 2, tracking_no: 98764564, product_name: '–ù–æ—É—Ç–±—É–∫', quantity: 300, status: 0, amount: 180139.0, created_at: '2024-01-19' },
      {
        id: 3,
        tracking_no: 98756325,
        product_name: '–ú–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω',
        quantity: 355,
        status: 1,
        amount: 90989.0,
        created_at: '2024-01-18'
      },
      { id: 4, tracking_no: 98652366, product_name: '–¢–µ–ª–µ—Ñ–æ–Ω', quantity: 50, status: 1, amount: 10239.0, created_at: '2024-01-17' },
      {
        id: 5,
        tracking_no: 13286564,
        product_name: '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        quantity: 100,
        status: 1,
        amount: 83348.0,
        created_at: '2024-01-16'
      }
    ];
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const getUsers = async () => {
  try {
    const response = await api.get('/users');
    return response.data;
  } catch (error) {
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
    return [
      { id: 1, name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', email: 'ivan@example.com', created_at: '2024-01-15' },
      { id: 2, name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', email: 'maria@example.com', created_at: '2024-01-14' }
    ];
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
export const getMaterials = async () => {
  try {
    const response = await api.get('/materials?limit=2000&offset=0');
    const result = response.data;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API
    const data = result.success ? result.data : result;
    return Array.isArray(data) ? data : [];
  } catch (error) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    return [];
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
export const createMaterial = async (materialData) => {
  try {
    const response = await api.post('/materials', materialData);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
export const updateMaterial = async (id, materialData) => {
  try {
    const response = await api.put(`/materials/${id}`, materialData);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
    throw error;
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
export const deleteMaterial = async (id) => {
  try {
    const response = await api.delete(`/materials/${id}`);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:', error);
    throw error;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const createUser = async (userData) => {
  try {
    const response = await api.post('/users', userData);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
export const createOrder = async (orderData) => {
  try {
    const response = await api.post('/orders', orderData);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    throw error;
  }
};

// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
export const testConnection = async () => {
  try {
    const response = await api.get('/health');
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    return { status: 'error', message: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
  }
};

export default api;
