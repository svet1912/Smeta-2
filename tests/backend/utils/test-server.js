import supertest from 'supertest';

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API —Ç–µ—Å—Ç–æ–≤
const API_BASE_URL = process.env.TEST_API_URL || 'http://localhost:3001';

// –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export const api = supertest(API_BASE_URL);

// –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_USER = {
  email: process.env.TEST_USER_EMAIL || 'admin@mantis.ru',
  password: process.env.TEST_USER_PASSWORD || 'password123',
  firstname: 'Test',
  lastname: 'User'
};

// –ö—ç—à –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
let cachedToken = null;
let tokenExpiry = 0;

/**
 * –õ–æ–≥–∏–Ω –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è API —Ç–µ—Å—Ç–æ–≤
 */
export async function loginAndGetToken({ email, password } = TEST_USER) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –µ—â–µ –≤–∞–ª–∏–¥–µ–Ω
  if (cachedToken && Date.now() < tokenExpiry) {
    return cachedToken;
  }

  console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –¥–ª—è API —Ç–µ—Å—Ç–æ–≤...');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç)
    try {
      await api.post('/api/auth/register').send({
        email: email,
        password: password,
        firstname: TEST_USER.firstname,
        lastname: TEST_USER.lastname
      });
      console.log('üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    // –õ–æ–≥–∏–Ω–∏–º—Å—è
    const response = await api.post('/api/auth/login').send({ email, password }).expect(200);

    const token = response.body?.data?.token || response.body?.token || response.body?.accessToken;

    if (!token) {
      throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ 50 –º–∏–Ω—É—Ç
    cachedToken = token;
    tokenExpiry = Date.now() + 50 * 60 * 1000;

    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    return token;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤');
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
export async function authenticatedRequest(method, path) {
  const token = await loginAndGetToken();
  return api[method](path).set('Authorization', `Bearer ${token}`);
}

/**
 * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
 */
export async function waitForServer(url = `${API_BASE_URL}/api/health`, timeout = 30000) {
  const startTime = Date.now();

  while (Date.now() - startTime < timeout) {
    try {
      const response = await supertest(API_BASE_URL).get('/api/health');
      if (response.status === 200) {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤');
        return;
      }
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
    }

    // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
    await new Promise((resolve) => setTimeout(resolve, 1000));
  }

  throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ ${timeout}ms`);
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export async function cleanup() {
  // –û—á–∏—â–∞–µ–º –∫—ç—à —Ç–æ–∫–µ–Ω–∞
  cachedToken = null;
  tokenExpiry = 0;
}
