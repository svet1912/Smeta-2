#!/usr/bin/env node
// HTTP —Ç–µ—Å—Ç –¥–ª—è Cache Analytics Dashboard

const BASE_URL = 'http://localhost:3002';

async function testCacheAnalytics() {
  console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cache Analytics Dashboard...\n');

  try {
    // 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
    console.log('üìä 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/admin/cache/stats');
    
    const statsResponse = await fetch(`${BASE_URL}/api/admin/cache/stats`, {
      headers: {
        Authorization: 'Bearer test-token' // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JWT
      }
    });
    
    if (statsResponse.ok) {
      const stats = await statsResponse.json();
      console.log('  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', JSON.stringify(stats, null, 2));
    } else {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsResponse.status, statsResponse.statusText);
    }

    // 2. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    console.log('\nüìà 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/admin/cache/analytics');
    
    const analyticsResponse = await fetch(`${BASE_URL}/api/admin/cache/analytics`, {
      headers: {
        Authorization: 'Bearer test-token'
      }
    });
    
    if (analyticsResponse.ok) {
      const analytics = await analyticsResponse.json();
      console.log('  ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞');
      console.log(`  üìä Hit Rate: ${analytics.data.hitRate}%`);
      console.log(`  üî¢ Total Operations: ${analytics.data.hits + analytics.data.misses + analytics.data.sets}`);
    } else {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', analyticsResponse.status);
    }

    // 3. –¢–µ—Å—Ç Dashboard HTML
    console.log('\nüñ•Ô∏è 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/admin/cache/dashboard');
    
    const dashboardResponse = await fetch(`${BASE_URL}/api/admin/cache/dashboard`, {
      headers: {
        Authorization: 'Bearer test-token'
      }
    });
    
    if (dashboardResponse.ok) {
      const dashboardHtml = await dashboardResponse.text();
      console.log('  ‚úÖ Dashboard HTML –ø–æ–ª—É—á–µ–Ω');
      console.log(`  üìè –†–∞–∑–º–µ—Ä: ${dashboardHtml.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const hasTitle = dashboardHtml.includes('SmartCache Analytics Dashboard');
      const hasMetrics = dashboardHtml.includes('metric-card');
      const hasRefresh = dashboardHtml.includes('setTimeout');
      
      console.log(`  üè∑Ô∏è Title: ${hasTitle ? '‚úÖ' : '‚ùå'}`);
      console.log(`  üìä Metrics: ${hasMetrics ? '‚úÖ' : '‚ùå'}`);
      console.log(`  üîÑ Auto-refresh: ${hasRefresh ? '‚úÖ' : '‚ùå'}`);
    } else {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è dashboard:', dashboardResponse.status);
    }

    // 4. –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    console.log('\nüßπ 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/admin/cache/cleanup');
    
    const cleanupResponse = await fetch(`${BASE_URL}/api/admin/cache/cleanup`, {
      method: 'POST',
      headers: {
        Authorization: 'Bearer test-token',
        'Content-Type': 'application/json'
      }
    });
    
    if (cleanupResponse.ok) {
      const cleanupResult = await cleanupResponse.json();
      console.log('  ‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', cleanupResult.message);
    } else {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', cleanupResponse.status);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cache Analytics –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ HTTP —Ç–µ—Å—Ç–æ–≤:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3002');
      console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev:server');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testCacheAnalytics();

export { testCacheAnalytics };