#!/usr/bin/env node

const API_BASE = 'http://localhost:3001/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_USER = {
  email: 'test@example.com',
  password: 'password123'
};

const TEST_PROJECT_DATA = {
  customerName: '–¢–µ—Å—Ç –¥–ª—è —Å–º–µ—Ç',
  projectCode: `EST-TEST-${Date.now()}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞
  objectAddress: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, 123',
  contractorName: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥—Ä—è–¥—á–∏–∫',
  contractNumber: 'CONTRACT-001',
  deadline: '2025-12-31',
  description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API estimates'
};

const TEST_ESTIMATE_DATA = {
  estimate_number: 'EST-001',
  name: '–¢–µ—Å—Ç–æ–≤–∞—è —Å–º–µ—Ç–∞',
  version: 1,
  currency: 'RUB',
  notes: '–¢–µ—Å—Ç–æ–≤–∞—è —Å–º–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API'
};

let authToken = '';
let testProjectId = '';
let testEstimateId = '';

async function makeRequest(method, endpoint, data = null, expectError = false) {
  const url = `${API_BASE}${endpoint}`;
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      ...(authToken && { Authorization: `Bearer ${authToken}` })
    }
  };

  if (data && (method === 'POST' || method === 'PUT')) {
    options.body = JSON.stringify(data);
  }

  console.log(`\nüîÑ ${method} ${endpoint}`);
  if (data) console.log('üì§ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));

  try {
    const response = await fetch(url, options);
    const result = await response.json();

    console.log(`üì• –û—Ç–≤–µ—Ç (${response.status}):`, JSON.stringify(result, null, 2));

    if (!expectError && !response.ok) {
      throw new Error(`HTTP ${response.status}: ${result.error || result.message}`);
    }

    return { status: response.status, data: result };
  } catch (error) {
    if (expectError) {
      console.log('‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', error.message);
      return { status: 0, error: error.message };
    }
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    throw error;
  }
}

async function runTests() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API estimates...\n');

    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('=== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ===');
    const authResponse = await makeRequest('POST', '/auth/login', TEST_USER);
    authToken = authResponse.data.data.token; // –¢–æ–∫–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ data.data.token
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n=== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ü–†–û–ï–ö–¢–ê ===');
    const projectResponse = await makeRequest('POST', '/projects', TEST_PROJECT_DATA);
    testProjectId = projectResponse.data.data.id; // ID –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ data.data.id
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${testProjectId}`);

    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CREATE estimate
    console.log('\n=== –°–û–ó–î–ê–ù–ò–ï –°–ú–ï–¢–´ ===');
    const createData = { ...TEST_ESTIMATE_DATA, project_id: testProjectId };
    const createResponse = await makeRequest('POST', '/estimates', createData);
    testEstimateId = createResponse.data.estimate.id;
    console.log(`‚úÖ –°–º–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${testEstimateId}`);

    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å–º–µ—Ç—ã (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 409)
    console.log('\n=== –¢–ï–°–¢: –ö–û–ù–§–õ–ò–ö–¢ –ù–û–ú–ï–†–ê –°–ú–ï–¢–´ ===');
    await makeRequest('POST', '/estimates', createData, true);
    console.log('‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç –Ω–æ–º–µ—Ä–∞ —Å–º–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');

    // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã —Å —á—É–∂–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 403)
    console.log('\n=== –¢–ï–°–¢: –ß–£–ñ–û–ô –ü–†–û–ï–ö–¢ ===');
    const foreignData = { ...TEST_ESTIMATE_DATA, project_id: 999999, estimate_number: 'EST-002' };
    await makeRequest('POST', '/estimates', foreignData, true);
    console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–º—É –ø—Ä–æ–µ–∫—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω');

    // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    console.log('\n=== –¢–ï–°–¢: –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–õ–ï–ô ===');
    await makeRequest('POST', '/estimates', { name: '–¢–æ–ª—å–∫–æ –∏–º—è' }, true);
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET single estimate
    console.log('\n=== –ü–û–õ–£–ß–ï–ù–ò–ï –û–î–ù–û–ô –°–ú–ï–¢–´ ===');
    const getOneResponse = await makeRequest('GET', `/estimates/${testEstimateId}`);
    console.log('‚úÖ –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${getOneResponse.data.estimate.name}`);
    console.log(`   –ù–æ–º–µ—Ä: ${getOneResponse.data.estimate.estimate_number}`);

    // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET —á—É–∂–æ–π —Å–º–µ—Ç—ã (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 403)
    console.log('\n=== –¢–ï–°–¢: –ß–£–ñ–ê–Ø –°–ú–ï–¢–ê ===');
    await makeRequest('GET', '/estimates/999999', null, true);
    console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–π —Å–º–µ—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω');

    // 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UPDATE estimate
    console.log('\n=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ú–ï–¢–´ ===');
    const updateData = {
      name: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–º–µ—Ç–∞',
      estimate_number: 'EST-001-UPD',
      version: 2,
      status: 'active',
      notes: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏'
    };
    await makeRequest('PUT', `/estimates/${testEstimateId}`, updateData);
    console.log('‚úÖ –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

    // 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    console.log('\n=== –°–û–ó–î–ê–ù–ò–ï –í–¢–û–†–û–ô –°–ú–ï–¢–´ –î–õ–Ø –¢–ï–°–¢–ê –ö–û–ù–§–õ–ò–ö–¢–ê ===');
    const secondEstimateData = { ...TEST_ESTIMATE_DATA, project_id: testProjectId, estimate_number: 'EST-002' };
    const secondEstimateResponse = await makeRequest('POST', '/estimates', secondEstimateData);
    const secondEstimateId = secondEstimateResponse.data.estimate.id;

    console.log('\n=== –¢–ï–°–¢: –ö–û–ù–§–õ–ò–ö–¢ –ù–û–ú–ï–†–ê –ü–†–ò –û–ë–ù–û–í–õ–ï–ù–ò–ò ===');
    const conflictUpdate = { estimate_number: 'EST-001-UPD' }; // –ù–æ–º–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç–æ–π
    await makeRequest('PUT', `/estimates/${secondEstimateId}`, conflictUpdate, true);
    console.log('‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');

    // 11. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET all estimates —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    console.log('\n=== –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –°–ú–ï–¢ ===');

    // –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await makeRequest('GET', '/estimates');
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω');

    // –° —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    await makeRequest('GET', `/estimates?project_id=${testProjectId}`);
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –ø—Ä–æ–µ–∫—Ç—É –ø–æ–ª—É—á–µ–Ω');

    // –° –ø–æ–∏—Å–∫–æ–º
    await makeRequest('GET', '/estimates?search=–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è');
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // –° –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    await makeRequest('GET', '/estimates?offset=0&limit=10&sort=estimate_number&order=asc');
    console.log('‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç');

    // 12. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE estimate
    console.log('\n=== –£–î–ê–õ–ï–ù–ò–ï –í–¢–û–†–û–ô –°–ú–ï–¢–´ ===');
    await makeRequest('DELETE', `/estimates/${secondEstimateId}`);
    console.log('‚úÖ –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');

    // 13. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã
    console.log('\n=== –¢–ï–°–¢: –£–î–ê–õ–ï–ù–ò–ï –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –°–ú–ï–¢–´ ===');
    await makeRequest('DELETE', '/estimates/999999', null, true);
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');

    // 14. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\n=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===');
    const finalListResponse = await makeRequest('GET', `/estimates?project_id=${testProjectId}`);
    console.log(`‚úÖ –í –ø—Ä–æ–µ–∫—Ç–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–º–µ—Ç: ${finalListResponse.data.total}`);

    // –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç (—ç—Ç–æ —É–¥–∞–ª–∏—Ç –∏ –≤—Å–µ –µ–≥–æ —Å–º–µ—Ç—ã)
    console.log('\n=== –û–ß–ò–°–¢–ö–ê ===');
    await makeRequest('DELETE', `/projects/${testProjectId}`);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã');

    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!');
    console.log('\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—Ç —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π tenant_id');
    console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å estimate_number –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞');
    console.log('‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º –∏ —Å–º–µ—Ç–∞–º');
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π');
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤');
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, –ø–æ–∏—Å–∫–æ–º –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π');
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ—Ç —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–æ—Å—Ç—É–ø–∞');
    console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ HTTP –∫–æ–¥—ã –æ—à–∏–±–æ–∫ (400, 403, 404, 409)');
  } catch (error) {
    console.error('\nüí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù:', error.message);

    // –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (testProjectId) {
      try {
        await makeRequest('DELETE', `/projects/${testProjectId}`);
        console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
      } catch (cleanupError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:', cleanupError.message);
      }
    }

    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
  fetch(`${API_BASE}/test`)
    .then(() => {
      console.log('üîó –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...');
      return runTests();
    })
    .catch((error) => {
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3001');
      process.exit(1);
    });
}
