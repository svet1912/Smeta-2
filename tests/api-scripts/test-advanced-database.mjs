#!/usr/bin/env node
// Test Advanced Database Optimization - Phase 3 Step 1

import { fileURLToPath } from 'url';

async function testAdvancedDatabase() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Advanced Database Optimization Phase 3 Step 1...\n');

  try {
    // 1. –¢–µ—Å—Ç Advanced Database Pool
    console.log('üìù 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Advanced Pool Manager...');
    
    const { getDatabaseManager } = await import('../../server/database/advancedPool.js');
    const dbManager = getDatabaseManager();
    
    console.log('  ‚úÖ Database Pool Manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    await dbManager.initialize();
    console.log('  ‚úÖ Database Pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const testResult = await dbManager.query('SELECT NOW() as current_time');
    console.log('  ‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω:', testResult.rows[0].current_time);

    // –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const cachedResult = await dbManager.query(
      'SELECT $1 as test_value, NOW() as query_time',
      ['cached_test'],
      {
        useCache: true,
        cacheKey: 'test:cached-query',
        cacheTTL: 60,
        dependencies: ['test']
      }
    );
    console.log('  ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', cachedResult.rows[0].test_value);

    // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –≤–∑—è—Ç—å—Å—è –∏–∑ –∫—ç—à–∞
    const cachedResult2 = await dbManager.query(
      'SELECT $1 as test_value, NOW() as query_time',
      ['cached_test'],
      {
        useCache: true,
        cacheKey: 'test:cached-query'
      }
    );
    console.log('  ‚úÖ –í—Ç–æ—Ä–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞)');

    // 2. –¢–µ—Å—Ç Query Optimizer
    console.log('\nüîß 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Query Optimizer...');
    
    const queryOptimizer = (await import('../../server/database/queryOptimizer.js')).default;
    
    // –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
    const testQuery = 'SELECT * FROM auth_users WHERE email = $1';
    const testParams = ['test@example.com'];
    const context = { tenantId: 'test-tenant-123' };

    const optimized = queryOptimizer.optimizeQuery(testQuery, testParams, context);
    console.log('  üìä –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', testQuery);
    console.log('  üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', optimized.query);
    console.log('  ‚úÖ Query Optimizer —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // –¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è JOIN –∑–∞–ø—Ä–æ—Å–∞
    const joinTables = [
      {
        name: 'projects',
        fields: ['id', 'name', 'status'],
        hasTenant: true
      },
      {
        name: 'estimates', 
        fields: ['id', 'total_cost'],
        joinCondition: 't0.id = t1.project_id',
        required: true,
        hasTenant: true
      }
    ];

    const joinConditions = [
      { clause: 't0.status = $1', params: ['active'] }
    ];

    const joinQuery = queryOptimizer.optimizeJoinQuery(
      joinTables, 
      joinConditions, 
      { tenantId: 'test-tenant', limit: 50 }
    );
    
    console.log('  üîó –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JOIN:', joinQuery.query.substring(0, 100) + '...');
    console.log('  ‚úÖ JOIN –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // 3. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\nüìä 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    const poolStats = dbManager.getPoolStats();
    console.log('  üìà Pool —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`    ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${poolStats.totalCount}`);
    console.log(`    ‚Ä¢ Idle —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${poolStats.idleCount}`);
    console.log(`    ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${poolStats.queriesExecuted}`);
    console.log(`    ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(poolStats.averageQueryTime)}ms`);
    console.log(`    ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${poolStats.errorRate}`);

    const optimizerStats = queryOptimizer.getOptimizerStats();
    console.log('  üîß Optimizer —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`    ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${optimizerStats.cachedQueries}`);
    console.log(`    ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${optimizerStats.analyzedQueries}`);
    console.log(`    ‚Ä¢ –ü—Ä–∞–≤–∏–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${optimizerStats.optimizationRules}`);

    // 4. –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\nüí≥ 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    try {
      const txResult = await dbManager.transaction(async (client) => {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const result1 = await client.query('SELECT 1 as step1');
        const result2 = await client.query('SELECT 2 as step2');
        
        return {
          step1: result1.rows[0].step1,
          step2: result2.rows[0].step2
        };
      });
      
      console.log('  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', txResult);
    } catch (txError) {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txError.message);
    }

    // 5. –¢–µ—Å—Ç Health Check
    console.log('\nüè• 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Health Check...');
    
    const healthCheck = await dbManager.healthCheck();
    console.log('  üìä Health Check:');
    console.log(`    ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${healthCheck.status}`);
    console.log(`    ‚Ä¢ –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${healthCheck.connectionTime}ms`);
    console.log(`    ‚Ä¢ Timestamp: ${healthCheck.timestamp}`);

    // 6. –¢–µ—Å—Ç –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\nüêå 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    try {
      await dbManager.query('SELECT pg_sleep(0.1), 1 as slow_query');
      console.log('  ‚úÖ –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (error) {
      console.log('  ‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
    }

    const slowQueries = dbManager.getSlowQueries(50); // –∑–∞–ø—Ä–æ—Å—ã >50ms
    console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${slowQueries.length}`);

    if (slowQueries.length > 0) {
      console.log(`  üêå –°–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π: ${slowQueries[0].duration}ms`);
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Advanced Database –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã Advanced Database Phase 3 Step 1 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
    console.log('  ‚úÖ Advanced Connection Pooling —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
    console.log('  ‚úÖ Query-level Caching —Å Smart Cache –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
    console.log('  ‚úÖ Query Optimization —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏');
    console.log('  ‚úÖ Transaction Management —Å error handling');
    console.log('  ‚úÖ Performance Monitoring –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    console.log('  ‚úÖ Health Checks –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
    console.log('  ‚úÖ Slow Query Detection –∏ –∞–Ω–∞–ª–∏–∑');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Advanced Database:', error.message);
    console.error('Stack trace:', error.stack);
    
    if (error.message.includes('connect ECONNREFUSED')) {
      console.log('\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª server/.env');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (import.meta.url === `file://${process.argv[1]}`) {
  testAdvancedDatabase().then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  }).catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

export { testAdvancedDatabase };