import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3001/api';

// –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const TEST_JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token';

async function testProjectsAPI() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PROJECTS API (–¶–ï–õ–ï–í–ê–Ø –ú–û–î–ï–õ–¨)');
  console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å tenant_id –ª–æ–≥–∏–∫–æ–π\n');

  const headers = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${TEST_JWT_TOKEN}`
  };

  try {
    // 1. –¢–µ—Å—Ç GET /api/projects (—Å–ø–∏—Å–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
    console.log('üìã –¢–ï–°–¢ 1: GET /api/projects');
    const listResponse = await fetch(`${BASE_URL}/projects?limit=5&offset=0&search=test&sort=created_at&order=desc`, {
      method: 'GET',
      headers
    });

    console.log(`   –°—Ç–∞—Ç—É—Å: ${listResponse.status}`);
    const listData = await listResponse.text();
    console.log(`   –û—Ç–≤–µ—Ç: ${listData.substring(0, 200)}...`);
    console.log('');

    // 2. –¢–µ—Å—Ç POST /api/projects (—Å–æ–∑–¥–∞–Ω–∏–µ)
    console.log('üìù –¢–ï–°–¢ 2: POST /api/projects');
    const createPayload = {
      customerName: '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç API',
      objectAddress: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123',
      contractorName: '–û–û–û –¢–µ—Å—Ç—Å—Ç—Ä–æ–π',
      contractNumber: 'TEST-API-2025',
      deadline: '2025-12-31',
      projectCode: 'PRJ-API-TEST'
    };

    const createResponse = await fetch(`${BASE_URL}/projects`, {
      method: 'POST',
      headers,
      body: JSON.stringify(createPayload)
    });

    console.log(`   –°—Ç–∞—Ç—É—Å: ${createResponse.status}`);
    const createData = await createResponse.text();
    console.log(`   –û—Ç–≤–µ—Ç: ${createData.substring(0, 300)}...`);
    console.log('');

    // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–ª—Å—è, –ø–æ–ª—É—á–∏–º –µ–≥–æ ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
    let projectId = null;
    if (createResponse.status === 201) {
      try {
        const createJson = JSON.parse(createData);
        projectId = createJson.data?.id;
        console.log(`   ‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${projectId}`);
      } catch {
        console.log('   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø—Ä–æ–µ–∫—Ç–∞');
      }
    }

    // 3. –¢–µ—Å—Ç GET /api/projects/:id (–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
    if (projectId) {
      console.log('üîç –¢–ï–°–¢ 3: GET /api/projects/:id');
      const getResponse = await fetch(`${BASE_URL}/projects/${projectId}`, {
        method: 'GET',
        headers
      });

      console.log(`   –°—Ç–∞—Ç—É—Å: ${getResponse.status}`);
      const getData = await getResponse.text();
      console.log(`   –û—Ç–≤–µ—Ç: ${getData.substring(0, 300)}...`);
      console.log('');

      // 4. –¢–µ—Å—Ç PUT /api/projects/:id (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
      console.log('‚úèÔ∏è –¢–ï–°–¢ 4: PUT /api/projects/:id');
      const updatePayload = {
        customerName: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ö–ª–∏–µ–Ω—Ç API',
        status: 'active',
        projectCode: 'PRJ-API-UPD'
      };

      const updateResponse = await fetch(`${BASE_URL}/projects/${projectId}`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(updatePayload)
      });

      console.log(`   –°—Ç–∞—Ç—É—Å: ${updateResponse.status}`);
      const updateData = await updateResponse.text();
      console.log(`   –û—Ç–≤–µ—Ç: ${updateData.substring(0, 300)}...`);
      console.log('');

      // 5. –¢–µ—Å—Ç DELETE /api/projects/:id (—É–¥–∞–ª–µ–Ω–∏–µ)
      console.log('üóëÔ∏è –¢–ï–°–¢ 5: DELETE /api/projects/:id');
      const deleteResponse = await fetch(`${BASE_URL}/projects/${projectId}`, {
        method: 'DELETE',
        headers
      });

      console.log(`   –°—Ç–∞—Ç—É—Å: ${deleteResponse.status}`);
      const deleteData = await deleteResponse.text();
      console.log(`   –û—Ç–≤–µ—Ç: ${deleteData.substring(0, 200)}...`);
      console.log('');
    } else {
      console.log('‚ö†Ô∏è –¢–ï–°–¢–´ 3-5 –ø—Ä–æ–ø—É—â–µ–Ω—ã - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç');
    }

    // 6. –¢–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è projectCode (409 –æ—à–∏–±–∫–∞)
    console.log('üîÑ –¢–ï–°–¢ 6: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ projectCode');
    const duplicatePayload = {
      customerName: '–î—É–±–ª–∏–∫–∞—Ç –ö–ª–∏–µ–Ω—Ç',
      objectAddress: '—É–ª. –î—É–±–ª–∏–∫–∞—Ç, 1',
      contractorName: '–û–û–û –î—É–±–ª–∏–∫–∞—Ç',
      contractNumber: 'DUP-001',
      deadline: '2025-11-30',
      projectCode: 'PRJ-API-TEST' // —Ç–æ—Ç –∂–µ –∫–æ–¥
    };

    const duplicateResponse = await fetch(`${BASE_URL}/projects`, {
      method: 'POST',
      headers,
      body: JSON.stringify(duplicatePayload)
    });

    console.log(`   –°—Ç–∞—Ç—É—Å: ${duplicateResponse.status}`);
    const duplicateData = await duplicateResponse.text();
    console.log(`   –û—Ç–≤–µ—Ç: ${duplicateData.substring(0, 200)}...`);
    console.log('');

    // 7. –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–æ–º—É –ø—Ä–æ–µ–∫—Ç—É (403 –æ—à–∏–±–∫–∞)
    console.log('üö´ –¢–ï–°–¢ 7: –î–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–º—É –ø—Ä–æ–µ–∫—Ç—É');
    const foreignResponse = await fetch(`${BASE_URL}/projects/999999`, {
      method: 'GET',
      headers
    });

    console.log(`   –°—Ç–∞—Ç—É—Å: ${foreignResponse.status}`);
    const foreignData = await foreignResponse.text();
    console.log(`   –û—Ç–≤–µ—Ç: ${foreignData.substring(0, 200)}...`);
    console.log('');

    // 8. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–µ–π (400 –æ—à–∏–±–∫–∞)
    console.log('‚ùå –¢–ï–°–¢ 8: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π');
    const invalidPayload = {
      customerName: '',
      objectAddress: '–∞–¥—Ä–µ—Å'
      // –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    };

    const invalidResponse = await fetch(`${BASE_URL}/projects`, {
      method: 'POST',
      headers,
      body: JSON.stringify(invalidPayload)
    });

    console.log(`   –°—Ç–∞—Ç—É—Å: ${invalidResponse.status}`);
    const invalidData = await invalidResponse.text();
    console.log(`   –û—Ç–≤–µ—Ç: ${invalidData.substring(0, 200)}...`);
    console.log('');

    console.log('üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å—ã –æ—Ç–≤–µ—Ç–æ–≤:');
    console.log('   ‚Ä¢ GET /projects - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 200 –∏–ª–∏ 401 (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞)');
    console.log('   ‚Ä¢ POST /projects - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 201 –∏–ª–∏ 401 (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞)');
    console.log('   ‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 409 (PROJECT_CODE_CONFLICT)');
    console.log('   ‚Ä¢ –ß—É–∂–æ–π –ø—Ä–æ–µ–∫—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 403 (FOREIGN_TENANT) –∏–ª–∏ 404');
    console.log('   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 400 (MISSING_REQUIRED_FIELDS)');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testProjectsAPI().catch(console.error);
