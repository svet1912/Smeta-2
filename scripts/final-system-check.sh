#!/bin/bash

# üöÄ SMETA360-2 Final System Status
# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã

echo "üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê SMETA360-2"
echo "================================="
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP-–æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
check_http_detailed() {
    local url=$1
    local name=$2
    local response=$(curl -s -o /dev/null -w "%{http_code}:%{time_total}" "$url" 2>/dev/null)
    local http_code=$(echo $response | cut -d':' -f1)
    local time_total=$(echo $response | cut -d':' -f2)
    
    if [ "$http_code" = "200" ]; then
        printf "‚úÖ %-30s ${GREEN}—Ä–∞–±–æ—Ç–∞–µ—Ç${NC} (HTTP $http_code, %.0fms)\n" "$name:" $(echo "$time_total * 1000" | bc -l 2>/dev/null || echo "0")
        return 0
    else
        printf "‚ùå %-30s ${RED}–ø—Ä–æ–±–ª–µ–º–∞${NC} (HTTP $http_code)\n" "$name:"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID
check_process_detailed() {
    local process_name=$1
    local description=$2
    
    local pid=$(pgrep -f "$process_name" | head -1)
    if [ -n "$pid" ]; then
        local memory=$(ps -p $pid -o rss= 2>/dev/null | tr -d ' ')
        if [ -n "$memory" ]; then
            local memory_mb=$((memory / 1024))
            printf "‚úÖ %-30s ${GREEN}–∑–∞–ø—É—â–µ–Ω${NC} (PID: $pid, RAM: ${memory_mb}MB)\n" "$description:"
        else
            printf "‚úÖ %-30s ${GREEN}–∑–∞–ø—É—â–µ–Ω${NC} (PID: $pid)\n" "$description:"
        fi
        return 0
    else
        printf "‚ùå %-30s ${RED}–Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}\n" "$description:"
        return 1
    fi
}

echo "üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–¶–ï–°–°–û–í:"
echo "-------------------------------"
check_process_detailed "node index.js" "Backend Main Server"
check_process_detailed "node start.js" "Backend Start Server"
check_process_detailed "vite" "Frontend Vite Server"
check_process_detailed "concurrently" "Process Manager"
echo ""

echo "üåê –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê HTTP –°–ï–†–í–ò–°–û–í:"
echo "-----------------------------------"
check_http_detailed "http://localhost:3000" "Frontend (React + Vite)"
check_http_detailed "http://localhost:3001/api/health" "Backend Health Check"
check_http_detailed "http://localhost:3001/api/test" "Backend Database Test"
echo ""

echo "üóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:"
echo "------------------------"
db_response=$(curl -s http://localhost:3001/api/test 2>/dev/null)
if echo "$db_response" | grep -q "database_time"; then
    db_time=$(echo "$db_response" | grep -o '"database_time":"[^"]*"' | cut -d'"' -f4)
    printf "‚úÖ %-30s ${GREEN}–ø–æ–¥–∫–ª—é—á–µ–Ω–∞${NC}\n" "PostgreSQL:"
    printf "   %-30s ${BLUE}%s${NC}\n" "–í—Ä–µ–º—è –ë–î:" "$db_time"
    printf "   %-30s ${BLUE}%s${NC}\n" "–ü—Ä–æ–≤–∞–π–¥–µ—Ä:" "Aiven Cloud"
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î
    start_time=$(date +%s%3N)
    curl -s http://localhost:3001/api/test >/dev/null 2>&1
    end_time=$(date +%s%3N)
    db_response_time=$((end_time - start_time))
    
    if [ $db_response_time -lt 200 ]; then
        printf "   %-30s ${GREEN}%dms (–æ—Ç–ª–∏—á–Ω–æ)${NC}\n" "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ë–î:" $db_response_time
    elif [ $db_response_time -lt 500 ]; then
        printf "   %-30s ${YELLOW}%dms (—Ö–æ—Ä–æ—à–æ)${NC}\n" "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ë–î:" $db_response_time
    else
        printf "   %-30s ${RED}%dms (–º–µ–¥–ª–µ–Ω–Ω–æ)${NC}\n" "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ë–î:" $db_response_time
    fi
else
    printf "‚ùå %-30s ${RED}–ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º${NC}\n" "PostgreSQL:"
fi
echo ""

echo "üîí –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:"
echo "------------------------"
# –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
rate_limit_headers=$(curl -I -s http://localhost:3001/api/health 2>/dev/null | grep -i ratelimit | wc -l)
if [ $rate_limit_headers -gt 0 ]; then
    printf "‚úÖ %-30s ${GREEN}–∞–∫—Ç–∏–≤–µ–Ω${NC}\n" "Rate Limiting:"
    curl -I -s http://localhost:3001/api/health 2>/dev/null | grep -i ratelimit | sed 's/^/   /'
else
    printf "‚ö†Ô∏è  %-30s ${YELLOW}–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é${NC}\n" "Rate Limiting:"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
cors_headers=$(curl -I -s http://localhost:3001/api/health 2>/dev/null | grep -i "access-control" | wc -l)
if [ $cors_headers -gt 0 ]; then
    printf "‚úÖ %-30s ${GREEN}–Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}\n" "CORS:"
else
    printf "‚ö†Ô∏è  %-30s ${YELLOW}–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é${NC}\n" "CORS:"
fi
echo ""

echo "üìä –ü–†–û–í–ï–†–ö–ê –ü–û–†–¢–û–í –ò –°–ï–¢–ï–í–´–• –°–û–ï–î–ò–ù–ï–ù–ò–ô:"
echo "---------------------------------------"
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
for port in 3000 3001 4174; do
    if netstat -tlnp 2>/dev/null | grep ":$port " | grep -q LISTEN; then
        process_info=$(netstat -tlnp 2>/dev/null | grep ":$port " | grep LISTEN | awk '{print $7}' | cut -d'/' -f2)
        printf "‚úÖ %-30s ${GREEN}–∞–∫—Ç–∏–≤–µ–Ω${NC} (%s)\n" "–ü–æ—Ä—Ç $port:" "$process_info"
    else
        printf "‚ùå %-30s ${RED}–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω${NC}\n" "–ü–æ—Ä—Ç $port:"
    fi
done
echo ""

echo "‚ö° –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:"
echo "-----------------------------"
# –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ API
echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API..."
total_time=0
successful_requests=0

for i in {1..5}; do
    start_time=$(date +%s%3N)
    if curl -s http://localhost:3001/api/health >/dev/null 2>&1; then
        end_time=$(date +%s%3N)
        response_time=$((end_time - start_time))
        total_time=$((total_time + response_time))
        successful_requests=$((successful_requests + 1))
    fi
done

if [ $successful_requests -gt 0 ]; then
    avg_time=$((total_time / successful_requests))
    if [ $avg_time -lt 100 ]; then
        printf "‚úÖ %-30s ${GREEN}%dms (–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ)${NC}\n" "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è API:" $avg_time
    elif [ $avg_time -lt 200 ]; then
        printf "‚úÖ %-30s ${GREEN}%dms (–æ—Ç–ª–∏—á–Ω–æ)${NC}\n" "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è API:" $avg_time
    elif [ $avg_time -lt 500 ]; then
        printf "‚ö†Ô∏è  %-30s ${YELLOW}%dms (–ø—Ä–∏–µ–º–ª–µ–º–æ)${NC}\n" "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è API:" $avg_time
    else
        printf "‚ùå %-30s ${RED}%dms (–º–µ–¥–ª–µ–Ω–Ω–æ)${NC}\n" "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è API:" $avg_time
    fi
    printf "   %-30s ${BLUE}%d/5${NC}\n" "–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:" $successful_requests
else
    printf "‚ùå %-30s ${RED}API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}\n" "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"
fi
echo ""

echo "üß™ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´:"
echo "-----------------------"
# –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
printf "%-30s " "–≠–Ω–¥–ø–æ–∏–Ω—Ç /api/auth/login:"
auth_test=$(curl -s -X POST -H "Content-Type: application/json" \
    -d '{"email":"test@test.com","password":"test123"}' \
    http://localhost:3001/api/auth/login 2>/dev/null)

if echo "$auth_test" | grep -q -E "(email|–ø–∞—Ä–æ–ª—å|–ù–µ–≤–µ—Ä–Ω—ã–π|success)"; then
    printf "${GREEN}—Ä–∞–±–æ—Ç–∞–µ—Ç${NC} (–æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç)\n"
else
    printf "${RED}–ø—Ä–æ–±–ª–µ–º–∞${NC}\n"
fi

# –¢–µ—Å—Ç API –º–∞—Ä—à—Ä—É—Ç–æ–≤
printf "%-30s " "API –º–∞—Ä—à—Ä—É—Ç—ã:"
if curl -s http://localhost:3001/api/health | grep -q "OK"; then
    printf "${GREEN}—Ä–∞–±–æ—Ç–∞—é—Ç${NC}\n"
else
    printf "${RED}–ø—Ä–æ–±–ª–µ–º–∞${NC}\n"
fi
echo ""

echo "üìà –û–ë–©–ò–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:"
echo "========================"

# –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
components_ok=0
total_components=8

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
if pgrep -f "node index.js" >/dev/null; then ((components_ok++)); fi
if pgrep -f "vite" >/dev/null; then ((components_ok++)); fi
if curl -s http://localhost:3000 >/dev/null 2>&1; then ((components_ok++)); fi
if curl -s http://localhost:3001/api/health | grep -q "OK" 2>/dev/null; then ((components_ok++)); fi
if curl -s http://localhost:3001/api/test | grep -q "database_time" 2>/dev/null; then ((components_ok++)); fi
if netstat -tlnp 2>/dev/null | grep -q ":3000.*LISTEN"; then ((components_ok++)); fi
if netstat -tlnp 2>/dev/null | grep -q ":3001.*LISTEN"; then ((components_ok++)); fi

# API performance test
start_time=$(date +%s%3N)
curl -s http://localhost:3001/api/health >/dev/null 2>&1
end_time=$(date +%s%3N)
response_time=$((end_time - start_time))
if [ $response_time -lt 200 ]; then ((components_ok++)); fi

percentage=$((components_ok * 100 / total_components))

if [ $percentage -ge 90 ]; then
    printf "üéâ ${GREEN}–°–¢–ê–¢–£–°: –û–¢–õ–ò–ß–ù–û${NC} (%d/%d –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - %d%%)\n" $components_ok $total_components $percentage
    echo "‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
elif [ $percentage -ge 75 ]; then
    printf "‚ö†Ô∏è  ${YELLOW}–°–¢–ê–¢–£–°: –•–û–†–û–®–û${NC} (%d/%d –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - %d%%)\n" $components_ok $total_components $percentage
    echo "üîß –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
elif [ $percentage -ge 50 ]; then
    printf "‚ùå ${RED}–°–¢–ê–¢–£–°: –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø${NC} (%d/%d –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - %d%%)\n" $components_ok $total_components $percentage
    echo "üö® –ù–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"
else
    printf "üö® ${RED}–°–¢–ê–¢–£–°: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê${NC} (%d/%d –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - %d%%)\n" $components_ok $total_components $percentage
    echo "üí• –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
fi

echo ""
echo "üîó –°–°–´–õ–ö–ò –î–õ–Ø –î–û–°–¢–£–ü–ê:"
echo "====================="
printf "üñ•Ô∏è  %-20s ${BLUE}http://localhost:3000${NC}\n" "Frontend:"
printf "üîß %-20s ${BLUE}http://localhost:3001${NC}\n" "Backend API:"
printf "üìä %-20s ${BLUE}http://localhost:3001/api/health${NC}\n" "Health Check:"
printf "üß™ %-20s ${BLUE}http://localhost:3001/api/test${NC}\n" "Test Endpoint:"

echo ""
echo "üìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:"
echo "==============="
echo "üìñ –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: PROJECT_DOCUMENTATION.md"
echo "üéØ –°—Ç–∞—Ç—É—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: OPTIMIZATION_COMPLETE.md"
echo "üîí –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: docs/SECURITY_IMPLEMENTATION.md"
echo ""
echo "üéä SMETA360-2 Enterprise-Grade Construction Estimation System"
echo "   ‚ú® –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"