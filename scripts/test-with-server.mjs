#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend —Ç–µ—Å—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Ä–≤–µ—Ä–æ–º
 */

import { spawn } from 'child_process';
import { setTimeout } from 'timers/promises';
import fetch from 'node-fetch';

const API_URL = 'http://localhost:3001/api/health';
const SERVER_START_TIMEOUT = 30000; // 30 —Å–µ–∫—É–Ω–¥
const SERVER_CHECK_INTERVAL = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞

let serverProcess = null;
let testProcess = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function waitForServer() {
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');

  const startTime = Date.now();

  while (Date.now() - startTime < SERVER_START_TIMEOUT) {
    try {
      const response = await fetch(API_URL, { timeout: 3000 });
      if (response.ok) {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤');
        return true;
      }
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
    }

    await setTimeout(SERVER_CHECK_INTERVAL);
  }

  throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ ${SERVER_START_TIMEOUT}ms`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
async function cleanup() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');

  if (testProcess) {
    testProcess.kill('SIGTERM');
    testProcess = null;
  }

  if (serverProcess) {
    serverProcess.kill('SIGTERM');
    serverProcess = null;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤
  try {
    const { spawn: syncSpawn } = await import('child_process');
    syncSpawn('lsof', ['-ti:3001'], { stdio: 'pipe' }).stdout.on('data', (data) => {
      const pids = data.toString().trim().split('\n');
      pids.forEach((pid) => {
        if (pid) {
          try {
            process.kill(parseInt(pid), 'SIGKILL');
            console.log(`üî™ –£–±–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å ${pid} –Ω–∞ –ø–æ—Ä—Ç—É 3001`);
          } catch {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
          }
        }
      });
    });
  } catch {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...');
  await cleanup();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await cleanup();
  process.exit(0);
});

async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ backend —Ç–µ—Å—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');

    // 1. –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤
    await cleanup();
    await setTimeout(2000);

    // 2. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üåê –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...');
    serverProcess = spawn('npm', ['run', 'server'], {
      stdio: ['ignore', 'pipe', 'pipe'],
      detached: false
    });

    serverProcess.stdout.on('data', (data) => {
      const output = data.toString();
      if (output.includes('Server running') || output.includes('üöÄ')) {
        console.log('üì° –°–µ—Ä–≤–µ—Ä:', output.trim());
      }
    });

    serverProcess.stderr.on('data', (data) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', data.toString().trim());
    });

    // 3. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    await waitForServer();

    // 4. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    console.log('üß™ –ó–∞–ø—É—Å–∫ backend —Ç–µ—Å—Ç–æ–≤...');
    testProcess = spawn('vitest', ['run', '--config', 'vitest.config.js'], {
      stdio: 'inherit',
      env: { ...process.env, NODE_ENV: 'test' }
    });

    // 5. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    const testExitCode = await new Promise((resolve) => {
      testProcess.on('close', resolve);
    });

    console.log(`üìä –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –∫–æ–¥–æ–º: ${testExitCode}`);

    // 6. –û—á–∏—Å—Ç–∫–∞
    await cleanup();

    process.exit(testExitCode);
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
    await cleanup();
    process.exit(1);
  }
}

main();
