version: '3.8'

# Blue-Green Deployment Configuration for SMETA360-2
# Phase 4 Step 1: DevOps & Deployment

services:
  # Blue Environment (Current Production)
  app-blue:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: smeta360_app_blue
    environment:
      - NODE_ENV=production
      - DEPLOYMENT_COLOR=blue
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "3001:3001"
    networks:
      - smeta_network
    labels:
      - "deployment.color=blue"
      - "deployment.active=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Green Environment (Staging/New Version)
  app-green:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: smeta360_app_green
    environment:
      - NODE_ENV=production
      - DEPLOYMENT_COLOR=green
      - PORT=3002
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "3002:3002"
    networks:
      - smeta_network
    labels:
      - "deployment.color=green"
      - "deployment.active=false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Load Balancer / Reverse Proxy
  nginx-lb:
    image: nginx:alpine
    container_name: smeta360_nginx_lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/ssl:/etc/nginx/ssl
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d
    networks:
      - smeta_network
    depends_on:
      - app-blue
      - app-green
    labels:
      - "service=load-balancer"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smeta360_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-smeta360_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./deployment/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - smeta_network
    labels:
      - "service=database"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smeta360_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - smeta_network
    command: redis-server /usr/local/etc/redis/redis.conf
    labels:
      - "service=cache"

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: smeta360_prometheus_prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert.rules.yml:/etc/prometheus/alert.rules.yml
      - prometheus_prod_data:/prometheus
    networks:
      - smeta_network
    labels:
      - "service=monitoring"

  grafana:
    image: grafana/grafana:10.1.0
    container_name: smeta360_grafana_prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - smeta_network
    labels:
      - "service=visualization"

  # Deployment Manager Service
  deployment-manager:
    build:
      context: ./deployment/manager
      dockerfile: Dockerfile
    container_name: smeta360_deployment_manager
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./deployment/scripts:/scripts
    networks:
      - smeta_network
    labels:
      - "service=deployment"

volumes:
  postgres_prod_data:
  redis_prod_data:
  prometheus_prod_data:
  grafana_prod_data:

networks:
  smeta_network:
    driver: bridge
    labels:
      - "environment=production"