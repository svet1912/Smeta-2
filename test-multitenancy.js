#!/usr/bin/env node
// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ multitenancy middleware

const http = require('http');

async function makeRequest(path, headers = {}) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3001,
      path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          data: data,
          headers: res.headers
        });
      });
    });

    req.on('error', reject);
    req.end();
  });
}

async function testMultitenancy() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Multitenancy Middleware');
  console.log('=' .repeat(50));

  // Test 1: –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
  console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç –±–µ–∑ JWT —Ç–æ–∫–µ–Ω–∞:');
  try {
    const response = await makeRequest('/api/test');
    console.log(`   Status: ${response.statusCode}`);
    console.log(`   Data: ${response.data}`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }

  // Test 2: –ó–∞–ø—Ä–æ—Å —Å –≤–∞–ª–∏–¥–Ω—ã–º JWT —Ç–æ–∫–µ–Ω–æ–º (—Å–æ–¥–µ—Ä–∂–∏—Ç tenantId)
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º JWT —Ç–æ–∫–µ–Ω–æ–º:');
  const validToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjYsImVtYWlsIjoia2l5MDI2QHlhbmRleC5ydSIsImZpcnN0bmFtZSI6ItCY0LvRjNGPIiwibGFzdG5hbWUiOiLQmtGD0LfRjNC80LjQvSIsInJvbGUiOiJzdXBlcl9hZG1pbiIsInRlbmFudElkIjoiY2Q1ZmZiMGYtODYxNi00MjI3LWEwNTYtNGY3MjllZDY5MzNjIiwiaWF0IjoxNzU5ODMzMTg1LCJleHAiOjE3NTk5MTk1ODV9.i-G-s6UBvCrb0Dc8oiZXyioC0WKWL1oCsrCxIeWcQzA';
  
  try {
    const response = await makeRequest('/api/test', {
      'Authorization': `Bearer ${validToken}`
    });
    console.log(`   Status: ${response.statusCode}`);
    console.log(`   Data: ${response.data}`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }

  // Test 3: Health check (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è)
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç Health Check (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è):');
  try {
    const response = await makeRequest('/api/health', {
      'Authorization': `Bearer ${validToken}`
    });
    console.log(`   Status: ${response.statusCode}`);
    console.log(`   Data: ${response.data}`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è tenant middleware —Å–æ–æ–±—â–µ–Ω–∏–π');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testMultitenancy().catch(console.error);